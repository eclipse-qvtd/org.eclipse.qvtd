import simplerdbms : 'SimpleRDBMS.ecore#/';
import simpleuml : 'SimpleUML.ecore#/';
import umltordbms : 'SimpleUML2RDBMS.ecore#/';

package simpleUML2RDBMS = 'http://simpleUML2RDBMS'
{
	transformation SimpleUML2RDBMS
	{
		uml imports simpleuml;
		rdbms imports simplerdbms;
		middle imports umltordbms;
	}
}

map packageToSchema_LM in simpleUML2RDBMS::SimpleUML2RDBMS
{
	check uml(p : Package) {}
	enforce middle() {
		realize p2s : PackageToSchema
	}
	set p2s.umlPackage := p;
	set p2s.name := p.name;
}

map packageToSchema_MR in simpleUML2RDBMS::SimpleUML2RDBMS
{
	enforce rdbms() {
		realize s : Schema
	}
	check middle(p2s : PackageToSchema) {}
	set s.name := p2s.name;
	set p2s.schema := s;
}

map integerToNumber_LM in simpleUML2RDBMS::SimpleUML2RDBMS
{
	check uml(p : Package,
		prim : PrimitiveDataType) {}
	enforce middle(p2s : PackageToSchema) {
		realize p2n : IntegerToNumber
	}
	where (p2s.umlPackage = p;
		prim.namespace = p;
		prim.name = 'Integer';) {}
	set p2n.owner := p2s;
	set p2n._'primitive' := prim;
	set p2n.name := prim.name + '2' + 'NUMBER';
}

map integerToNumber_MR in simpleUML2RDBMS::SimpleUML2RDBMS
{
	enforce rdbms() {}
	check middle(p2s : PackageToSchema,
		p2n : IntegerToNumber) {}
	where (p2n.owner = p2s;) {
		sqlType : String := 'NUMBER'
	}
	set p2n.typeName := sqlType;
}

map booleanToBoolean_MR in simpleUML2RDBMS::SimpleUML2RDBMS
{
	enforce rdbms() {}
	check middle(p2s : PackageToSchema,
		p2n : BooleanToBoolean) {}
	where (p2n.owner = p2s;) {
		sqlType : String
	|
		sqlType := 'BOOLEAN';
	}
	set p2n.typeName := sqlType;
}

map booleanToBoolean_LM in simpleUML2RDBMS::SimpleUML2RDBMS
{
	check uml(p : Package,
		prim : PrimitiveDataType) {}
	enforce middle(p2s : PackageToSchema) {
		realize p2n : BooleanToBoolean
	}
	where (p2s.umlPackage = p;
		prim.namespace = p;
		prim.name = 'Boolean';) {}
	set p2n._'primitive' := prim;
	set p2n.name := prim.name + '2' + 'BOOLEAN';
	set p2n.owner := p2s;
}

map stringToVarchar_MR in simpleUML2RDBMS::SimpleUML2RDBMS
{
	enforce rdbms() {}
	check middle(p2s : PackageToSchema,
		p2n : StringToVarchar) {}
	where (p2n.owner = p2s;) {
		sqlType : String := 'VARCHAR'
	|}
	set p2n.typeName := sqlType;
}

map stringToVarchar_LM in simpleUML2RDBMS::SimpleUML2RDBMS
{
	check uml(p : Package,
		prim : PrimitiveDataType) {}
	enforce middle(p2s : PackageToSchema) {
		realize p2n : StringToVarchar
	}
	where (p2s.umlPackage = p;
		prim.namespace = p;
		prim.name = 'String';) {}
	set p2n.name := prim.name + '2' + 'VARCHAR';
	set p2n.owner := p2s;
	set p2n._'primitive' := prim;
}

map classToTable_MR in simpleUML2RDBMS::SimpleUML2RDBMS
{
	enforce rdbms(s : Schema) {
		realize t : Table,
		realize pk : Key,
		realize pc : Column
	}
	check middle(p2s : PackageToSchema,
		c2t : ClassToTable) {}
	where (p2s.schema = s;
		c2t.owner = p2s;) {
		c2t_name : String[?] := c2t.name |}
	set c2t.table := t;
	set t.name := c2t_name;
	set c2t.primaryKey := pk;
	set c2t.column := pc;
	set t.kind := 'base';
	set t.schema := s;
	set pk.owner := t;
	set pk.kind := 'primary';
	set pc.owner := t;
	set pc.keys := OrderedSet(simplerdbms::Key){pk};
	set pc.type := 'NUMBER';
	set pc.name := c2t_name + '_tid';
	set pk.name := c2t_name + '_pk';
}

map classToTable_LM in simpleUML2RDBMS::SimpleUML2RDBMS
{
	check uml(p : Package,
		c : Class) {}
	enforce middle(p2s : PackageToSchema) {
		realize c2t : ClassToTable
	}
	where (p2s.umlPackage = p;
		c.kind = 'persistent';
		c.namespace = p;) {}
	set c2t.owner := p2s;
	set c2t.name := c.name;
	set c2t.umlClass := c;
}

map associationToForeignKey_MR in simpleUML2RDBMS::SimpleUML2RDBMS
{
	enforce rdbms(s : Schema,
		st : Table,
		dt : Table,
		rk : Key) {
		realize fk : ForeignKey,
		realize fc : Column
	}
	check middle(p2s : PackageToSchema,
		sc2t : ClassToTable,
		dc2t : ClassToTable,
		a2f : AssociationToForeignKey) {}
	where (dc2t.table = dt;
		sc2t.owner = p2s;
		p2s.schema = s;
		sc2t.table = st;
		a2f.referenced = dc2t;
		a2f.owner = sc2t;
		rk.kind = 'primary';
		rk.owner = dt;
		st.schema = s;) {}
	set fk.name := a2f.name;
	set a2f.foreignKey := fk;
	set fc.type := rk.column->first().type;
	set fc.name := a2f.name + '_tid';
	set a2f.column := fc;
	set fk.owner := st;
	set fc.owner := st;
	set fk.refersTo := rk;
	set fc.foreignKeys := OrderedSet(simplerdbms::ForeignKey){fk};
}

map associationToForeignKey_LM in simpleUML2RDBMS::SimpleUML2RDBMS
{
	check uml(p : Package,
		sc : Class,
		dc : Class,
		a : Association) {}
	enforce middle(p2s : PackageToSchema,
		sc2t : ClassToTable,
		dc2t : ClassToTable) {
		realize a2f : AssociationToForeignKey
	}
	where (sc2t.owner = p2s;
		dc2t.umlClass = dc;
		sc2t.umlClass = sc;
		p2s.umlPackage = p;
		a.namespace = p;
		sc.namespace = p;
		a.source = sc;
		a.destination = dc;) {
	    a2f_name : String |
	    a2f_name := if a.destination = dc and a.source = sc
                		then a.name
                		else if a.destination <> dc and a.source = sc
                			then dc.name + '_' + a.name
                			else if a.destination = dc and a.source <> sc
                				then a.name + '_' + sc.name
                				else dc.name + '_' + a.name + '_' + sc.name
                				endif
                			endif
                		endif;
    }
	set a2f.association := a;
	set a2f.referenced := dc2t;
	set a2f.name := a2f_name;
	set a2f.owner := sc2t;
	set a.name := if a.destination = dc and a.source = sc
            		then a2f_name
            		else a.name
            		endif;
}

map classPrimitiveAttributes_LM in simpleUML2RDBMS::SimpleUML2RDBMS
{
	check uml(t : PrimitiveDataType,
		c : Class,
		a : Attribute) {}
	enforce middle(fao : ClassToTable,
		p2n : PrimitiveToName) {
		realize fa : AttributeToColumn
	}
	where (fao.umlClass = c;
		p2n._'primitive' = t;
		a.owner = c;
		a.type = t;) {}
	set fa.owner := fao;
	set fa.type := p2n;
	set fa.name := a.name;
--	set fa.owner := fao;
	set fa.kind := a.kind;
--	set fa.kind := a.kind;
	set fa._'attribute' := a;
--	set fa._'attribute' := a;
	set fa.leafs := Set(umltordbms::AttributeToColumn){fa};
}

map classComplexAttributes_LM in simpleUML2RDBMS::SimpleUML2RDBMS
{
	check uml(t : Class,
		c : Class,
		a : Attribute) {}
	enforce middle(fao : ClassToTable) {
		realize fa : NonLeafAttribute
	}
	where (fao.umlClass = c;
		a.owner = c;
		a.type = t;) {}
	set fa._'attribute' := a;
	set fa.kind := a.kind;
	set fa.owner := fao;
--	set fa.owner := fao;
	set fa.name := a.name;
	set fa.leafs := fao.fromAttributes.leafs->asSet();
--	set fa.kind := a.kind;
}

map complexAttributePrimitiveAttributes_LM in simpleUML2RDBMS::SimpleUML2RDBMS
{
	check uml(ca : Attribute,
		c : Class,
		t : PrimitiveDataType,
		a : Attribute) {}
	enforce middle(fao : NonLeafAttribute,
		p2n : PrimitiveToName) {
		realize fa : AttributeToColumn
	}
	where (fao._'attribute' = ca;
		p2n._'primitive' = t;
		a.owner = c;
		a.type = t;
		ca.type = c;
		a.owner = c;) {}
	set fa.owner := fao;
	set fa._'attribute' := a;
	set fa.kind := a.kind;
	set fa.type := p2n;
	set fa.leafs := Set(umltordbms::AttributeToColumn){fa};
	set fa.name := fao.name + '_' + a.name;
--	set fa.kind := a.kind;
--	set fa._'attribute' := a;
--	set fa.owner := fao;
}

map complexAttributeComplexAttributes_LM in simpleUML2RDBMS::SimpleUML2RDBMS
{
	check uml(ca : Attribute,
		c : Class,
		t : Class,
		a : Attribute) {}
	enforce middle(fao : NonLeafAttribute) {
		realize fa : NonLeafAttribute
	}
	where (fao._'attribute' = ca;
		a.owner = c;
		a.owner = c;
		ca.type = c;
		a.type = t;) {}
	set fa.owner := fao;
	set fa.kind := a.kind;
	set fa.leafs := fao.fromAttributes.leafs->asSet();
	set fa._'attribute' := a;
--	set fa._'attribute' := a;
	set fa.name := fao.name + '_' + a.name;
--	set fa.kind := a.kind;
--	set fa.owner := fao;
}

map attributeColumns_MR in simpleUML2RDBMS::SimpleUML2RDBMS
{
	enforce rdbms(t : Table,
		ct : String) {
		realize c : Column
	}
	check middle(c2t : ClassToTable,
		p2n : PrimitiveToName,
		a2c : AttributeToColumn) {}
	where (c2t.table = t;
		p2n.typeName = ct;
		a2c.owner = c2t;
		c2t.fromAttributes.leafs->includes(a2c);
		a2c.type = p2n;) {}
	set c.name := a2c.name;
	set c.kind := a2c.kind;
	set a2c.column := c;
	set c.owner := t;
	set c.type := ct;
}

map __root__ in simpleUML2RDBMS::SimpleUML2RDBMS
{
	where () {}
	for p : simpleuml::Package in uml.objectsOfKind(Package) {
		call packageToSchema_LM {
			p := p;
		}
	}
	for p2s : umltordbms::PackageToSchema in middle.objectsOfKind(PackageToSchema) {
		call packageToSchema_MR {
			p2s := p2s;
		}
	}
	for c : simpleuml::Class in uml.objectsOfKind(Class) {
		call classToTable_LM {
			c := c;
			p := c.namespace;
			p2s := c.namespace.middle;
		}
	}
	for c2t : umltordbms::ClassToTable in middle.objectsOfKind(ClassToTable) {
		call classToTable_MR {
			c2t := c2t;
			p2s := c2t.owner;
			s := c2t.owner.schema;
		}
	}
	for a : simpleuml::Association in uml.objectsOfKind(Association) {
		call associationToForeignKey_LM {
			a := a;
			sc := a.source;
			dc := a.destination;
			p := a.namespace;
			sc2t := a.source.middle;
			dc2t := a.destination.middle;
			p2s := a.source.middle.owner;
		}
	}
	for a2f : umltordbms::AssociationToForeignKey in middle.objectsOfKind(AssociationToForeignKey) {
		for rk : simplerdbms::Key in rdbms.objectsOfKind(Key) {
			call associationToForeignKey_MR {
				a2f := a2f;
				rk := rk;
				dc2t := a2f.referenced;
				sc2t := a2f.owner;
				st := a2f.owner.table;
				s := a2f.owner.table.schema;
				dt := a2f.referenced.table;
				p2s := a2f.owner.owner;
			}
		}
	}
	for prim : simpleuml::PrimitiveDataType in uml.objectsOfKind(PrimitiveDataType) {
		call stringToVarchar_LM {
			prim := prim;
			p := prim.namespace;
			p2s := prim.namespace.middle;
		}
	}
	for prim : simpleuml::PrimitiveDataType in uml.objectsOfKind(PrimitiveDataType) {
		call integerToNumber_LM {
			prim := prim;
			p := prim.namespace;
			p2s := prim.namespace.middle;
		}
	}
	for prim : simpleuml::PrimitiveDataType in uml.objectsOfKind(PrimitiveDataType) {
		call booleanToBoolean_LM {
			prim := prim;
			p := prim.namespace;
			p2s := prim.namespace.middle;
		}
	}
	for a : simpleuml::Attribute in uml.objectsOfKind(Attribute)->select(type.oclIsKindOf(PrimitiveDataType)) {
		call classPrimitiveAttributes_LM {
			a := a;
			c := a.owner;
			t := a.type;
			p2n := a.type.oclAsType(PrimitiveDataType).middle;
			fao := a.owner.middle;
		}
	}
	for p2n : umltordbms::IntegerToNumber in middle.objectsOfKind(IntegerToNumber) {
		call integerToNumber_MR {
			p2n := p2n;
			p2s := p2n.owner;
		}
	}
	for p2n : umltordbms::BooleanToBoolean in middle.objectsOfKind(BooleanToBoolean) {
		call booleanToBoolean_MR {
			p2n := p2n;
			p2s := p2n.owner;
		}
	}
    for p2n : umltordbms::StringToVarchar in middle.objectsOfKind(StringToVarchar) {
		call stringToVarchar_MR {
			p2n := p2n;
			p2s := p2n.owner;
		}
	}
	for a : simpleuml::Attribute in uml.objectsOfKind(Attribute) {
		call classComplexAttributes_LM {
			a := a;
			t := a.type;
			c := a.owner;
			fao := a.owner.middle;
		}
	}
	for fao : umltordbms::NonLeafAttribute in middle.objectsOfKind(NonLeafAttribute) {
		for a : simpleuml::Attribute in uml.objectsOfKind(Attribute) {
			call complexAttributeComplexAttributes_LM {
				a := a;
				fao := fao;
				ca := fao._'attribute';
				t := a.type;
				c := fao._'attribute'.type;
			}
		}
	}
	for a : simpleuml::Attribute in uml.objectsOfKind(Attribute)->select(type.oclIsKindOf(PrimitiveDataType)) {
		for ca : simpleuml::Attribute in uml.objectsOfKind(Attribute) {
			call complexAttributePrimitiveAttributes_LM {
				a := a;
				ca := ca;
				c := a.owner;
				t := a.type;
				p2n := a.type.oclAsType(PrimitiveDataType).middle;
				fao := ca.middle;
			}
		}
	}
	for a2c : umltordbms::AttributeToColumn in middle.objectsOfKind(AttributeToColumn)->select(owner.oclIsKindOf(umltordbms::ClassToTable)) {
		call attributeColumns_MR {
			a2c := a2c;
			p2n := a2c.type;
			c2t := a2c.owner;
			t := a2c.owner.oclAsType(umltordbms::ClassToTable).table;
			ct := a2c.type.typeName;
		}
	}
}