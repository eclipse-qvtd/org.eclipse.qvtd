import 'Tree.ecore'::tree;
import 'TallTree.ecore'::talltree;
import 'Tree2TallTree.ecore'::tree2talltree;

transformation Tree2TallTree {
	tree imports tree;
	talltree imports talltree;
	tree2talltree imports tree2talltree;
}

map __root__ in Tree2TallTree {
    for node : tree::Node in tree.objectsOfKind(Node)->sortedBy(name) {
        call Node2MiddleNode {
            node := node;
        } 
    } 
    for node : tree::Node in tree.objectsOfKind(Node)->sortedBy(name) {
        call Edge2MiddleEdge {
            node := node;
            node2tallNode := node.Node2TallNode;
        } 
    } 
    for node2tallNode : tree2talltree::Node2TallNode in tree2talltree.objectsOfKind(Node2TallNode)->sortedBy(name) {
        call MiddleNode2TallNode {
            node2tallNode ?= node2tallNode;			--isPolled
        } 
    } 
}

map Node2MiddleNode in Tree2TallTree {
	check tree(in  node : Node;) {} 
	new:tree2talltree node2tallNode : Node2TallNode;
	set node2tallNode.node := node;
	set node2tallNode.name := node.name;
}

map Edge2MiddleEdge in Tree2TallTree {
	check tree(in node : Node;) {} 
	enforce tree2talltree {
		enforce Node2TallNode::parent
	} (in node2tallNode : Node2TallNode;) {
--		realize node2tallNode : Node2TallNode
	}
	where(check node.parent <> null;) {}
	set node2tallNode.parent := node.parent.Node2TallNode;
--		node2tallNode.name := node.name;
}

map MiddleNode2TallNode in Tree2TallTree {
	check tree2talltree {
		check Node2TallNode::tallNode, Node2TallNode::children
		enforce Node2TallNode::tallNode
	} (in node2tallNode : Node2TallNode;) {} 
	enforce talltree {
		check TallNode::height
		enforce TallNode::height
	} () {}
	where () {
		var tallNode_name : String := node2tallNode.name;
		var tallNode_children : Set(TallNode) := node2tallNode.children?.tallNode->asSet();
		var tallNode_height : Integer := if node2tallNode.children->notEmpty() then node2tallNode.children.tallNode.height->max() + 1 else 0 endif;
	}
	new:talltree tallNode : TallNode;
	set	node2tallNode.tallNode := tallNode;
	set	tallNode.name := tallNode_name;
	set	tallNode.children := tallNode_children;
	set	tallNode.height := tallNode_height;
}
