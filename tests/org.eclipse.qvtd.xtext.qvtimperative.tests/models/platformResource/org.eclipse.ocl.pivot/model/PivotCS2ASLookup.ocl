import  cs : '../../org.eclipse.ocl.xtext.base/model/BaseCS.ecore#/'
import  as : 'Pivot.ecore#/'
import 'Lookup.ecore'
import 'PivotCS2ASHelpers.ocl'

package pivot
---- Default Environment related functionality
context OclElement
--	
def : _exported_env(importer : OclElement) : lookup::LookupEnvironment[1] =
	lookup::LookupEnvironment { }
	
-- Domain specific default functionality
def : env_Variable() : lookup::LookupEnvironment[1] =
	_env_Variable(null)
def : env_Class() : lookup::LookupEnvironment[1] =
	_env_Class(null)
def : env_Behavior() : lookup::LookupEnvironment[1] =
	_env_Behavior(null)
def : env_Operation() : lookup::LookupEnvironment[1] =
	_env_Operation(null)
def : env_Package() : lookup::LookupEnvironment[1] =
	_env_Package(null)
def : env_Precedence() : lookup::LookupEnvironment[1] =
	_env_Precedence(null)
def : env_EnumerationLiteral() : lookup::LookupEnvironment[1] =
	_env_EnumerationLiteral(null)
def : env_Property() : lookup::LookupEnvironment[1] =
	_env_Property(null)
def : env_Namespace() : lookup::LookupEnvironment[1] =
	_env_Namespace(null)

def : _env_Variable(child : OclElement) : lookup::LookupEnvironment[1] =
	parentEnv_Variable()
def : _env_Class(child : OclElement) : lookup::LookupEnvironment[1] =
	parentEnv_Class()
def : _env_Behavior(child : OclElement) : lookup::LookupEnvironment[1] =
	parentEnv_Behavior()
def : _env_Operation(child : OclElement) : lookup::LookupEnvironment[1] =
	parentEnv_Operation()
def : _env_Package(child : OclElement) : lookup::LookupEnvironment[1] =
	parentEnv_Package()
def : _env_Precedence(child : OclElement) : lookup::LookupEnvironment[1] =
	parentEnv_Precedence()
def : _env_EnumerationLiteral(child : OclElement) : lookup::LookupEnvironment[1] =
	parentEnv_EnumerationLiteral()
def : _env_Property(child : OclElement) : lookup::LookupEnvironment[1] =
	parentEnv_Property()
def : _env_Namespace(child : OclElement) : lookup::LookupEnvironment[1] =
	parentEnv_Namespace()

def : parentEnv_Variable() : lookup::LookupEnvironment[1] =
	let parent = oclContainer() in if parent = null then lookup::LookupEnvironment { } else parent._env_Variable(self) endif
def : parentEnv_Class() : lookup::LookupEnvironment[1] =
	let parent = oclContainer() in if parent = null then lookup::LookupEnvironment { } else parent._env_Class(self) endif
def : parentEnv_Behavior() : lookup::LookupEnvironment[1] =
	let parent = oclContainer() in if parent = null then lookup::LookupEnvironment { } else parent._env_Behavior(self) endif
def : parentEnv_Operation() : lookup::LookupEnvironment[1] =
	let parent = oclContainer() in if parent = null then lookup::LookupEnvironment { } else parent._env_Operation(self) endif
def : parentEnv_Package() : lookup::LookupEnvironment[1] =
	let parent = oclContainer() in if parent = null then lookup::LookupEnvironment { } else parent._env_Package(self) endif
def : parentEnv_Precedence() : lookup::LookupEnvironment[1] =
	let parent = oclContainer() in if parent = null then lookup::LookupEnvironment { } else parent._env_Precedence(self) endif
def : parentEnv_EnumerationLiteral() : lookup::LookupEnvironment[1] =
	let parent = oclContainer() in if parent = null then lookup::LookupEnvironment { } else parent._env_EnumerationLiteral(self) endif
def : parentEnv_Property() : lookup::LookupEnvironment[1] =
	let parent = oclContainer() in if parent = null then lookup::LookupEnvironment { } else parent._env_Property(self) endif
def : parentEnv_Namespace() : lookup::LookupEnvironment[1] =
	let parent = oclContainer() in if parent = null then lookup::LookupEnvironment { } else parent._env_Namespace(self) endif
-- End of domain specific default functionality
endpackage 

package lookup
context LookupEnvironment
def : nestedEnv() : LookupEnvironment[1] = 
	LookupEnvironment {
		parentEnv = self
	}
endpackage

package as

	
context Class
	
def : _lookupQualifiedProperty(pName : String) : Property[?] =
	let foundProperty = _lookupProperty(_qualified_env(), pName)
	in  if foundProperty->isEmpty()
		then null
		else foundProperty->first()
		endif
def : lookupQualifiedProperty(aPathElementCS : cs::PathElementCS) : Property[?] =
   _lookupQualifiedProperty(aPathElementCS.name)
   
	
def : _lookupQualifiedOperation(oName : String, argTypes : OrderedSet(Type)) : Operation[?] =
	let foundOperation = _lookupOperation(_qualified_env(), oName, argTypes)
	in  if foundOperation->isEmpty()
		then null
		else foundOperation->first()
		endif
def : lookupQualifiedOperation(aPathElementCS : cs::PathElementCS, argTypes : OrderedSet(Type)) : Operation[?] =
   _lookupQualifiedOperation(aPathElementCS.name, argTypes)
   
	
def : _qualified_env() : lookup::LookupEnvironment =
	let env = lookup::LookupEnvironment{}
	in env
		.addElements(ownedProperties)
.addElements(ownedOperations)
def : _env_Property(child : ocl::OclElement) : lookup::LookupEnvironment =
	parentEnv_Property().nestedEnv()
		.addElements(ownedProperties->select(not isStatic))
		
def : _env_Namespace(child : ocl::OclElement) : lookup::LookupEnvironment =
	parentEnv_Namespace().nestedEnv()
		.addElements(ownedProperties->select(not isStatic))
		.addElements(ownedOperations->select(not isStatic))
		.addElements(ownedBehaviors)
		
def : _env_Operation(child : ocl::OclElement) : lookup::LookupEnvironment =
	parentEnv_Operation().nestedEnv()
		.addElements(ownedOperations->select(not isStatic))
		
def : _env_Behavior(child : ocl::OclElement) : lookup::LookupEnvironment =
	parentEnv_Behavior().nestedEnv()
		.addElements(ownedBehaviors)
		
	
context DataType
def : _env_Property(child : ocl::OclElement) : lookup::LookupEnvironment =
	parentEnv_Property().nestedEnv()
		.addElements(ownedProperties->select(not isStatic))
		
def : _env_Namespace(child : ocl::OclElement) : lookup::LookupEnvironment =
	parentEnv_Namespace().nestedEnv()
		.addElements(ownedProperties->select(not isStatic))
		.addElements(ownedOperations->select(not isStatic))
		
def : _env_Operation(child : ocl::OclElement) : lookup::LookupEnvironment =
	parentEnv_Operation().nestedEnv()
		.addElements(ownedOperations->select(not isStatic))
		
	
context Enumeration
def : _env_EnumerationLiteral(child : ocl::OclElement) : lookup::LookupEnvironment =
	parentEnv_EnumerationLiteral().nestedEnv()
		.addElements(ownedLiterals)
		
def : _env_Property(child : ocl::OclElement) : lookup::LookupEnvironment =
	parentEnv_Property().nestedEnv()
		.addElements(ownedProperties->select(not isStatic))
		
def : _env_Operation(child : ocl::OclElement) : lookup::LookupEnvironment =
	parentEnv_Operation().nestedEnv()
		.addElements(ownedOperations->select(not isStatic))
		
def : _env_Behavior(child : ocl::OclElement) : lookup::LookupEnvironment =
	parentEnv_Behavior().nestedEnv()
		.addElements(ownedBehaviors)
		
	
context ExpressionInOCL
def : _env_Variable(child : ocl::OclElement) : lookup::LookupEnvironment =
	parentEnv_Variable().nestedEnv()
		.addElements(ownedContext->asSequence())
		.addElements(ownedParameters)
		.addElements(ownedResult->asSequence())
		
	
context IterateExp
def : _env_Variable(child : ocl::OclElement) : lookup::LookupEnvironment =
	if ownedIterators->includes(child)
	then parentEnv_Variable().nestedEnv()
		.addElements(ownedResult->asSequence())
		.addElements(ownedIterators->select(x | self.ownedIterators->indexOf(x) < self.ownedIterators->indexOf(child)))
		
	else parentEnv_Variable().nestedEnv()
		.addElements(ownedIterators)
		
	endif
	
context IteratorExp
def : _env_Variable(child : ocl::OclElement) : lookup::LookupEnvironment =
	if ownedIterators->includes(child)
	then parentEnv_Variable().nestedEnv()
		.addElements(ownedIterators->select(x | self.ownedIterators->indexOf(x) < self.ownedIterators->indexOf(child)))
		
	else parentEnv_Variable().nestedEnv()
		.addElements(ownedIterators)
		
	endif
	
context LetExp
def : _env_Variable(child : ocl::OclElement) : lookup::LookupEnvironment =
	if ownedIn->includes(child)
	then parentEnv_Variable().nestedEnv()
		.addElements(ownedVariable->asSequence())
		
	else parentEnv_Variable()
	endif
	
context Library
def : _env_Package(child : ocl::OclElement) : lookup::LookupEnvironment =
	parentEnv_Package().nestedEnv()
		.addElements(ownedPackages)
		
def : _env_Class(child : ocl::OclElement) : lookup::LookupEnvironment =
	parentEnv_Class().nestedEnv()
		.addElements(ownedClasses)
		
def : _env_Precedence(child : ocl::OclElement) : lookup::LookupEnvironment =
	parentEnv_Precedence().nestedEnv()
		.addElements(ownedPrecedences)
		
	
context Model
def : _env_Package(child : ocl::OclElement) : lookup::LookupEnvironment =
	let env = lookup::LookupEnvironment {}
	in env
		.addElements(ownedPackages)
		
def : _env_Namespace(child : ocl::OclElement) : lookup::LookupEnvironment =
	let env = lookup::LookupEnvironment {}
	in env
		.addElements(ownedPackages)
		.addElements(ownedImports.importedNamespace)
		-- NOT SUPPORTED YET .addElements(ownedImports.importedNamespace._exported_env(self).namedElements)
		
def : _exported_env(importer : ocl::OclElement) : lookup::LookupEnvironment =
	let env = lookup::LookupEnvironment {}
	in env
		.addElements(ownedPackages)
	
def : _lookupExportedPackage(importer : ocl::OclElement, pName : String) : Package[?] =
	let foundPackage = _lookupPackage(_exported_env(importer), pName)
	in  if foundPackage->isEmpty()
		then null
		else foundPackage->first()
		endif
		
def : lookupExportedPackage(importer : ocl::OclElement, aPathElementCS : cs::PathElementCS) : Package[?] =
	_lookupExportedPackage(importer, aPathElementCS.name)
	
-- FIXME manually added
context Namespace
	
def : _lookupQualifiedNamespace(nName : String) : Namespace[?] =
	let foundClass = _lookupClass(_qualified_env(), nName)
	in  if foundClass->isEmpty()
		then null
		else foundClass->first()
		endif
def : lookupQualifiedNamespace(aPathElementCS : cs::PathElementCS) : Namespace[?] =
   _lookupQualifiedNamespace(aPathElementCS.name)


def : _qualified_env() : lookup::LookupEnvironment =
	let env = lookup::LookupEnvironment{}
	in env  -- TO be overriden
-- ENDOF manual addition   
  
context Operation
	
def : _appliesFilter_Operation(argTypes : OrderedSet(Type)) : Boolean =
	matchesArgs(argTypes)
def : _env_Variable(child : ocl::OclElement) : lookup::LookupEnvironment =
	if not (ownedParameters->includes(child)
	   )
	then parentEnv_Variable().nestedEnv()
		.addElements(ownedParameters)
		
	else parentEnv_Variable()
	endif
	
context Package
	
def : _lookupQualifiedClass(cName : String) : Class[?] =
	let foundClass = _lookupClass(_qualified_env(), cName)
	in  if foundClass->isEmpty()
		then null
		else foundClass->first()
		endif
def : lookupQualifiedClass(aPathElementCS : cs::PathElementCS) : Class[?] =
   _lookupQualifiedClass(aPathElementCS.name)
   
	
def : _lookupQualifiedPackage(pName : String) : Package[?] =
	let foundPackage = _lookupPackage(_qualified_env(), pName)
	in  if foundPackage->isEmpty()
		then null
		else foundPackage->first()
		endif
def : lookupQualifiedPackage(aPathElementCS : cs::PathElementCS) : Package[?] =
   _lookupQualifiedPackage(aPathElementCS.name)
   
	
def : _qualified_env() : lookup::LookupEnvironment =
	let env = lookup::LookupEnvironment{}
	in env
		.addElements(ownedClasses)
.addElements(ownedPackages)
def : _env_Class(child : ocl::OclElement) : lookup::LookupEnvironment =
	parentEnv_Class().nestedEnv()
		.addElements(ownedClasses)
		
def : _exported_env(importer : ocl::OclElement) : lookup::LookupEnvironment =
	let env = lookup::LookupEnvironment {}
	in env
		.addElements(ownedClasses)
	
def : _lookupExportedClass(importer : ocl::OclElement, cName : String) : Class[?] =
	let foundClass = _lookupClass(_exported_env(importer), cName)
	in  if foundClass->isEmpty()
		then null
		else foundClass->first()
		endif
		
def : lookupExportedClass(importer : ocl::OclElement, aPathElementCS : cs::PathElementCS) : Class[?] =
	_lookupExportedClass(importer, aPathElementCS.name)

context Visitable
-- Variable lookup
def : _lookupVariable(env : lookup::LookupEnvironment, vName : String) : OrderedSet(Variable) =
let foundVariable = env.namedElements->selectByKind(Variable)->select(name = vName)
in  if foundVariable->isEmpty() and not (env.parentEnv = null)
	then _lookupVariable(env.parentEnv, vName)
	else foundVariable
	endif
	
-- Note: when calling this method, the source element of the argument passed to this method, will be the contextual 
-- object on which error reports will be handled
def : _lookupVariable(vName : String) : Variable[?] =
let foundVariable = _lookupVariable(env_Variable(), vName)
in  if foundVariable->isEmpty()
	then null
	else foundVariable->first() -- LookupVisitor will report ambiguous result
	endif
def : lookupVariable(aPathElementCS : cs::PathElementCS) : Variable[?] =
   _lookupVariable(aPathElementCS.name)
   

-- FIXME manually added
def : lookupVariable(vName : String) : Variable[?] =
   _lookupVariable(vName)

-- Namespace lookup
def : _lookupNamespace(env : lookup::LookupEnvironment, nName : String) : OrderedSet(Namespace) =
let foundNamespace = env.namedElements->selectByKind(Namespace)->select(name = nName)
in  if foundNamespace->isEmpty() and not (env.parentEnv = null)
	then _lookupNamespace(env.parentEnv, nName)
	else foundNamespace
	endif
	
-- Note: when calling this method, the source element of the argument passed to this method, will be the contextual 
-- object on which error reports will be handled
def : _lookupNamespace(nName : String) : Namespace[?] =
let foundNamespace = _lookupNamespace(env_Namespace(), nName)
in  if foundNamespace->isEmpty()
	then null
	else foundNamespace->first() -- LookupVisitor will report ambiguous result
	endif
def : lookupNamespace(aPathElementCS : cs::PathElementCS) : Namespace[?] =
   _lookupNamespace(aPathElementCS.name)
   
-- FIXME manually added
-- QN Namespace lookup
def : lookupNamespace(aPathNameCS : cs::PathNameCS) : Namespace[?] =
   lookupNamespace(aPathNameCS .ownedPathElements)

def : lookupNamespace(segments : OrderedSet(cs::PathElementCS)) : Namespace[?] =
   if segments->size() = 1
   then lookupNamespace(segments->first())
   else let qualifierSegments = segments->subOrderedSet(1,segments->size()-1),
            qualifier = lookupNamespace(qualifierSegments)
        in qualifier?.lookupQualifiedNamespace(segments->last())
   endif
-- ENDOF manual additio

-- Behavior lookup
def : _lookupBehavior(env : lookup::LookupEnvironment, bName : String) : OrderedSet(Behavior) =
let foundBehavior = env.namedElements->selectByKind(Behavior)->select(name = bName)
in  if foundBehavior->isEmpty() and not (env.parentEnv = null)
	then _lookupBehavior(env.parentEnv, bName)
	else foundBehavior
	endif
	
-- Note: when calling this method, the source element of the argument passed to this method, will be the contextual 
-- object on which error reports will be handled
def : _lookupBehavior(bName : String) : Behavior[?] =
let foundBehavior = _lookupBehavior(env_Behavior(), bName)
in  if foundBehavior->isEmpty()
	then null
	else foundBehavior->first() -- LookupVisitor will report ambiguous result
	endif
def : lookupBehavior(aPathElementCS : cs::PathElementCS) : Behavior[?] =
   _lookupBehavior(aPathElementCS.name)
   


-- Class lookup
def : _lookupClass(env : lookup::LookupEnvironment, cName : String) : OrderedSet(Class) =
let foundClass = env.namedElements->selectByKind(Class)->select(name = cName)
in  if foundClass->isEmpty() and not (env.parentEnv = null)
	then _lookupClass(env.parentEnv, cName)
	else foundClass
	endif
	
-- Note: when calling this method, the source element of the argument passed to this method, will be the contextual 
-- object on which error reports will be handled
def : _lookupClass(cName : String) : Class[?] =
let foundClass = _lookupClass(env_Class(), cName)
in  if foundClass->isEmpty()
	then null
	else foundClass->first() -- LookupVisitor will report ambiguous result
	endif
def : lookupClass(aPathElementCS : cs::PathElementCS) : Class[?] =
   _lookupClass(aPathElementCS.name)
   
-- FIXME manually added
def : lookupClass(cName : String) : Class[?] =
   _lookupClass(cName)
   

-- QN Class lookup
def : lookupClass(aPathNameCS : cs::PathNameCS) : Class[?] =
   lookupClass(aPathNameCS .ownedPathElements)

def : lookupClass(segments : OrderedSet(cs::PathElementCS)) : Class[?] =
   if segments->size() = 1
   then lookupClass(segments->first())
   else let qualifierSegments = segments->subOrderedSet(1,segments->size()-1),
            qualifier = lookupPackage(qualifierSegments)
        in qualifier?.lookupQualifiedClass(segments->last())
   endif

-- EnumerationLiteral lookup
def : _lookupEnumerationLiteral(env : lookup::LookupEnvironment, eName : String) : OrderedSet(EnumerationLiteral) =
let foundEnumerationLiteral = env.namedElements->selectByKind(EnumerationLiteral)->select(name = eName)
in  if foundEnumerationLiteral->isEmpty() and not (env.parentEnv = null)
	then _lookupEnumerationLiteral(env.parentEnv, eName)
	else foundEnumerationLiteral
	endif
	
-- Note: when calling this method, the source element of the argument passed to this method, will be the contextual 
-- object on which error reports will be handled
def : _lookupEnumerationLiteral(eName : String) : EnumerationLiteral[?] =
let foundEnumerationLiteral = _lookupEnumerationLiteral(env_EnumerationLiteral(), eName)
in  if foundEnumerationLiteral->isEmpty()
	then null
	else foundEnumerationLiteral->first() -- LookupVisitor will report ambiguous result
	endif
def : lookupEnumerationLiteral(aPathElementCS : cs::PathElementCS) : EnumerationLiteral[?] =
   _lookupEnumerationLiteral(aPathElementCS.name)
   


-- Model exports Package
	
def : lookupPackageFrom(exporter : Model, aPathElementCS : cs::PathElementCS) : Package[?] =
	exporter.lookupExportedPackage(self, aPathElementCS)

def : lookupPackageFrom(exporter : Model, aPathNameCS : cs::PathNameCS) : Package[?] =
   lookupPackageFrom(exporter, aPathNameCS.ownedPathElements)

def : lookupPackageFrom(exporter : Model, segments : OrderedSet(cs::PathElementCS)) : Package[?] =
   if segments->size() = 1
   then lookupPackageFrom(exporter, segments->first())
   else let qualifierSegments = segments->subOrderedSet(1,segments->size()-1),
            qualifier = lookupPackage(qualifierSegments)
        in qualifier?.lookupQualifiedPackage(segments->last())
   endif
-- Operation lookup
def : _lookupOperation(env : lookup::LookupEnvironment, oName : String, argTypes : OrderedSet(Type)) : OrderedSet(Operation) =
let foundOperation = env.namedElements->selectByKind(Operation)->select(name = oName)
                                         ->select(_appliesFilter_Operation(argTypes))
in  if foundOperation->isEmpty() and not (env.parentEnv = null)
	then _lookupOperation(env.parentEnv, oName, argTypes)
	else foundOperation
	endif
	
-- Note: when calling this method, the source element of the argument passed to this method, will be the contextual 
-- object on which error reports will be handled
def : _lookupOperation(oName : String, argTypes : OrderedSet(Type)) : Operation[?] =
let foundOperation = _lookupOperation(env_Operation(), oName, argTypes)
in  if foundOperation->isEmpty()
	then null
	else foundOperation->first() -- LookupVisitor will report ambiguous result
	endif
def : lookupOperation(aPathElementCS : cs::PathElementCS, argTypes : OrderedSet(Type)) : Operation[?] =
   _lookupOperation(aPathElementCS.name, argTypes)
   

-- QN Operation lookup
def : lookupOperation(aPathNameCS : cs::PathNameCS, argTypes : OrderedSet(Type)) : Operation[?] =
   lookupOperation(aPathNameCS .ownedPathElements, argTypes)

def : lookupOperation(segments : OrderedSet(cs::PathElementCS), argTypes : OrderedSet(Type)) : Operation[?] =
   if segments->size() = 1
   then lookupOperation(segments->first(), argTypes)
   else let qualifierSegments = segments->subOrderedSet(1,segments->size()-1),
            qualifier = lookupClass(qualifierSegments)
        in qualifier?.lookupQualifiedOperation(segments->last(), argTypes)
   endif

-- Package lookup
def : _lookupPackage(env : lookup::LookupEnvironment, pName : String) : OrderedSet(Package) =
let foundPackage = env.namedElements->selectByKind(Package)->select(name = pName)
in  if foundPackage->isEmpty() and not (env.parentEnv = null)
	then _lookupPackage(env.parentEnv, pName)
	else foundPackage
	endif
	
-- Note: when calling this method, the source element of the argument passed to this method, will be the contextual 
-- object on which error reports will be handled
def : _lookupPackage(pName : String) : Package[?] =
let foundPackage = _lookupPackage(env_Package(), pName)
in  if foundPackage->isEmpty()
	then null
	else foundPackage->first() -- LookupVisitor will report ambiguous result
	endif
def : lookupPackage(aPathElementCS : cs::PathElementCS) : Package[?] =
   _lookupPackage(aPathElementCS.name)
   

-- QN Package lookup
def : lookupPackage(aPathNameCS : cs::PathNameCS) : Package[?] =
   lookupPackage(aPathNameCS .ownedPathElements)

def : lookupPackage(segments : OrderedSet(cs::PathElementCS)) : Package[?] =
   if segments->size() = 1
   then lookupPackage(segments->first())
   else let qualifierSegments = segments->subOrderedSet(1,segments->size()-1),
            qualifier = lookupPackage(qualifierSegments)
        in qualifier?.lookupQualifiedPackage(segments->last())
   endif

-- Package exports Class
	
def : lookupClassFrom(exporter : Package, aPathElementCS : cs::PathElementCS) : Class[?] =
	exporter.lookupExportedClass(self, aPathElementCS)

def : lookupClassFrom(exporter : Package, aPathNameCS : cs::PathNameCS) : Class[?] =
   lookupClassFrom(exporter, aPathNameCS.ownedPathElements)

def : lookupClassFrom(exporter : Package, segments : OrderedSet(cs::PathElementCS)) : Class[?] =
   if segments->size() = 1
   then lookupClassFrom(exporter, segments->first())
   else let qualifierSegments = segments->subOrderedSet(1,segments->size()-1),
            qualifier = lookupPackage(qualifierSegments)
        in qualifier?.lookupQualifiedClass(segments->last())
   endif
-- Precedence lookup
def : _lookupPrecedence(env : lookup::LookupEnvironment, pName : String) : OrderedSet(Precedence) =
let foundPrecedence = env.namedElements->selectByKind(Precedence)->select(name = pName)
in  if foundPrecedence->isEmpty() and not (env.parentEnv = null)
	then _lookupPrecedence(env.parentEnv, pName)
	else foundPrecedence
	endif
	
-- Note: when calling this method, the source element of the argument passed to this method, will be the contextual 
-- object on which error reports will be handled
def : _lookupPrecedence(pName : String) : Precedence[?] =
let foundPrecedence = _lookupPrecedence(env_Precedence(), pName)
in  if foundPrecedence->isEmpty()
	then null
	else foundPrecedence->first() -- LookupVisitor will report ambiguous result
	endif
def : lookupPrecedence(aPathElementCS : cs::PathElementCS) : Precedence[?] =
   _lookupPrecedence(aPathElementCS.name)
   


-- Property lookup
def : _lookupProperty(env : lookup::LookupEnvironment, pName : String) : OrderedSet(Property) =
let foundProperty = env.namedElements->selectByKind(Property)->select(name = pName)
in  if foundProperty->isEmpty() and not (env.parentEnv = null)
	then _lookupProperty(env.parentEnv, pName)
	else foundProperty
	endif
	
-- Note: when calling this method, the source element of the argument passed to this method, will be the contextual 
-- object on which error reports will be handled
def : _lookupProperty(pName : String) : Property[?] =
let foundProperty = _lookupProperty(env_Property(), pName)
in  if foundProperty->isEmpty()
	then null
	else foundProperty->first() -- LookupVisitor will report ambiguous result
	endif
def : lookupProperty(aPathElementCS : cs::PathElementCS) : Property[?] =
   _lookupProperty(aPathElementCS.name)
   

-- QN Property lookup
def : lookupProperty(aPathNameCS : cs::PathNameCS) : Property[?] =
   lookupProperty(aPathNameCS .ownedPathElements)

def : lookupProperty(segments : OrderedSet(cs::PathElementCS)) : Property[?] =
   if segments->size() = 1
   then lookupProperty(segments->first())
   else let qualifierSegments = segments->subOrderedSet(1,segments->size()-1),
            qualifier = lookupClass(qualifierSegments)
        in qualifier?.lookupQualifiedProperty(segments->last())
   endif



endpackage
