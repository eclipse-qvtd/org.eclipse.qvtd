/**
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package org.eclipse.qvtd.doc.minioclcs.xtext.tests;

import com.google.inject.Inject;
import junit.framework.TestCase;
import org.eclipse.qvtd.doc.minioclcs.RootCS;
import org.eclipse.qvtd.doc.minioclcs.xtext.tests.MiniOCLCSInjectorProvider;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(MiniOCLCSInjectorProvider.class)
@SuppressWarnings("all")
public class MiniOCLCSParsingTest extends TestCase {
  @Inject
  private ParseHelper<RootCS> parseHelper;
  
  @Test
  public void testSimpleMiniOCL_PackagesDef() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package ocl {");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("class String {}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("package package1 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("class c1 {\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("prop a : ocl::String;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("op getA() : ocl::String = a;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      final RootCS result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testSimpleMiniOCL_Invariant() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package package1 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("class c1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("prop a : String;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("op giveMeA() : String = self.c1;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("op testA() : Boolean = giveMeA().size() <> 0; ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("context package1::c1 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("inv : a = giveMeA();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("inv : testA();");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final RootCS result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
