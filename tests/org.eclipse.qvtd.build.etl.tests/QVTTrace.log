---- Transformation UpperToLower ----
Mapping __root__
  Visiting Mapping GuardPattern
    GuardPattern has no predicates.
  Visiting Mapping BottomPattern
==============================
Output Model
==============================
Visiting MappingLoop, binding: g1
Visiting MappingCall, calling: graph2graph_LM
  Mapping graph2graph_LM
    Visiting Mapping GuardPattern
      GuardPattern has no predicates.
    CoreDomain middle
      Visiting CoreDomain GuardPattern
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment g2g.graph1 = Graph [74a17378] {
      element = [Node] x 11
      name = GraphOne
      }
    VisitPropertyAssignment g2g.name = graphone
    RealizedVariables for CoreDomain upperGraph
    RealizedVariables for CoreDomain middle
    RealizedVariable g2g: Graph2Graph [10875750] {
      graph1 = Graph [74a17378]
      graph2 = [ null ]
      element2Element = [ ]
      name = graphone
      }
==============================
Output Model
==============================
Visiting MappingCall, calling: graph2graph_MR
  Mapping graph2graph_MR
    Visiting Mapping GuardPattern
      GuardPattern has no predicates.
    CoreDomain lowerGraph
      Visiting CoreDomain GuardPattern
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment g2.name = graphone
    VisitPropertyAssignment g2g.graph2 = Graph [25754daa] {
      element = [ ]
      name = graphone
      }
    RealizedVariables for CoreDomain lowerGraph
    RealizedVariable g2: Graph [25754daa] {
      element = [ ]
      name = graphone
      }
    RealizedVariables for CoreDomain middle
==============================
Output Model
Graph [25754daa] {
  element = [ ]
  name = graphone
  }
==============================
Visiting MappingLoop, binding: node
Visiting MappingCall, calling: node2node_LM
  Mapping node2node_LM
    Visiting Mapping GuardPattern
      Predicate g2g.graph1 = g1 is true
      Predicate n1.graph = g1 is true
      GuardPattern result: true
    CoreDomain middle
      Visiting CoreDomain GuardPattern
        Variable g2g: Graph2Graph [10875750] {
          graph1 = Graph [74a17378]
          graph2 = Graph [25754daa]
          element2Element = [ ]
          name = graphone
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment n2n.node1 = Node [383de71c] {
      graph = Graph [74a17378]
      incoming = [Edge] x 1
      outgoing = [Edge] x 1
      label = York
      }
    VisitPropertyAssignment n2n.owner = Graph2Graph [10875750] {
      graph1 = Graph [74a17378]
      graph2 = Graph [25754daa]
      element2Element = [ ]
      name = graphone
      }
    VisitPropertyAssignment n2n.label = york
    RealizedVariables for CoreDomain upperGraph
    RealizedVariables for CoreDomain middle
    RealizedVariable n2n: Node2Node [555669ae] {
      owner = Graph2Graph [10875750]
      node1 = Node [383de71c]
      node2 = [ null ]
      label = york
      }
==============================
Output Model
==============================
Visiting MappingCall, calling: node2node_MR
  Mapping node2node_MR
    Visiting Mapping GuardPattern
      Predicate g2g.graph2 = g2 is true
      Predicate n2n.owner = g2g is true
      GuardPattern result: true
    CoreDomain lowerGraph
      Visiting CoreDomain GuardPattern
        Variable g2: Graph [25754daa] {
          element = [ ]
          name = graphone
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment n2n.node2 = Node [1c344a47] {
      graph = [ null ]
      incoming = [ ]
      outgoing = [ ]
      label = [ null ]
      }
    VisitPropertyAssignment n2.label = york
    VisitPropertyAssignment n2.graph = Graph [25754daa] {
      element = [ ]
      name = graphone
      }
    RealizedVariables for CoreDomain lowerGraph
    RealizedVariable n2: Node [1c344a47] {
      graph = Graph [25754daa]
      incoming = [ ]
      outgoing = [ ]
      label = york
      }
    RealizedVariables for CoreDomain middle
==============================
Output Model
Graph [25754daa] {
  element = [Node] x 1
  name = graphone
  }
Node [1c344a47] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = york
  }
==============================
Visiting MappingCall, calling: node2node_LM
  Mapping node2node_LM
    Visiting Mapping GuardPattern
      Predicate g2g.graph1 = g1 is true
      Predicate n1.graph = g1 is true
      GuardPattern result: true
    CoreDomain middle
      Visiting CoreDomain GuardPattern
        Variable g2g: Graph2Graph [10875750] {
          graph1 = Graph [74a17378]
          graph2 = Graph [25754daa]
          element2Element = [Node2Node] x 1
          name = graphone
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment n2n.node1 = Node [7170c7a3] {
      graph = Graph [74a17378]
      incoming = [Edge] x 2
      outgoing = [Edge] x 2
      label = Stansted
      }
    VisitPropertyAssignment n2n.owner = Graph2Graph [10875750] {
      graph1 = Graph [74a17378]
      graph2 = Graph [25754daa]
      element2Element = [Node2Node] x 1
      name = graphone
      }
    VisitPropertyAssignment n2n.label = stansted
    RealizedVariables for CoreDomain upperGraph
    RealizedVariables for CoreDomain middle
    RealizedVariable n2n: Node2Node [2cf889c8] {
      owner = Graph2Graph [10875750]
      node1 = Node [7170c7a3]
      node2 = [ null ]
      label = stansted
      }
==============================
Output Model
==============================
Visiting MappingCall, calling: node2node_MR
  Mapping node2node_MR
    Visiting Mapping GuardPattern
      Predicate g2g.graph2 = g2 is true
      Predicate n2n.owner = g2g is true
      GuardPattern result: true
    CoreDomain lowerGraph
      Visiting CoreDomain GuardPattern
        Variable g2: Graph [25754daa] {
          element = [Node] x 1
          name = graphone
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment n2n.node2 = Node [711dc088] {
      graph = [ null ]
      incoming = [ ]
      outgoing = [ ]
      label = [ null ]
      }
    VisitPropertyAssignment n2.label = stansted
    VisitPropertyAssignment n2.graph = Graph [25754daa] {
      element = [Node] x 1
      name = graphone
      }
    RealizedVariables for CoreDomain lowerGraph
    RealizedVariable n2: Node [711dc088] {
      graph = Graph [25754daa]
      incoming = [ ]
      outgoing = [ ]
      label = stansted
      }
    RealizedVariables for CoreDomain middle
==============================
Output Model
Graph [25754daa] {
  element = [Node] x 2
  name = graphone
  }
Node [1c344a47] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = york
  }
Node [711dc088] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = stansted
  }
==============================
Visiting MappingCall, calling: node2node_LM
  Mapping node2node_LM
    Visiting Mapping GuardPattern
      Predicate g2g.graph1 = g1 is true
      Predicate n1.graph = g1 is true
      GuardPattern result: true
    CoreDomain middle
      Visiting CoreDomain GuardPattern
        Variable g2g: Graph2Graph [10875750] {
          graph1 = Graph [74a17378]
          graph2 = Graph [25754daa]
          element2Element = [Node2Node] x 2
          name = graphone
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment n2n.node1 = Node [19f71b53] {
      graph = Graph [74a17378]
      incoming = [Edge] x 1
      outgoing = [Edge] x 1
      label = Munich
      }
    VisitPropertyAssignment n2n.owner = Graph2Graph [10875750] {
      graph1 = Graph [74a17378]
      graph2 = Graph [25754daa]
      element2Element = [Node2Node] x 2
      name = graphone
      }
    VisitPropertyAssignment n2n.label = munich
    RealizedVariables for CoreDomain upperGraph
    RealizedVariables for CoreDomain middle
    RealizedVariable n2n: Node2Node [584b5abc] {
      owner = Graph2Graph [10875750]
      node1 = Node [19f71b53]
      node2 = [ null ]
      label = munich
      }
==============================
Output Model
==============================
Visiting MappingCall, calling: node2node_MR
  Mapping node2node_MR
    Visiting Mapping GuardPattern
      Predicate g2g.graph2 = g2 is true
      Predicate n2n.owner = g2g is true
      GuardPattern result: true
    CoreDomain lowerGraph
      Visiting CoreDomain GuardPattern
        Variable g2: Graph [25754daa] {
          element = [Node] x 2
          name = graphone
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment n2n.node2 = Node [3b3219ed] {
      graph = [ null ]
      incoming = [ ]
      outgoing = [ ]
      label = [ null ]
      }
    VisitPropertyAssignment n2.label = munich
    VisitPropertyAssignment n2.graph = Graph [25754daa] {
      element = [Node] x 2
      name = graphone
      }
    RealizedVariables for CoreDomain lowerGraph
    RealizedVariable n2: Node [3b3219ed] {
      graph = Graph [25754daa]
      incoming = [ ]
      outgoing = [ ]
      label = munich
      }
    RealizedVariables for CoreDomain middle
==============================
Output Model
Graph [25754daa] {
  element = [Node] x 3
  name = graphone
  }
Node [1c344a47] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = york
  }
Node [711dc088] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = stansted
  }
Node [3b3219ed] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = munich
  }
==============================
Visiting MappingCall, calling: node2node_LM
  Mapping node2node_LM
    Visiting Mapping GuardPattern
      Predicate g2g.graph1 = g1 is true
      Predicate n1.graph = g1 is true
      GuardPattern result: true
    CoreDomain middle
      Visiting CoreDomain GuardPattern
        Variable g2g: Graph2Graph [10875750] {
          graph1 = Graph [74a17378]
          graph2 = Graph [25754daa]
          element2Element = [Node2Node] x 3
          name = graphone
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment n2n.node1 = Node [789ddfa3] {
      graph = Graph [74a17378]
      incoming = [Edge] x 1
      outgoing = [Edge] x 1
      label = Innsbruck
      }
    VisitPropertyAssignment n2n.owner = Graph2Graph [10875750] {
      graph1 = Graph [74a17378]
      graph2 = Graph [25754daa]
      element2Element = [Node2Node] x 3
      name = graphone
      }
    VisitPropertyAssignment n2n.label = innsbruck
    RealizedVariables for CoreDomain upperGraph
    RealizedVariables for CoreDomain middle
    RealizedVariable n2n: Node2Node [564434f7] {
      owner = Graph2Graph [10875750]
      node1 = Node [789ddfa3]
      node2 = [ null ]
      label = innsbruck
      }
==============================
Output Model
==============================
Visiting MappingCall, calling: node2node_MR
  Mapping node2node_MR
    Visiting Mapping GuardPattern
      Predicate g2g.graph2 = g2 is true
      Predicate n2n.owner = g2g is true
      GuardPattern result: true
    CoreDomain lowerGraph
      Visiting CoreDomain GuardPattern
        Variable g2: Graph [25754daa] {
          element = [Node] x 3
          name = graphone
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment n2n.node2 = Node [17f17060] {
      graph = [ null ]
      incoming = [ ]
      outgoing = [ ]
      label = [ null ]
      }
    VisitPropertyAssignment n2.label = innsbruck
    VisitPropertyAssignment n2.graph = Graph [25754daa] {
      element = [Node] x 3
      name = graphone
      }
    RealizedVariables for CoreDomain lowerGraph
    RealizedVariable n2: Node [17f17060] {
      graph = Graph [25754daa]
      incoming = [ ]
      outgoing = [ ]
      label = innsbruck
      }
    RealizedVariables for CoreDomain middle
==============================
Output Model
Graph [25754daa] {
  element = [Node] x 4
  name = graphone
  }
Node [1c344a47] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = york
  }
Node [711dc088] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = stansted
  }
Node [3b3219ed] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = munich
  }
Node [17f17060] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = innsbruck
  }
==============================
Visiting MappingCall, calling: node2node_LM
  Mapping node2node_LM
    Visiting Mapping GuardPattern
      Predicate g2g.graph1 = g1 is true
      Predicate n1.graph = g1 is true
      GuardPattern result: true
    CoreDomain middle
      Visiting CoreDomain GuardPattern
        Variable g2g: Graph2Graph [10875750] {
          graph1 = Graph [74a17378]
          graph2 = Graph [25754daa]
          element2Element = [Node2Node] x 4
          name = graphone
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment n2n.node1 = Node [36a11e4] {
      graph = Graph [74a17378]
      incoming = [Edge] x 1
      outgoing = [Edge] x 1
      label = Stuttgart
      }
    VisitPropertyAssignment n2n.owner = Graph2Graph [10875750] {
      graph1 = Graph [74a17378]
      graph2 = Graph [25754daa]
      element2Element = [Node2Node] x 4
      name = graphone
      }
    VisitPropertyAssignment n2n.label = stuttgart
    RealizedVariables for CoreDomain upperGraph
    RealizedVariables for CoreDomain middle
    RealizedVariable n2n: Node2Node [6c08bae7] {
      owner = Graph2Graph [10875750]
      node1 = Node [36a11e4]
      node2 = [ null ]
      label = stuttgart
      }
==============================
Output Model
==============================
Visiting MappingCall, calling: node2node_MR
  Mapping node2node_MR
    Visiting Mapping GuardPattern
      Predicate g2g.graph2 = g2 is true
      Predicate n2n.owner = g2g is true
      GuardPattern result: true
    CoreDomain lowerGraph
      Visiting CoreDomain GuardPattern
        Variable g2: Graph [25754daa] {
          element = [Node] x 4
          name = graphone
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment n2n.node2 = Node [3126cb1a] {
      graph = [ null ]
      incoming = [ ]
      outgoing = [ ]
      label = [ null ]
      }
    VisitPropertyAssignment n2.label = stuttgart
    VisitPropertyAssignment n2.graph = Graph [25754daa] {
      element = [Node] x 4
      name = graphone
      }
    RealizedVariables for CoreDomain lowerGraph
    RealizedVariable n2: Node [3126cb1a] {
      graph = Graph [25754daa]
      incoming = [ ]
      outgoing = [ ]
      label = stuttgart
      }
    RealizedVariables for CoreDomain middle
==============================
Output Model
Graph [25754daa] {
  element = [Node] x 5
  name = graphone
  }
Node [1c344a47] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = york
  }
Node [711dc088] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = stansted
  }
Node [3b3219ed] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = munich
  }
Node [17f17060] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = innsbruck
  }
Node [3126cb1a] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = stuttgart
  }
==============================
Visiting MappingLoop, binding: edge
Visiting MappingLoop, binding: tn2n
Visiting MappingLoop, binding: node2node
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is true
      Predicate e1.target = tn1 is true
      Predicate e1.graph = g1 is true
      GuardPattern result: true
    CoreDomain middle
      Visiting CoreDomain GuardPattern
        Variable g2g: Graph2Graph [10875750] {
          graph1 = Graph [74a17378]
          graph2 = Graph [25754daa]
          element2Element = [Node2Node] x 5
          name = graphone
          }
        Variable sn2n: Node2Node [555669ae] {
          owner = Graph2Graph [10875750]
          node1 = Node [383de71c]
          node2 = Node [1c344a47]
          label = york
          }
        Variable tn2n: Node2Node [2cf889c8] {
          owner = Graph2Graph [10875750]
          node1 = Node [7170c7a3]
          node2 = Node [711dc088]
          label = stansted
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment e2e.owner = Graph2Graph [10875750] {
      graph1 = Graph [74a17378]
      graph2 = Graph [25754daa]
      element2Element = [Node2Node] x 5
      name = graphone
      }
    VisitPropertyAssignment e2e.source = Node2Node [555669ae] {
      owner = Graph2Graph [10875750]
      node1 = Node [383de71c]
      node2 = Node [1c344a47]
      label = york
      }
    VisitPropertyAssignment e2e.edge1 = Edge [680ffc1c] {
      graph = Graph [74a17378]
      target = Node [7170c7a3]
      source = Node [383de71c]
      }
    VisitPropertyAssignment e2e.target = Node2Node [2cf889c8] {
      owner = Graph2Graph [10875750]
      node1 = Node [7170c7a3]
      node2 = Node [711dc088]
      label = stansted
      }
    RealizedVariables for CoreDomain upperGraph
    RealizedVariables for CoreDomain middle
    RealizedVariable e2e: Edge2Edge [130c6c6b] {
      owner = Graph2Graph [10875750]
      edge1 = Edge [680ffc1c]
      edge2 = [ null ]
      target = Node2Node [2cf889c8]
      source = Node2Node [555669ae]
      }
==============================
Output Model
==============================
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingLoop, binding: tn2n
Visiting MappingLoop, binding: node2node
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is true
      Predicate e1.target = tn1 is true
      Predicate e1.graph = g1 is true
      GuardPattern result: true
    CoreDomain middle
      Visiting CoreDomain GuardPattern
        Variable g2g: Graph2Graph [10875750] {
          graph1 = Graph [74a17378]
          graph2 = Graph [25754daa]
          element2Element = [Node2Node] x 6
          name = graphone
          }
        Variable sn2n: Node2Node [2cf889c8] {
          owner = Graph2Graph [10875750]
          node1 = Node [7170c7a3]
          node2 = Node [711dc088]
          label = stansted
          }
        Variable tn2n: Node2Node [555669ae] {
          owner = Graph2Graph [10875750]
          node1 = Node [383de71c]
          node2 = Node [1c344a47]
          label = york
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment e2e.owner = Graph2Graph [10875750] {
      graph1 = Graph [74a17378]
      graph2 = Graph [25754daa]
      element2Element = [Node2Node] x 6
      name = graphone
      }
    VisitPropertyAssignment e2e.source = Node2Node [2cf889c8] {
      owner = Graph2Graph [10875750]
      node1 = Node [7170c7a3]
      node2 = Node [711dc088]
      label = stansted
      }
    VisitPropertyAssignment e2e.edge1 = Edge [2342d884] {
      graph = Graph [74a17378]
      target = Node [383de71c]
      source = Node [7170c7a3]
      }
    VisitPropertyAssignment e2e.target = Node2Node [555669ae] {
      owner = Graph2Graph [10875750]
      node1 = Node [383de71c]
      node2 = Node [1c344a47]
      label = york
      }
    RealizedVariables for CoreDomain upperGraph
    RealizedVariables for CoreDomain middle
    RealizedVariable e2e: Edge2Edge [14a1ee92] {
      owner = Graph2Graph [10875750]
      edge1 = Edge [2342d884]
      edge2 = [ null ]
      target = Node2Node [555669ae]
      source = Node2Node [2cf889c8]
      }
==============================
Output Model
==============================
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingLoop, binding: tn2n
Visiting MappingLoop, binding: node2node
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is true
      Predicate e1.target = tn1 is true
      Predicate e1.graph = g1 is true
      GuardPattern result: true
    CoreDomain middle
      Visiting CoreDomain GuardPattern
        Variable g2g: Graph2Graph [10875750] {
          graph1 = Graph [74a17378]
          graph2 = Graph [25754daa]
          element2Element = [Node2Node] x 7
          name = graphone
          }
        Variable sn2n: Node2Node [2cf889c8] {
          owner = Graph2Graph [10875750]
          node1 = Node [7170c7a3]
          node2 = Node [711dc088]
          label = stansted
          }
        Variable tn2n: Node2Node [584b5abc] {
          owner = Graph2Graph [10875750]
          node1 = Node [19f71b53]
          node2 = Node [3b3219ed]
          label = munich
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment e2e.owner = Graph2Graph [10875750] {
      graph1 = Graph [74a17378]
      graph2 = Graph [25754daa]
      element2Element = [Node2Node] x 7
      name = graphone
      }
    VisitPropertyAssignment e2e.source = Node2Node [2cf889c8] {
      owner = Graph2Graph [10875750]
      node1 = Node [7170c7a3]
      node2 = Node [711dc088]
      label = stansted
      }
    VisitPropertyAssignment e2e.edge1 = Edge [7994d431] {
      graph = Graph [74a17378]
      target = Node [19f71b53]
      source = Node [7170c7a3]
      }
    VisitPropertyAssignment e2e.target = Node2Node [584b5abc] {
      owner = Graph2Graph [10875750]
      node1 = Node [19f71b53]
      node2 = Node [3b3219ed]
      label = munich
      }
    RealizedVariables for CoreDomain upperGraph
    RealizedVariables for CoreDomain middle
    RealizedVariable e2e: Edge2Edge [1335bdd3] {
      owner = Graph2Graph [10875750]
      edge1 = Edge [7994d431]
      edge2 = [ null ]
      target = Node2Node [584b5abc]
      source = Node2Node [2cf889c8]
      }
==============================
Output Model
==============================
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingLoop, binding: tn2n
Visiting MappingLoop, binding: node2node
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is true
      Predicate e1.target = tn1 is true
      Predicate e1.graph = g1 is true
      GuardPattern result: true
    CoreDomain middle
      Visiting CoreDomain GuardPattern
        Variable g2g: Graph2Graph [10875750] {
          graph1 = Graph [74a17378]
          graph2 = Graph [25754daa]
          element2Element = [Node2Node] x 8
          name = graphone
          }
        Variable sn2n: Node2Node [584b5abc] {
          owner = Graph2Graph [10875750]
          node1 = Node [19f71b53]
          node2 = Node [3b3219ed]
          label = munich
          }
        Variable tn2n: Node2Node [564434f7] {
          owner = Graph2Graph [10875750]
          node1 = Node [789ddfa3]
          node2 = Node [17f17060]
          label = innsbruck
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment e2e.owner = Graph2Graph [10875750] {
      graph1 = Graph [74a17378]
      graph2 = Graph [25754daa]
      element2Element = [Node2Node] x 8
      name = graphone
      }
    VisitPropertyAssignment e2e.source = Node2Node [584b5abc] {
      owner = Graph2Graph [10875750]
      node1 = Node [19f71b53]
      node2 = Node [3b3219ed]
      label = munich
      }
    VisitPropertyAssignment e2e.edge1 = Edge [2e22f376] {
      graph = Graph [74a17378]
      target = Node [789ddfa3]
      source = Node [19f71b53]
      }
    VisitPropertyAssignment e2e.target = Node2Node [564434f7] {
      owner = Graph2Graph [10875750]
      node1 = Node [789ddfa3]
      node2 = Node [17f17060]
      label = innsbruck
      }
    RealizedVariables for CoreDomain upperGraph
    RealizedVariables for CoreDomain middle
    RealizedVariable e2e: Edge2Edge [2d41717f] {
      owner = Graph2Graph [10875750]
      edge1 = Edge [2e22f376]
      edge2 = [ null ]
      target = Node2Node [564434f7]
      source = Node2Node [584b5abc]
      }
==============================
Output Model
==============================
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingLoop, binding: tn2n
Visiting MappingLoop, binding: node2node
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is true
      Predicate e1.target = tn1 is true
      Predicate e1.graph = g1 is true
      GuardPattern result: true
    CoreDomain middle
      Visiting CoreDomain GuardPattern
        Variable g2g: Graph2Graph [10875750] {
          graph1 = Graph [74a17378]
          graph2 = Graph [25754daa]
          element2Element = [Node2Node] x 9
          name = graphone
          }
        Variable sn2n: Node2Node [564434f7] {
          owner = Graph2Graph [10875750]
          node1 = Node [789ddfa3]
          node2 = Node [17f17060]
          label = innsbruck
          }
        Variable tn2n: Node2Node [6c08bae7] {
          owner = Graph2Graph [10875750]
          node1 = Node [36a11e4]
          node2 = Node [3126cb1a]
          label = stuttgart
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment e2e.owner = Graph2Graph [10875750] {
      graph1 = Graph [74a17378]
      graph2 = Graph [25754daa]
      element2Element = [Node2Node] x 9
      name = graphone
      }
    VisitPropertyAssignment e2e.source = Node2Node [564434f7] {
      owner = Graph2Graph [10875750]
      node1 = Node [789ddfa3]
      node2 = Node [17f17060]
      label = innsbruck
      }
    VisitPropertyAssignment e2e.edge1 = Edge [44c58432] {
      graph = Graph [74a17378]
      target = Node [36a11e4]
      source = Node [789ddfa3]
      }
    VisitPropertyAssignment e2e.target = Node2Node [6c08bae7] {
      owner = Graph2Graph [10875750]
      node1 = Node [36a11e4]
      node2 = Node [3126cb1a]
      label = stuttgart
      }
    RealizedVariables for CoreDomain upperGraph
    RealizedVariables for CoreDomain middle
    RealizedVariable e2e: Edge2Edge [2382600f] {
      owner = Graph2Graph [10875750]
      edge1 = Edge [44c58432]
      edge2 = [ null ]
      target = Node2Node [6c08bae7]
      source = Node2Node [564434f7]
      }
==============================
Output Model
==============================
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingLoop, binding: tn2n
Visiting MappingLoop, binding: node2node
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_LM
  Mapping edge2edge_LM
    Visiting Mapping GuardPattern
      Predicate tn2n.node1 = tn1 is true
      Predicate sn2n.node1 = sn1 is true
      Predicate g2g.graph1 = g1 is true
      Predicate sn2n.owner = g2g is true
      Predicate e1.source = sn1 is true
      Predicate e1.target = tn1 is true
      Predicate e1.graph = g1 is true
      GuardPattern result: true
    CoreDomain middle
      Visiting CoreDomain GuardPattern
        Variable g2g: Graph2Graph [10875750] {
          graph1 = Graph [74a17378]
          graph2 = Graph [25754daa]
          element2Element = [Node2Node] x 10
          name = graphone
          }
        Variable sn2n: Node2Node [6c08bae7] {
          owner = Graph2Graph [10875750]
          node1 = Node [36a11e4]
          node2 = Node [3126cb1a]
          label = stuttgart
          }
        Variable tn2n: Node2Node [2cf889c8] {
          owner = Graph2Graph [10875750]
          node1 = Node [7170c7a3]
          node2 = Node [711dc088]
          label = stansted
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment e2e.owner = Graph2Graph [10875750] {
      graph1 = Graph [74a17378]
      graph2 = Graph [25754daa]
      element2Element = [Node2Node] x 10
      name = graphone
      }
    VisitPropertyAssignment e2e.source = Node2Node [6c08bae7] {
      owner = Graph2Graph [10875750]
      node1 = Node [36a11e4]
      node2 = Node [3126cb1a]
      label = stuttgart
      }
    VisitPropertyAssignment e2e.edge1 = Edge [28bc917c] {
      graph = Graph [74a17378]
      target = Node [7170c7a3]
      source = Node [36a11e4]
      }
    VisitPropertyAssignment e2e.target = Node2Node [2cf889c8] {
      owner = Graph2Graph [10875750]
      node1 = Node [7170c7a3]
      node2 = Node [711dc088]
      label = stansted
      }
    RealizedVariables for CoreDomain upperGraph
    RealizedVariables for CoreDomain middle
    RealizedVariable e2e: Edge2Edge [2ca98e77] {
      owner = Graph2Graph [10875750]
      edge1 = Edge [28bc917c]
      edge2 = [ null ]
      target = Node2Node [2cf889c8]
      source = Node2Node [6c08bae7]
      }
==============================
Output Model
==============================
Visiting MappingLoop, binding: node2node
Visiting MappingLoop, binding: edge2edge
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is true
      Predicate e2e.target = tn2n is true
      GuardPattern result: true
    CoreDomain lowerGraph
      Visiting CoreDomain GuardPattern
        Variable g2: Graph [25754daa] {
          element = [Node] x 5
          name = graphone
          }
        Variable sn2: Node [1c344a47] {
          graph = Graph [25754daa]
          incoming = [ ]
          outgoing = [ ]
          label = york
          }
        Variable tn2: Node [711dc088] {
          graph = Graph [25754daa]
          incoming = [ ]
          outgoing = [ ]
          label = stansted
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment e2e.edge2 = Edge [2fc83d89] {
      graph = [ null ]
      target = [ null ]
      source = [ null ]
      }
    VisitPropertyAssignment e2.graph = Graph [25754daa] {
      element = [Node] x 5
      name = graphone
      }
    VisitPropertyAssignment e2.source = Node [1c344a47] {
      graph = Graph [25754daa]
      incoming = [ ]
      outgoing = [ ]
      label = york
      }
    VisitPropertyAssignment e2.target = Node [711dc088] {
      graph = Graph [25754daa]
      incoming = [ ]
      outgoing = [ ]
      label = stansted
      }
    RealizedVariables for CoreDomain lowerGraph
    RealizedVariable e2: Edge [2fc83d89] {
      graph = Graph [25754daa]
      target = Node [711dc088]
      source = Node [1c344a47]
      }
    RealizedVariables for CoreDomain middle
==============================
Output Model
Graph [25754daa] {
  element = [Node] x 6
  name = graphone
  }
Node [1c344a47] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [Edge] x 1
  label = york
  }
Node [711dc088] {
  graph = Graph [25754daa]
  incoming = [Edge] x 1
  outgoing = [ ]
  label = stansted
  }
Node [3b3219ed] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = munich
  }
Node [17f17060] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = innsbruck
  }
Node [3126cb1a] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = stuttgart
  }
Edge [2fc83d89] {
  graph = Graph [25754daa]
  target = Node [711dc088]
  source = Node [1c344a47]
  }
==============================
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingLoop, binding: edge2edge
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is true
      Predicate e2e.target = tn2n is true
      GuardPattern result: true
    CoreDomain lowerGraph
      Visiting CoreDomain GuardPattern
        Variable g2: Graph [25754daa] {
          element = [Node] x 6
          name = graphone
          }
        Variable sn2: Node [711dc088] {
          graph = Graph [25754daa]
          incoming = [Edge] x 1
          outgoing = [ ]
          label = stansted
          }
        Variable tn2: Node [1c344a47] {
          graph = Graph [25754daa]
          incoming = [ ]
          outgoing = [Edge] x 1
          label = york
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment e2e.edge2 = Edge [34005e1] {
      graph = [ null ]
      target = [ null ]
      source = [ null ]
      }
    VisitPropertyAssignment e2.graph = Graph [25754daa] {
      element = [Node] x 6
      name = graphone
      }
    VisitPropertyAssignment e2.source = Node [711dc088] {
      graph = Graph [25754daa]
      incoming = [Edge] x 1
      outgoing = [ ]
      label = stansted
      }
    VisitPropertyAssignment e2.target = Node [1c344a47] {
      graph = Graph [25754daa]
      incoming = [ ]
      outgoing = [Edge] x 1
      label = york
      }
    RealizedVariables for CoreDomain lowerGraph
    RealizedVariable e2: Edge [34005e1] {
      graph = Graph [25754daa]
      target = Node [1c344a47]
      source = Node [711dc088]
      }
    RealizedVariables for CoreDomain middle
==============================
Output Model
Graph [25754daa] {
  element = [Node] x 7
  name = graphone
  }
Node [1c344a47] {
  graph = Graph [25754daa]
  incoming = [Edge] x 1
  outgoing = [Edge] x 1
  label = york
  }
Node [711dc088] {
  graph = Graph [25754daa]
  incoming = [Edge] x 1
  outgoing = [Edge] x 1
  label = stansted
  }
Node [3b3219ed] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = munich
  }
Node [17f17060] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = innsbruck
  }
Node [3126cb1a] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = stuttgart
  }
Edge [2fc83d89] {
  graph = Graph [25754daa]
  target = Node [711dc088]
  source = Node [1c344a47]
  }
Edge [34005e1] {
  graph = Graph [25754daa]
  target = Node [1c344a47]
  source = Node [711dc088]
  }
==============================
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is true
      Predicate e2e.target = tn2n is true
      GuardPattern result: true
    CoreDomain lowerGraph
      Visiting CoreDomain GuardPattern
        Variable g2: Graph [25754daa] {
          element = [Node] x 7
          name = graphone
          }
        Variable sn2: Node [711dc088] {
          graph = Graph [25754daa]
          incoming = [Edge] x 1
          outgoing = [Edge] x 1
          label = stansted
          }
        Variable tn2: Node [3b3219ed] {
          graph = Graph [25754daa]
          incoming = [ ]
          outgoing = [ ]
          label = munich
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment e2e.edge2 = Edge [6041f871] {
      graph = [ null ]
      target = [ null ]
      source = [ null ]
      }
    VisitPropertyAssignment e2.graph = Graph [25754daa] {
      element = [Node] x 7
      name = graphone
      }
    VisitPropertyAssignment e2.source = Node [711dc088] {
      graph = Graph [25754daa]
      incoming = [Edge] x 1
      outgoing = [Edge] x 1
      label = stansted
      }
    VisitPropertyAssignment e2.target = Node [3b3219ed] {
      graph = Graph [25754daa]
      incoming = [ ]
      outgoing = [ ]
      label = munich
      }
    RealizedVariables for CoreDomain lowerGraph
    RealizedVariable e2: Edge [6041f871] {
      graph = Graph [25754daa]
      target = Node [3b3219ed]
      source = Node [711dc088]
      }
    RealizedVariables for CoreDomain middle
==============================
Output Model
Graph [25754daa] {
  element = [Node] x 8
  name = graphone
  }
Node [1c344a47] {
  graph = Graph [25754daa]
  incoming = [Edge] x 1
  outgoing = [Edge] x 1
  label = york
  }
Node [711dc088] {
  graph = Graph [25754daa]
  incoming = [Edge] x 1
  outgoing = [Edge] x 2
  label = stansted
  }
Node [3b3219ed] {
  graph = Graph [25754daa]
  incoming = [Edge] x 1
  outgoing = [ ]
  label = munich
  }
Node [17f17060] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = innsbruck
  }
Node [3126cb1a] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = stuttgart
  }
Edge [2fc83d89] {
  graph = Graph [25754daa]
  target = Node [711dc088]
  source = Node [1c344a47]
  }
Edge [34005e1] {
  graph = Graph [25754daa]
  target = Node [1c344a47]
  source = Node [711dc088]
  }
Edge [6041f871] {
  graph = Graph [25754daa]
  target = Node [3b3219ed]
  source = Node [711dc088]
  }
==============================
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingLoop, binding: edge2edge
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is true
      Predicate e2e.target = tn2n is true
      GuardPattern result: true
    CoreDomain lowerGraph
      Visiting CoreDomain GuardPattern
        Variable g2: Graph [25754daa] {
          element = [Node] x 8
          name = graphone
          }
        Variable sn2: Node [3b3219ed] {
          graph = Graph [25754daa]
          incoming = [Edge] x 1
          outgoing = [ ]
          label = munich
          }
        Variable tn2: Node [17f17060] {
          graph = Graph [25754daa]
          incoming = [ ]
          outgoing = [ ]
          label = innsbruck
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment e2e.edge2 = Edge [b1df416] {
      graph = [ null ]
      target = [ null ]
      source = [ null ]
      }
    VisitPropertyAssignment e2.graph = Graph [25754daa] {
      element = [Node] x 8
      name = graphone
      }
    VisitPropertyAssignment e2.source = Node [3b3219ed] {
      graph = Graph [25754daa]
      incoming = [Edge] x 1
      outgoing = [ ]
      label = munich
      }
    VisitPropertyAssignment e2.target = Node [17f17060] {
      graph = Graph [25754daa]
      incoming = [ ]
      outgoing = [ ]
      label = innsbruck
      }
    RealizedVariables for CoreDomain lowerGraph
    RealizedVariable e2: Edge [b1df416] {
      graph = Graph [25754daa]
      target = Node [17f17060]
      source = Node [3b3219ed]
      }
    RealizedVariables for CoreDomain middle
==============================
Output Model
Graph [25754daa] {
  element = [Node] x 9
  name = graphone
  }
Node [1c344a47] {
  graph = Graph [25754daa]
  incoming = [Edge] x 1
  outgoing = [Edge] x 1
  label = york
  }
Node [711dc088] {
  graph = Graph [25754daa]
  incoming = [Edge] x 1
  outgoing = [Edge] x 2
  label = stansted
  }
Node [3b3219ed] {
  graph = Graph [25754daa]
  incoming = [Edge] x 1
  outgoing = [Edge] x 1
  label = munich
  }
Node [17f17060] {
  graph = Graph [25754daa]
  incoming = [Edge] x 1
  outgoing = [ ]
  label = innsbruck
  }
Node [3126cb1a] {
  graph = Graph [25754daa]
  incoming = [ ]
  outgoing = [ ]
  label = stuttgart
  }
Edge [2fc83d89] {
  graph = Graph [25754daa]
  target = Node [711dc088]
  source = Node [1c344a47]
  }
Edge [34005e1] {
  graph = Graph [25754daa]
  target = Node [1c344a47]
  source = Node [711dc088]
  }
Edge [6041f871] {
  graph = Graph [25754daa]
  target = Node [3b3219ed]
  source = Node [711dc088]
  }
Edge [b1df416] {
  graph = Graph [25754daa]
  target = Node [17f17060]
  source = Node [3b3219ed]
  }
==============================
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingLoop, binding: edge2edge
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is true
      Predicate e2e.target = tn2n is true
      GuardPattern result: true
    CoreDomain lowerGraph
      Visiting CoreDomain GuardPattern
        Variable g2: Graph [25754daa] {
          element = [Node] x 9
          name = graphone
          }
        Variable sn2: Node [17f17060] {
          graph = Graph [25754daa]
          incoming = [Edge] x 1
          outgoing = [ ]
          label = innsbruck
          }
        Variable tn2: Node [3126cb1a] {
          graph = Graph [25754daa]
          incoming = [ ]
          outgoing = [ ]
          label = stuttgart
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment e2e.edge2 = Edge [5b83d60d] {
      graph = [ null ]
      target = [ null ]
      source = [ null ]
      }
    VisitPropertyAssignment e2.graph = Graph [25754daa] {
      element = [Node] x 9
      name = graphone
      }
    VisitPropertyAssignment e2.source = Node [17f17060] {
      graph = Graph [25754daa]
      incoming = [Edge] x 1
      outgoing = [ ]
      label = innsbruck
      }
    VisitPropertyAssignment e2.target = Node [3126cb1a] {
      graph = Graph [25754daa]
      incoming = [ ]
      outgoing = [ ]
      label = stuttgart
      }
    RealizedVariables for CoreDomain lowerGraph
    RealizedVariable e2: Edge [5b83d60d] {
      graph = Graph [25754daa]
      target = Node [3126cb1a]
      source = Node [17f17060]
      }
    RealizedVariables for CoreDomain middle
==============================
Output Model
Graph [25754daa] {
  element = [Node] x 10
  name = graphone
  }
Node [1c344a47] {
  graph = Graph [25754daa]
  incoming = [Edge] x 1
  outgoing = [Edge] x 1
  label = york
  }
Node [711dc088] {
  graph = Graph [25754daa]
  incoming = [Edge] x 1
  outgoing = [Edge] x 2
  label = stansted
  }
Node [3b3219ed] {
  graph = Graph [25754daa]
  incoming = [Edge] x 1
  outgoing = [Edge] x 1
  label = munich
  }
Node [17f17060] {
  graph = Graph [25754daa]
  incoming = [Edge] x 1
  outgoing = [Edge] x 1
  label = innsbruck
  }
Node [3126cb1a] {
  graph = Graph [25754daa]
  incoming = [Edge] x 1
  outgoing = [ ]
  label = stuttgart
  }
Edge [2fc83d89] {
  graph = Graph [25754daa]
  target = Node [711dc088]
  source = Node [1c344a47]
  }
Edge [34005e1] {
  graph = Graph [25754daa]
  target = Node [1c344a47]
  source = Node [711dc088]
  }
Edge [6041f871] {
  graph = Graph [25754daa]
  target = Node [3b3219ed]
  source = Node [711dc088]
  }
Edge [b1df416] {
  graph = Graph [25754daa]
  target = Node [17f17060]
  source = Node [3b3219ed]
  }
Edge [5b83d60d] {
  graph = Graph [25754daa]
  target = Node [3126cb1a]
  source = Node [17f17060]
  }
==============================
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingLoop, binding: edge2edge
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is false
      GuardPattern result: false
Visiting MappingCall, calling: edge2edge_MR
  Mapping edge2edge_MR
    Visiting Mapping GuardPattern
      Predicate sn2n.node2 = sn2 is true
      Predicate tn2n.node2 = tn2 is true
      Predicate sn2n.owner = g2g is true
      Predicate g2g.graph2 = g2 is true
      Predicate e2e.owner = g2g is true
      Predicate e2e.source = sn2n is true
      Predicate e2e.target = tn2n is true
      GuardPattern result: true
    CoreDomain lowerGraph
      Visiting CoreDomain GuardPattern
        Variable g2: Graph [25754daa] {
          element = [Node] x 10
          name = graphone
          }
        Variable sn2: Node [3126cb1a] {
          graph = Graph [25754daa]
          incoming = [Edge] x 1
          outgoing = [ ]
          label = stuttgart
          }
        Variable tn2: Node [711dc088] {
          graph = Graph [25754daa]
          incoming = [Edge] x 1
          outgoing = [Edge] x 2
          label = stansted
          }
        GuardPattern has no predicates.
      Visiting CoreDomain BottomPattern
    Visiting Mapping BottomPattern
    VisitPropertyAssignment e2e.edge2 = Edge [2c5a1e6b] {
      graph = [ null ]
      target = [ null ]
      source = [ null ]
      }
    VisitPropertyAssignment e2.graph = Graph [25754daa] {
      element = [Node] x 10
      name = graphone
      }
    VisitPropertyAssignment e2.source = Node [3126cb1a] {
      graph = Graph [25754daa]
      incoming = [Edge] x 1
      outgoing = [ ]
      label = stuttgart
      }
    VisitPropertyAssignment e2.target = Node [711dc088] {
      graph = Graph [25754daa]
      incoming = [Edge] x 1
      outgoing = [Edge] x 2
      label = stansted
      }
    RealizedVariables for CoreDomain lowerGraph
    RealizedVariable e2: Edge [2c5a1e6b] {
      graph = Graph [25754daa]
      target = Node [711dc088]
      source = Node [3126cb1a]
      }
    RealizedVariables for CoreDomain middle
==============================
Output Model
Graph [25754daa] {
  element = [Node] x 11
  name = graphone
  }
Node [1c344a47] {
  graph = Graph [25754daa]
  incoming = [Edge] x 1
  outgoing = [Edge] x 1
  label = york
  }
Node [711dc088] {
  graph = Graph [25754daa]
  incoming = [Edge] x 2
  outgoing = [Edge] x 2
  label = stansted
  }
Node [3b3219ed] {
  graph = Graph [25754daa]
  incoming = [Edge] x 1
  outgoing = [Edge] x 1
  label = munich
  }
Node [17f17060] {
  graph = Graph [25754daa]
  incoming = [Edge] x 1
  outgoing = [Edge] x 1
  label = innsbruck
  }
Node [3126cb1a] {
  graph = Graph [25754daa]
  incoming = [Edge] x 1
  outgoing = [Edge] x 1
  label = stuttgart
  }
Edge [2fc83d89] {
  graph = Graph [25754daa]
  target = Node [711dc088]
  source = Node [1c344a47]
  }
Edge [34005e1] {
  graph = Graph [25754daa]
  target = Node [1c344a47]
  source = Node [711dc088]
  }
Edge [6041f871] {
  graph = Graph [25754daa]
  target = Node [3b3219ed]
  source = Node [711dc088]
  }
Edge [b1df416] {
  graph = Graph [25754daa]
  target = Node [17f17060]
  source = Node [3b3219ed]
  }
Edge [5b83d60d] {
  graph = Graph [25754daa]
  target = Node [3126cb1a]
  source = Node [17f17060]
  }
Edge [2c5a1e6b] {
  graph = Graph [25754daa]
  target = Node [711dc088]
  source = Node [3126cb1a]
  }
==============================
---- Transformation End ----
