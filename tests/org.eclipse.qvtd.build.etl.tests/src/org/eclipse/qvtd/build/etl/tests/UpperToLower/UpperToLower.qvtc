import SimpleGraph : 'SimpleGraph.ecore'::simplegraph;
import SimpleGraph2Graph : 'SimpleGraph2Graph.ecore'::simplegraph2graph;

transformation UpperToLower {
	upperGraph imports SimpleGraph;
	lowerGraph imports SimpleGraph;
	imports SimpleGraph2Graph;
}

/* 
 * Don't use realize keywords on the two initial domains indicates that both models must exist and at least have the root node defined?
 */
map graph2graph in UpperToLower {
	check enforce upperGraph() {
		realize g1:Graph |
	}
	enforce lowerGraph() {
		/* Enforced domains should at least have one realized variable?*/
		realize g2:Graph |
	}
	where () {
		/* Although in the example is not realized, all middle model variables should be realized
		 * or does the middle model is also expected to have at least the initial element? */
		realize g2g:Graph2Graph |
		g2g.graph1 := g1;
		g2g.graph2 := g2;
	}
	map {
		where () {
			g2g.name := g1.name.toLowerCase();
			g2g.name := g2.name.toUpperCase();
			g1.name := g2g.name;
			g2.name := g2g.name;
		}
	}
}

map node2node in UpperToLower {
	check enforce upperGraph(g1:Graph |) {
		realize n1:Node |
		n1.graph := g1;
	}
	enforce lowerGraph(g2:Graph |) {
		realize n2:Node |
		n2.graph := g2;
	}
	where (g2g:Graph2Graph |
			g2g.graph1 = g1;
			g2g.graph2 = g2;) {
		realize n2n:Node2Node |
		n2n.owner := g2g;
		n2n.node1 := n1;
		n2n.node2 := n2;
	}
	map {
		where () {
			n2n.label := n1.label.toLowerCase();
			n2n.label := n2.label.toUpperCase();
			n1.label := n2n.label;
			n2.label := n2n.label;
		}
	}
}

map edge2edge in UpperToLower {
    enforce upperGraph(g1:Graph, sn1:Node, tn1:Node |) {
        realize e1:Edge |
        e1.graph := g1;
        e1.source := sn1;
        e1.target := tn1;
    }
    enforce lowerGraph(g2:Graph, sn2:Node, tn2:Node |) {
        realize e2:Edge |
        e2.graph := g2;
        e2.source := sn2;
        e2.target := tn2;
    }
    where (g2g:Graph2Graph, sn2n:Node2Node, tn2n:Node2Node |
            g2g.graph1 = g1;
            g2g.graph2 = g2;
            sn2n.owner = g2g;
            sn2n.node1 = sn1;
            sn2n.node2 = sn2;
            tn2n.node1 = tn1;
            tn2n.node2 = tn2;
            ) {
        realize e2e:Edge2Edge |
        e2e.owner := g2g;
        e2e.edge1 := e1;
        e2e.edge2 := e2;
        e2e.source := sn2n;
        e2e.target := tn2n;
        
    }
}