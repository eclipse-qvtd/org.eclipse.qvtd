import Simpleuml: 'http://www.eclipse.org/qvt/examples/0.1/simpleUML';
import Simplerdbms: 'http://www.eclipse.org/qvt/examples/0.1/SimpleRDBMS';
import Umltordbms: 'http://www.eclipse.org/qvt/examples/0.1/UMLtoRDBMS';

transformation umlRdbms {
    uml imports Simpleuml; 
    rdbms imports Simplerdbms; 
    middle imports Umltordbms; 
}

map packageToSchema_LM in umlRdbms {        
    check uml (p:Package    ) {
    }        
    enforce middle (    ) {
        realize p2s:PackageToSchema    }    
    where (    ) {
        
        p2s.name := p.name;        
        p2s.umlPackage := p;    }
}

map packageToSchema_MR in umlRdbms {        
    enforce rdbms (    ) {
        realize s:Schema    }        
    check middle (p2s:PackageToSchema    ) {
    }    
    where (    ) {
        
        p2s.schema := s;        
        s.name := p2s.name;    }
}

map integerToNumber_LM in umlRdbms {        
    check uml (p:Package,
        prim:PrimitiveDataType    ) {
    }        
    enforce middle (p2s:PackageToSchema    ) {
        realize p2n:IntegerToNumber    }    
    where (p2s.umlPackage.=(p);
        prim.namespace.=(p);
        prim.name.=('Integer');
    ) {
        
        p2n.owner := p2s;        
        p2n.name := prim.name.+('2').+('NUMBER');        
        p2n.primitive := prim;    }
}

map integerToNumber_MR in umlRdbms {        
    enforce rdbms (    ) {
        realize sqlType:String    }        
    check middle (p2s:PackageToSchema,
        p2n:IntegerToNumber    ) {
    }    
    where (p2n.owner.=(p2s);
    ) {
        
        p2n.typeName := sqlType;        
        sqlType := 'NUMBER';    }
}

map booleanToBoolean_LM in umlRdbms {        
    check uml (p:Package,
        prim:PrimitiveDataType    ) {
    }        
    enforce middle (p2s:PackageToSchema    ) {
        realize p2n:BooleanToBoolean    }    
    where (p2s.umlPackage.=(p);
        prim.namespace.=(p);
        prim.name.=('Boolean');
    ) {
        
        p2n.owner := p2s;        
        p2n.primitive := prim;        
        p2n.name := prim.name.+('2').+('BOOLEAN');    }
}

map booleanToBoolean_MR in umlRdbms {        
    enforce rdbms (    ) {
        realize sqlType:String    }        
    check middle (p2s:PackageToSchema,
        p2n:BooleanToBoolean    ) {
    }    
    where (p2n.owner.=(p2s);
    ) {
        
        p2n.typeName := sqlType;        
        sqlType := 'BOOLEAN';    }
}

map stringToVarchar_MR in umlRdbms {        
    enforce rdbms (    ) {
        realize sqlType:String    }        
    check middle (p2s:PackageToSchema,
        p2n:StringToVarchar    ) {
    }    
    where (p2n.owner.=(p2s);
    ) {
        
        p2n.typeName := sqlType;        
        sqlType := 'VARCHAR';    }
}

map stringToVarchar_LM in umlRdbms {        
    check uml (p:Package,
        prim:PrimitiveDataType    ) {
    }        
    enforce middle (p2s:PackageToSchema    ) {
        realize p2n:StringToVarchar    }    
    where (p2s.umlPackage.=(p);
        prim.namespace.=(p);
        prim.name.=('String');
    ) {
        
        p2n.primitive := prim;        
        p2n.name := prim.name.+('2').+('VARCHAR');        
        p2n.owner := p2s;    }
}

map classToTable_LM in umlRdbms {        
    check uml (p:Package,
        c:Class    ) {
    }        
    enforce middle (p2s:PackageToSchema    ) {
        realize c2t:ClassToTable    }    
    where (p2s.umlPackage.=(p);
        c.kind.=('persistent');
        c.namespace.=(p);
    ) {
        
        c2t.umlClass := c;        
        c2t.owner := p2s;        
        c2t.name := c.name;    }
}

map classToTable_MR in umlRdbms {        
    enforce rdbms (s:Schema    ) {
        realize t:Table,
        realize pk:Key,
        realize pc:Column    }        
    check middle (p2s:PackageToSchema,
        c2t:ClassToTable    ) {
    }    
    where (p2s.schema.=(s);
        c2t.owner.=(p2s);
    ) {
        
        c2t.column := pc;        
        t.name := c2t.name;        
        c2t.primaryKey := pk;        
        c2t.table := t;        
        t.kind := 'base';        
        t.schema := s;        
        pk.owner := t;        
        pk.kind := 'primary';        
        pc.owner := t;        
        pc.keys := Set{pk};        
        pc.type := 'NUMBER';        
        pc.name := t.name.+('_tid');        
        pk.name := t.name.+('_pk');    }
}

map associationToForeignKey_LM in umlRdbms {        
    check uml (p:Package,
        sc:Class,
        dc:Class,
        a:Association    ) {
    }        
    enforce middle (p2s:PackageToSchema,
        sc2t:ClassToTable,
        dc2t:ClassToTable    ) {
        realize a2f:AssociationToForeignKey    }    
    where (sc2t.umlClass.=(sc);
        dc2t.umlClass.=(dc);
        sc2t.owner.=(p2s);
        p2s.umlPackage.=(p);
        a.namespace.=(p);
        a.destination.=(dc);
        a.source.=(sc);
        sc.namespace.=(p);
    ) {
        
        a2f.association := a;        
        a.name := if a.destination.=(dc).and(a.source.=(sc)) then a2f.name else a.name endif;        
        a2f.referenced := dc2t;        
        a2f.owner := sc2t;        
        a2f.name := if a.destination.=(dc).and(a.source.=(sc)) then a.name else if a.destination.<>(dc).and(a.source.=(sc)) then dc.name.+('_').+(a.name) else if a.destination.=(dc).and(a.source.<>(sc)) then a.name.+('_').+(sc.name) else dc.name.+('_').+(a.name).+('_').+(sc.name) endif endif endif;    }
}

map associationToForeignKey_MR in umlRdbms {        
    enforce rdbms (s:Schema,
        st:Table,
        dt:Table,
        rk:Key    ) {
        realize fk:ForeignKey,
        realize fc:Column    }        
    check middle (p2s:PackageToSchema,
        sc2t:ClassToTable,
        dc2t:ClassToTable,
        a2f:AssociationToForeignKey    ) {
    }    
    where (p2s.schema.=(s);
        sc2t.owner.=(p2s);
        sc2t.table.=(st);
        dc2t.table.=(dt);
        a2f.referenced.=(dc2t);
        a2f.owner.=(sc2t);
        rk.kind.=('primary');
        st.schema.=(s);
        rk.owner.=(dt);
    ) {
        
        fk.name := a2f.name;        
        a2f.column := fc;        
        fc.type := rk.column->first().type;        
        fc.name := a2f.name.+('_tid');        
        a2f.foreignKey := fk;        
        fk.owner := st;        
        fc.owner := st;        
        fk.refersTo := rk;        
        fc.foreignKeys := Set{fk};    }
}

map classPrimitiveAttributes_LM in umlRdbms {        
    check uml (t:PrimitiveDataType,
        c:Class,
        a:Attribute    ) {
    }        
    enforce middle (fao:ClassToTable,
        p2n:PrimitiveToName    ) {
        realize fa:AttributeToColumn    }    
    where (p2n.primitive.=(t);
        fao.umlClass.=(c);
        a.owner.=(c);
        a.type.=(t);
    ) {
        
        fa.kind := a.kind;        
        fa.attribute := a;        
        fa.type := p2n;        
        fa.owner := fao;        
        fa.leafs := Set{fa};        
        fa.kind := a.kind;        
        fa.owner := fao;        
        fa.name := a.name;        
        fa.attribute := a;    }
}

map classComplexAttributes_LM in umlRdbms {        
    check uml (t:Class,
        c:Class,
        a:Attribute    ) {
    }        
    enforce middle (fao:ClassToTable    ) {
        realize fa:NonLeafAttribute    }    
    where (fao.umlClass.=(c);
        a.type.=(t);
        a.owner.=(c);
    ) {
        
        fa.name := a.name;        
        fa.leafs := fao.fromAttributes->collect(1_ : umltordbms::FromAttribute[?] | 1_.leafs);        
        fa.attribute := a;        
        fa.kind := a.kind;        
        fa.attribute := a;        
        fa.owner := fao;        
        fa.owner := fao;        
        fa.kind := a.kind;    }
}

map complexAttributePrimitiveAttributes_LM in umlRdbms {        
    check uml (ca:Attribute,
        c:Class,
        t:PrimitiveDataType,
        a:Attribute    ) {
    }        
    enforce middle (fao:NonLeafAttribute,
        p2n:PrimitiveToName    ) {
        realize fa:AttributeToColumn    }    
    where (fao.attribute.=(ca);
        p2n.primitive.=(t);
        a.owner.=(c);
        ca.type.=(c);
        a.owner.=(c);
        a.type.=(t);
    ) {
        
        fa.name := fao.name.+('_').+(a.name);        
        fa.owner := fao;        
        fa.kind := a.kind;        
        fa.attribute := a;        
        fa.attribute := a;        
        fa.leafs := Set{fa};        
        fa.type := p2n;        
        fa.owner := fao;        
        fa.kind := a.kind;    }
}

map complexAttributeComplexAttributes_LM in umlRdbms {        
    check uml (ca:Attribute,
        c:Class,
        t:Class,
        a:Attribute    ) {
    }        
    enforce middle (fao:NonLeafAttribute    ) {
        realize fa:NonLeafAttribute    }    
    where (fao.attribute.=(ca);
        a.owner.=(c);
        a.type.=(t);
        a.owner.=(c);
        ca.type.=(c);
    ) {
        
        fa.kind := a.kind;        
        fa.leafs := fao.fromAttributes->collect(1_ : umltordbms::FromAttribute[?] | 1_.leafs);        
        fa.kind := a.kind;        
        fa.name := fao.name.+('_').+(a.name);        
        fa.owner := fao;        
        fa.owner := fao;        
        fa.attribute := a;        
        fa.attribute := a;    }
}

map attributeColumns_MR in umlRdbms {        
    enforce rdbms (t:Table,
        ct:String    ) {
        realize c:Column    }        
    check middle (c2t:ClassToTable,
        p2n:PrimitiveToName,
        a2c:AttributeToColumn    ) {
    }    
    where (c2t.table.=(t);
        p2n.typeName.=(ct);
        c2t.fromAttributes->collect(1_ : umltordbms::FromAttribute[?] | 1_.leafs)->includes(a2c);
        a2c.owner.=(c2t);
        a2c.type.=(p2n);
    ) {
        
        c.name := a2c.name;        
        c.kind := a2c.kind;        
        a2c.column := c;        
        c.owner := t;        
        c.type := ct;    }
}

map __root__ in umlRdbms {    
    where (    ) {
    }

    for p in simpleuml::Package.allInstances() {
        call packageToSchema_LM {
            p:= p; 
        }

    }

    for p2s in umltordbms::PackageToSchema.allInstances() {
        call packageToSchema_MR {
            p2s:= p2s; 
        }

    }

    for c in simpleuml::Class.allInstances() {
        call classToTable_LM {
            c:= c; 
            p:= c.namespace; 
            p2s:= c.namespace.middle; 
        }

    }

    for c2t in umltordbms::ClassToTable.allInstances() {
        call classToTable_MR {
            c2t:= c2t; 
            p2s:= c2t.owner; 
            s:= c2t.owner.schema; 
        }

    }

    for a in simpleuml::Association.allInstances() {
        call associationToForeignKey_LM {
            a:= a; 
            dc:= a.destination; 
            p:= a.namespace; 
            sc:= a.source; 
            sc2t:= a.source.middle; 
            dc2t:= a.destination.middle; 
            p2s:= a.source.middle.owner; 
        }

    }

    for a2f in umltordbms::AssociationToForeignKey.allInstances() {
        
        for rk in simplerdbms::Key.allInstances() {
            call associationToForeignKey_MR {
                a2f:= a2f; 
                rk:= rk; 
                dc2t:= a2f.referenced; 
                sc2t:= a2f.owner; 
                s:= a2f.owner.table.schema; 
                st:= a2f.owner.table; 
                dt:= a2f.referenced.table; 
                p2s:= a2f.owner.owner; 
            }
        }
    }

    for prim in simpleuml::PrimitiveDataType.allInstances() {
        call integerToNumber_LM {
            prim:= prim; 
            p:= prim.namespace; 
            p2s:= prim.namespace.middle; 
        }

    }

    for p2n in umltordbms::IntegerToNumber.allInstances() {
        call integerToNumber_MR {
            p2n:= p2n; 
            p2s:= p2n.owner; 
        }

    }

    for prim in simpleuml::PrimitiveDataType.allInstances() {
        call booleanToBoolean_LM {
            prim:= prim; 
            p:= prim.namespace; 
            p2s:= prim.namespace.middle; 
        }

    }

    for prim in simpleuml::PrimitiveDataType.allInstances() {
        call stringToVarchar_LM {
            prim:= prim; 
            p:= prim.namespace; 
            p2s:= prim.namespace.middle; 
        }

    }

    for a in simpleuml::Attribute.allInstances() {
        call classPrimitiveAttributes_LM {
            a:= a; 
            t:= a.type; 
            c:= a.owner; 
            fao:= a.owner.middle; 
            p2n:= a.type.middle; 
        }

    }

    for a in simpleuml::Attribute.allInstances() {
        call classComplexAttributes_LM {
            a:= a; 
            c:= a.owner; 
            t:= a.type; 
            fao:= a.owner.middle; 
        }

    }

    for a in simpleuml::Attribute.allInstances() {
        for fao in umltordbms::NonLeafAttribute.allInstances() {
            call complexAttributeComplexAttributes_LM {
                fao:= fao; 
                a:= a; 
                ca:= fao.attribute; 
                c:= a.owner; 
                t:= a.type; 
            }
        }
    }

    for a in simpleuml::Attribute.allInstances() {
        for ca in simpleuml::Attribute.allInstances() {
            call complexAttributePrimitiveAttributes_LM {
                a:= a; 
                ca:= ca; 
                t:= a.type; 
                c:= a.owner; 
                p2n:= a.type.middle; 
                fao:= "<null>"."<null>"; 
            }
        }
    }

    for p2n in umltordbms::BooleanToBoolean.allInstances() {
        call booleanToBoolean_MR {
            p2n:= p2n; 
            p2s:= p2n.owner; 
        }

    }

    for p2n in umltordbms::StringToVarchar.allInstances() {
        call stringToVarchar_MR {
            p2n:= p2n; 
            p2s:= p2n.owner; 
        }

    }

    for a2c in umltordbms::AttributeToColumn.allInstances() {
        call attributeColumns_MR {
            a2c:= a2c; 
            c2t:= a2c.owner; 
            p2n:= a2c.type; 
            ct:= a2c.type.typeName; 
            t:= a2c.owner.table; 
        }

    }

}