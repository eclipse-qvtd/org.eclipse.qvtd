import FamiliesMM : 'Families.ecore';
import PersonsMM : 'Persons.ecore';

package org::eclipse::qvtd::qvtrelations::tests::persons2families
{
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
--	This is a bidirectional model-to-model transformation between Families and Persons
--
--	Contributors: Romina Eramo
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------					

transformation Persons2Families(person:PersonsMM, family:FamiliesMM) {

	attribute PREFER_EXISTING_FAMILY_TO_NEW : Boolean[1] = 'true';
	attribute PREFER_CREATING_PARENT_TO_CHILD : Boolean[1] = 'true';
	
	top relation PersonRegister2FamilyRegister
	{		
	  	enforce domain person pr : PersonRegister;
	    
		enforce domain family fr : FamilyRegister;
	}
	
	top abstract relation Person2FamilyMember
	{
	  	checkonly domain person p : Person;
	    
		enforce domain family f : FamilyMember;
	  	
	}
	
	top relation Female2Daughter overrides Person2FamilyMember
	{
	  	checkonly domain person p : Female {
	  		personsInverse = pr : PersonRegister
	  	} { not this.PREFER_CREATING_PARENT_TO_CHILD };
	    
		enforce domain family fm : FamilyMember {
	  		daughtersInverse = f : Family {
	  			familiesInverse = fr : FamilyRegister
	  		}
	  	};
	  	
	  	when {
	  		PersonRegister2FamilyRegister(pr, fr);
	  	}
	  	
	  	where {
	  		PersonName2FamilyNames(p, f, fm);
	  	}
	}
	
	top relation Female2Mother --overrides Person2FamilyMember
	{
	  	checkonly domain person p : Female {
	  		personsInverse = pr : PersonRegister
	  	} { this.PREFER_CREATING_PARENT_TO_CHILD };
	    
		enforce domain family fm : FamilyMember {
	  		motherInverse = f : Family {
	  			familiesInverse = fr : FamilyRegister
	  		}
	  	};
	  	
	  	when {
	  		PersonRegister2FamilyRegister(pr, fr);
	  	}
	  	
	  	where {
	  		PersonName2FamilyNames(p, f, fm);
	  	}
	}
	
	top relation Male2Father --overrides Person2FamilyMember
	{
	  	checkonly domain person p : Male {
	  		personsInverse = pr : PersonRegister
	  	} { this.PREFER_CREATING_PARENT_TO_CHILD };
	    
		enforce domain family fm : FamilyMember {
	  		fatherInverse = f : Family {
	  			familiesInverse = fr : FamilyRegister
	  		}
	  	};
	  	
	  	when {
	  		PersonRegister2FamilyRegister(pr, fr);
	  	}
	  	
	  	where {
	  		PersonName2FamilyNames(p, f, fm);
	  	}
	}
	
	top relation Male2Son --overrides Person2FamilyMember
	{
	  	checkonly domain person p : Male {
	  		personsInverse = pr : PersonRegister
	  	} { not this.PREFER_CREATING_PARENT_TO_CHILD };
	    
		enforce domain family fm : FamilyMember {
	  		sonsInverse = f : Family {
	  			familiesInverse = fr : FamilyRegister
	  		}
	  	};
	  	
	  	when {
	  		PersonRegister2FamilyRegister(pr, fr);
	  	}
	  	
	  	where {
	  		PersonName2FamilyNames(p, f, fm);
	  	}
	}
	
	relation PersonName2FamilyNames {
		fullname: String;
		index: Integer = fullname.indexOf(', ');
	  	
	  	checkonly domain person p : Person {
	  		name = fullname
	    };
	    
		enforce domain family f : Family {
			name = fullname.substring(1, index-1)
	  	},
		fm : FamilyMember {
			name = fullname.substring(index+2, fullname.size())
	  	};
	}
}	
}