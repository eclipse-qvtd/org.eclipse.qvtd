/*******************************************************************************
 * Copyright (c) 2011 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *******************************************************************************/
grammar org.eclipse.qvtd.xtext.qvtimperative.QVTimperative with org.eclipse.qvtd.xtext.qvtbase.QVTbase

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.eclipse.ocl.pivot/model/Pivot.ecore" as pivot
import "platform:/resource/org.eclipse.ocl.xtext.base/model/BaseCS.ecore" as base
import "platform:/resource/org.eclipse.ocl.xtext.essentialocl/model/EssentialOCLCS.ecore" as essentialocl
import "platform:/resource/org.eclipse.qvtd.xtext.qvtbase/model/QVTbaseCS.ecore" as qvtbasecs
import "platform:/resource/org.eclipse.qvtd.pivot.qvtbase/model/QVTbase.ecore" as qvtbase
import "platform:/resource/org.eclipse.qvtd.pivot.qvtimperative/model/QVTimperative.ecore" as qvtimperative
import "platform:/resource/org.eclipse.qvtd.xtext.qvtimperative/model/QVTimperativeCS.ecore"

TopLevelCS:
	ownedImports+=ImportCS*
	(ownedPackages+=QualifiedPackageCS | ownedTransformations+=TransformationCS | ownedMappings+=MappingCS | ownedQueries+=QueryCS)*
;

AddStatementCS: 'add' targetVariable=[pivot::Variable|UnrestrictedName] '+=' ownedExpression=ExpCS ';';
				
BottomPatternCS:		// Bug 466385 explains the redundancy below
	(
		'{' ownedUnrealizedVariables+=UnrealizedVariableCS (',' ownedUnrealizedVariables+=UnrealizedVariableCS)*
		'|' ownedConstraints+=PredicateOrAssignmentCS* '}'
	) | (
		'{' ownedUnrealizedVariables+=UnrealizedVariableCS (',' ownedUnrealizedVariables+=UnrealizedVariableCS)* '}'
	) | (
		'{' ownedConstraints+=PredicateOrAssignmentCS+ '}'
	) | (
		{BottomPatternCS} '{' '}'
	)
;
	
BottomStatementCS returns StatementCS: NewStatementCS | SetStatementCS;
	
ControlStatementCS returns MappingStatementCS: AddStatementCS | MappingCallCS | MappingLoopCS;
	
DirectionCS: {DirectionCS} name=UnrestrictedName?
	'imports' imports+=[pivot::Package|UnrestrictedName] (',' imports+=[pivot::Package|UnrestrictedName])*
	('uses' uses+=[qvtimperative::ImperativeDomain|UnrestrictedName] (',' uses+=[qvtimperative::ImperativeDomain|UnrestrictedName])*)?
;
	
GuardPatternCS:		// Bug 466385 explains the redundancy below
	(
		'(' ownedUnrealizedVariables+=GuardVariableCS (',' ownedUnrealizedVariables+=GuardVariableCS)* '|' ownedPredicates+=PredicateCS* ')'
	) | (
		'(' ownedUnrealizedVariables+=GuardVariableCS (',' ownedUnrealizedVariables+=GuardVariableCS)* ')'
	) | (
		'(' ownedPredicates+=PredicateCS+ ')'
	) | (
		{GuardPatternCS} '(' ')'
	)
;
	
//Variable := VariableName �:� TypeDeclaration
GuardVariableCS returns UnrealizedVariableCS: name=UnrestrictedName ':' ownedType=TypeExpCS;

ImportCS returns base::ImportCS:
	'import' (name=Identifier ':')? ownedPathName=URIPathNameCS (isAll?='::' '*')? ';';

MappingCS: {MappingCS} 'map' name=UnrestrictedName ('in' ownedInPathName=PathNameCS)?
	'{' ownedDomains+=(SourceDomainCS | TargetDomainCS)* ('where' ownedMiddle=MiddleDomainCS)?
	ownedStatements+=BottomStatementCS* ownedStatements+=ControlStatementCS* '}';
	
MappingCallCS: {MappingCallCS} isInfinite?='infinite'? 'call' ownedPathName=PathNameCS
	'{' ownedBindings+=MappingCallBindingCS* '}';

MappingCallBindingCS: referredVariable=[pivot::Variable|UnrestrictedName] (':='|isPolled?='?=') ownedValue=ExpCS ';';
	
MappingLoopCS: 'for' ownedIterator=MappingIteratorCS 'in' ownedInExpression=ExpCS '{' ownedMappingStatements+=ControlStatementCS+ '}';
	
MappingIteratorCS returns essentialocl::VariableCS: name=UnrestrictedName (':' ownedType=TypeExpCS)?;
	
MiddleDomainCS returns DomainCS:
	('{' ('check' checkedProperties+=PathNameCS (',' checkedProperties+=PathNameCS)*)?
	('enforce' enforcedProperties+=PathNameCS (',' enforcedProperties+=PathNameCS)*)? '}')?
	ownedGuardPattern=MiddleGuardPatternCS ownedBottomPattern=MiddleBottomPatternCS
;
		
MiddleBottomPatternCS returns BottomPatternCS:		// Bug 466385 explains the redundancy below
	(
		'{' ownedUnrealizedVariables+=UnrealizedVariableCS (',' ownedUnrealizedVariables+=UnrealizedVariableCS)*
		'|' ownedConstraints+=PredicateOrAssignmentCS* '}'
	) | (
		'{' ownedUnrealizedVariables+=UnrealizedVariableCS (',' ownedUnrealizedVariables+=UnrealizedVariableCS)* '}'
	) | (
		'{' ownedConstraints+=PredicateOrAssignmentCS+ '}'
	) | (
		{BottomPatternCS} '{' '}'
	)
;
	
MiddleGuardPatternCS returns GuardPatternCS: GuardPatternCS
;
	
NamedDomainCS returns DomainCS: isCheck?='check'? isEnforce?='enforce'? direction=[qvtbase::TypedModel|UnrestrictedName]
	ownedGuardPattern=GuardPatternCS ownedBottomPattern=BottomPatternCS;

QualifiedPackageCS returns qvtbasecs::QualifiedPackageCS:
	'package' ownedPathName=ScopeNameCS? name=UnrestrictedName (':' nsPrefix=UnrestrictedName)? ('=' nsURI=URI)?
	(('{'
		(/* ownedAnnotations+=AnnotationElementCS | */ ownedPackages+=QualifiedPackageCS | ownedClasses+=(ClassCS | TransformationCS))*
		'}')
	|';'
	)
;
	
ParamDeclarationCS: name=UnrestrictedName ':' ownedType=TypeExpCS;

PredicateCS: ownedCondition=ExpCS ';';
		
//Constraint ::= Predicate | Assignment
//Predicate ::= BooleanOCLExpr
//Assignement ::= [�default�] SlotOwnerOCLExpr�.�PropertyName �:=� ValueOCLExpr

PredicateOrAssignmentCS: ownedTarget=ExpCS (':=' ownedInitExpression=ExpCS)? ';';
		
QueryCS: isTransient?='transient'? 'query' ownedPathName=ScopeNameCS name=UnrestrictedName
		'(' (ownedParameters+=ParamDeclarationCS (',' ownedParameters+=ParamDeclarationCS)*)? ')'
		':' ownedType=TypeExpCS (';' | '{' ownedExpression=ExpCS '}');
//<query> ::= 'query' <PathNameCS> 
//            '(' [<paramDeclaration> (',' <paramDeclaration>)*] ')'
//      	  ':' <TypeCS>
//            (';' | '{' <OCLExpressionCS> '}')

NewStatementCS:
	'new' ':' referredTypedModel=[qvtbase::TypedModel|UnrestrictedName] name=UnrestrictedName ':' ownedType=TypeExpCS (':=' ownedInitExpression=ExpCS)?';'
;

ScopeNameCS returns base::PathNameCS:
	ownedPathElements+=FirstPathElementCS '::' (ownedPathElements+=NextPathElementCS '::')*;

SetStatementCS: 'set' referredVariable=[pivot::Variable|UnrestrictedName] '.' referredProperty=[pivot::Property|UnrestrictedName] ':=' ownedInitExpression=ExpCS ';';
	
SourceDomainCS returns DomainCS: isCheck?='check' direction=[qvtbase::TypedModel|UnrestrictedName]
	('{' ('check' checkedProperties+=PathNameCS (',' checkedProperties+=PathNameCS)*)?
	('enforce' enforcedProperties+=PathNameCS (',' enforcedProperties+=PathNameCS)*)? '}')?
	ownedGuardPattern=SourceGuardPatternCS ownedBottomPattern=SourceBottomPatternCS
;
		
SourceBottomPatternCS returns BottomPatternCS:
	{BottomPatternCS} '{' (ownedUnrealizedVariables+=UnrealizedVariableCS
		(',' ownedUnrealizedVariables+=UnrealizedVariableCS)*)?
	'}'
;
	
SourceGuardPatternCS returns GuardPatternCS:
	{GuardPatternCS} '(' (ownedUnrealizedVariables+=UnrealizedVariableCS (',' ownedUnrealizedVariables+=UnrealizedVariableCS)*)? ')'
;
	
StatementCS: ControlStatementCS;

TransformationCS:
	'transformation' ownedPathName=ScopeNameCS? name=UnreservedName '{' (ownedDirections+=DirectionCS ';')* '}';
	
TargetDomainCS returns DomainCS: isEnforce?='enforce' direction=[qvtbase::TypedModel|UnrestrictedName]
	('{' ('check' checkedProperties+=PathNameCS (',' checkedProperties+=PathNameCS)*)?
	('enforce' enforcedProperties+=PathNameCS (',' enforcedProperties+=PathNameCS)*)? '}')?
	ownedGuardPattern=TargetGuardPatternCS ownedBottomPattern=TargetBottomPatternCS
;
		
TargetBottomPatternCS returns BottomPatternCS:
	{BottomPatternCS} '{' (ownedUnrealizedVariables+=UnrealizedVariableCS (',' ownedUnrealizedVariables+=UnrealizedVariableCS)*)?
	'}'
;
	
TargetGuardPatternCS returns GuardPatternCS:
	{GuardPatternCS} '(' (ownedUnrealizedVariables+=UnrealizedVariableCS (',' ownedUnrealizedVariables+=UnrealizedVariableCS)*)? ')'
;
	
UnnamedDomainCS returns DomainCS: {DomainCS} ownedGuardPattern=GuardPatternCS ownedBottomPattern=BottomPatternCS;
	
//Variable := VariableName �:� TypeDeclaration
UnrealizedVariableCS: name=UnrestrictedName (':' ownedType=TypeExpCS)? (':=' ownedInitExpression=ExpCS)?;
		
UnrestrictedName returns ecore::EString:
	EssentialOCLUnrestrictedName
|	'check'
//|	'creation'
//|	'default'
//|	'deletion'
|	'enforce'
|	'import'
|	'imports'
//|	'include'
|	'library'
|	'map'
|	'query'
|	'realize'
|	'refines'
|	'transformation'
|	'uses'
//|	'where'
;
