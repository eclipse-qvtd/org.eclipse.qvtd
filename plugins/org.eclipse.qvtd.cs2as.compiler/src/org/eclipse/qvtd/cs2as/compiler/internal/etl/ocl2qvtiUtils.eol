-- globalVars: traceabilityPropName
--  
-- in order to use getTraceabilityProperty() helper operation a traceabilityPropName should have been defined
--
--
operation OCL!ShadowExp getExpressionContextType () : OCL!Class {
	return self.getContainingExpressionInOCL().ownedContext.type;
}

operation OCL!Operation getContextType () : OCL!Class {
	return self.bodyExpression.ownedContext.type;
}

operation OCL!OCLExpression getContainingExpressionInOCL() {
	var container = self.eContainer();
	while (not container.isKindOf(OCL!ExpressionInOCL)) {
		container = container.eContainer();
	}
	return container;
}

operation OCL!ShadowExp getShadowTypeName() : String { 
	var expInOCL = self.getContainingExpressionInOCL();
	var allShadowExps = expInOCL.getAllContents().select(x | x.isKindOf(OCL!ShadowExp));
	var sameTypeShadowExps = allShadowExps.select(x | x.type = self.type);
	if (sameTypeShadowExps.size() > 1) { // If there are more shadow exps returning the same type:
		return self.type.name + "_" + sameTypeShadowExps.indexOf(self);
	} else {
		return self.type.name;
	}
}

operation OCL!ShadowExp getCreationMappingName() : String { 
	return 'c' + self.getExpressionContextType().name + '_2_' + self.getShadowTypeName();
}

operation OCL!ShadowPart getUpdateMappingName() : String {
 	var ShadowExp = self.eContainer();
 	var refProp = self.referredProperty;
	return 'u' + ShadowExp.getShadowTypeName() + '_' + refProp.name;
}

operation OCL!Operation getUpdateMappingName() : String {
 	var opType = self.bodyExpression.ownedContext.type; 	
	return 'u' + opType.name + '_' + opType.getTraceabilityProperty().name;
}

operation OCL!Type getTraceabilityProperty() : OCL!Property {
	// return self.ownedAttribute.selectOne(x | x.name = 'ast'); // FIXME can we parameterize the traceability property name ?
	return self.asSequence().closure(x | x.superClasses).including(self).ownedProperties.flatten().selectOne(x | x.name = traceabilityPropName);
}

// FIXME clash naming
// Remove if the traceMM-based transformation is discarded
operation OCL!ShadowExp getTraceElementName() : String {	
	return getTraceElementName(self.getExpressionContextType(), self.type);
}

// FIXME clash naming
// Remove if the traceMM-based transformation is discarded
operation OCL!ShadowExp getTraceElementVariableName() : String {
	var fromType = self.getExpressionContextType();
	var toType = self.type;
	
	return fromType.name.subString(0,1).firstToLowerCase() + '2' + toType.name.subString(0,1).firstToLowerCase();
}

operation getTraceElementName(fromType, toType) : String {
	return fromType.name + '2' + toType.name;
}

operation OCL!Element getAllContents() : Sequence  {
	return self.asSequence().closure(x | x.eContents());
}