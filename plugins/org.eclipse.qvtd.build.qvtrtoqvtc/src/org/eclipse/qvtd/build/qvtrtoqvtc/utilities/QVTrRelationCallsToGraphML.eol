var root : new gml!DocumentRoot;
var graphml : new gml!GraphmlType;
var g : new gml!GraphType;

root.graphml = graphml;
root.xMLNSPrefixMap.put("", "http://graphml.graphdrawing.org/xmlns");
root.xMLNSPrefixMap.put("xsi", "http://www.w3.org/2001/XMLSchema-instance");
root.xMLNSPrefixMap.put("y", "http://www.yworks.com/xml/graphml");
root.xMLNSPrefixMap.put("yed", "http://www.yworks.com/xml/yed/3");
root.xSISchemaLocation.put("http://graphml.graphdrawing.org/xmlns", "http://graphml.graphdrawing.org/xmlns/1.1/graphml.xsd");
// Yed Node attributes
// <key attr.name="description" attr.type="string" for="node" id="d5"/>
var key5 : new gml!KeyType;
key5.`for` = gml!KeyForType#node;
key5.id = "d5";
key5.attrName = "description";
key5.attrType = gml!KeyTypeType#string;
graphml.key.add(key5);

// <key for="node" id="d6" yfiles.type="nodegraphics"/>
var key6 : new gml!KeyType;
key6.`for` = gml!KeyForType#node;
key6.id = "d6";
key6.yfilesType="nodegraphics";
graphml.key.add(key6);

//<key attr.name="description" attr.type="string" for="edge" id="d8"/>
var key8 : new gml!KeyType;
key8.attrName = "description";
key8.attrType = gml!KeyTypeType#string;
key8.`for` = gml!KeyForType#edge;
key8.id = "d8"; 
graphml.key.add(key8);
//<key for="edge" id="d9" yfiles.type="edgegraphics"/>
var key9 : new gml!KeyType;
key9.`for` = gml!KeyForType#edge;
key9.id = "d9";
key9.yfilesType="edgegraphics";
graphml.key.add(key9);

// Graph information
graphml.graph.add(g);
g.edgedefault = gml!GraphEdgedefaultType#directed;
g.id = "G";

var nodeNodeMap : Map;
for (rule in qvtrAST!Relation.all().sortBy(r | r.name)) {
    var n = new gml!NodeType;
    n.id = "n" + (loopCount-1).toString();
    g.node.add(n);
    nodeNodeMap.put(rule, n.id);
    
    /* Yed Information */
    var d5 : new gml!DataType;
    d5.key = key5.id;
    
    n.data.add(d5);
    
    var d6 : new gml!DataType;
    d6.key = key6.id;
    var sNode : new gml!ShapeNodeType;
    var label : new gml!NodeLabelType;
    var shape : new gml!ShapeType1;
    var fill = new gml!FillType;
    // Label
    label.value = ((n.id.substring(1)).asInteger() + 1).toString();
    rule.name.println(label.value + ": ");
    sNode.nodeLabel.add(label);
    shape.type = gml!ShapeTypeType#ellipse;
    if (rule.isTopLevel) {
    	fill.color = "#99cc00";
    } else {
    	fill.color = "#ffcc00";
    }
    sNode.shape = shape;
    fill.transparent = false;
    sNode.fill = fill;
    d6.shapeNode = sNode;
    n.data.add(d6);
}
var edgeId = 0;

for (rule in qvtrAST!Relation.all()) {
	if (rule.when.isDefined())
		for (p in rule.when.predicate.select(p | p.conditionExpression.isTypeOf(qvtrAST!RelationCallExp))) {
			var e = new gml!EdgeType;
		    e.target = nodeNodeMap.get(rule);
		    e.source = nodeNodeMap.get(p.conditionExpression.referredRelation);
		    e.id = edgeId.toString();
		    edgeId = edgeId+1;
		    /* Yed Information */
		    var d9 = new gml!DataType;
		    d9.key = key9.id;
		    e.data.add(d9);
		    var plEdge = new gml!PolyLineEdgeType;
		    var arrow : new gml!ArrowsType;
		    arrow.target = gml!ArrowTypeType#standard;
		    arrow.source = gml!ArrowTypeType#none;
		    var style : new gml!LineStyleType;
		    style.type = gml!LineTypeType#line;
		    style.color = "#ff0000";
		    plEdge.arrows= arrow;
		    plEdge.lineStyle = style;
		    d9.polyLineEdge = plEdge;
		    g.edge.add(e);
		}
	
	if (rule.where.isDefined())
		for (p in rule.where.predicate.select(p | p.conditionExpression.isTypeOf(qvtrAST!RelationCallExp))) {
			var e = new gml!EdgeType;
			e.source = nodeNodeMap.get(rule);
			e.target = nodeNodeMap.get(p.conditionExpression.referredRelation);
			e.id = edgeId.toString();
			edgeId = edgeId+1;
			/* Yed Information */
			var d9 = new gml!DataType;
			d9.key = key9.id;
			e.data.add(d9);
			var plEdge = new gml!PolyLineEdgeType;
			var arrow : new gml!ArrowsType;
			arrow.target = gml!ArrowTypeType#standard;
			arrow.source = gml!ArrowTypeType#none;
			var style : new gml!LineStyleType;
			style.type = gml!LineTypeType#line;
			style.color = "#008000";
			plEdge.arrows= arrow;
			plEdge.lineStyle = style;
			d9.polyLineEdge = plEdge;
			g.edge.add(e);
		}
}

"Done".println();



