/****t* /org.eclipse.qvtd.build.etl/extras/ScheduleTreeToGraphML
 * NAME
 *  ScheduleTreeToGraphML -- Save the schedule tree as a graphml for analysys
 *  and information  
 */
pre {
	// Create GraphML keys
	var nTypeKey : new GML!KeyType;
	nTypeKey.`for` = GML!KeyForType#node;
	nTypeKey.id = "d6";
	nTypeKey.yfilesType="nodegraphics";
	
	var eTypeKey : new GML!KeyType;	
	eTypeKey.`for` = GML!KeyForType#edge;
	eTypeKey.id = "d9";
	eTypeKey.yfilesType="edgegraphics";
}

rule Schedule2DocumentRoot 
	transform s : QVTt!scheduletree::Schedule
	to root : GML!DocumentRoot {
	
	root.xMLNSPrefixMap.put("", "http://graphml.graphdrawing.org/xmlns");
	root.xMLNSPrefixMap.put("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	root.xMLNSPrefixMap.put("y", "http://www.yworks.com/xml/graphml");
	root.xMLNSPrefixMap.put("yed", "http://www.yworks.com/xml/yed/3");
	root.xSISchemaLocation.put("http://graphml.graphdrawing.org/xmlns", "http://graphml.graphdrawing.org/xmlns/1.1/graphml.xsd");
	
	// Graphml Types
	var graphml : new GML!GraphmlType;	
	graphml.key.addAll(GML!KeyType.all());
	
	root.graphml = graphml;
	
	// Graph information
	var g : new GML!GraphType;
	g.edgedefault = GML!GraphEdgedefaultType#directed;
	g.id = "Graph";	
	g.node.addAll(s.datums.equivalent());
	g.node.addAll(s.datums.propertyDatums.flatten().equivalent());
	g.node.addAll(s.actions.equivalent());
	graphml.graph.add(g);
}

rule NodeToNode 
	transform sn : QVTt!scheduletree::Node
	to gn : GML!NodeType {
	
	t.id = s.type.name;	
	// style	
	t.stilishNode(GML!ShapeTypeType#rectangle, "#ff6600");
}

rule EdgeToEdge
	transform se : QVTt!Edge
	to ge : GML!Edge
	{
		e.source = se.parent.equivalent().id;
    	e.target = se.child.equivalent().id;
    	e.id = se.iterator.variable.name;
	}

operation GML!NodeType stilishNode(shapeType, color) {

	var nType : new GML!DataType;
	var nShape : new GML!ShapeNodeType;
    var nLabel : new GML!NodeLabelType;
    var shape : new GML!ShapeType1;
    var fill = new GML!FillType;

	nLabel.value = self.id;
	shape.type = shapeType;
	nShape.nodeLabel.add(nLabel);
	nShape.shape = shape;
	nType.key = nTypeKey.id;	
	nType.shapeNode = nShape;
	fill.color = color;
	nShape.fill = fill;
	self.data.add(nType);
}


operation GML!EdgeType stilishEdge(lineType, color) {

 	var eType = new GML!DataType;
    var ePolyLine = new GML!PolyLineEdgeType;
    var eArrow : new GML!ArrowsType;
	var eStyle : new GML!LineStyleType;
	var eLabel : new GML!EdgeLabelType;
    
    eStyle.type = lineType;
    eArrow.target = GML!ArrowTypeType#standard;
    eArrow.source = GML!ArrowTypeType#none;
    eLable.value = self.id;    
    ePolyLine.arrows= eArrow;
    ePolyLine.lineStyle = eStyle;
    ePolyLine.edgeLabel.add(eLabel);
    eType.key = eTypeKey.id;
    eType.polyLineEdge = ePolyLine;
    self.data.add(eType);
    
}