@chached
operation isInputDomain(area : QVT!Area) : Boolean {
    return area.isTypeOf(QVT!CoreDomain) and
        config!Configuration.all.first().inputDirection.name == area.typedModel.name;
}

@chached
operation isMiddleDomain(area : QVT!Area) : Boolean {
    return area.isTypeOf(QVT!Mapping);
}

@chached
operation isOutputDomain(area : QVT!Area) : Boolean {
    return area.isTypeOf(QVT!CoreDomain) and
        config!Configuration.all.first().outputDirection.collect(od | od.name).includes(area.typedModel.name);
    //return not isInputDomain(area) and not isMiddleDomain(area);
}

operation isCheckMode() : Boolean {
    return config!Configuration.all.first().mode == config!Mode#checking;
}

operation isEnforceMode() : Boolean {
    return config!Configuration.all.first().mode == config!Mode#enforcement;
}

@cached
operation QVT!RealizedVariable oppositeBottomPattern() : QVT!BottomPattern  {
    return QVT!BottomPattern.all.selectOne(p |p.realizedVariable.includes(self)); }

@cached
operation QVT!Variable oppositePattern() : QVT!CorePattern  {
    
    if(self.isTypeOf(QVT!Variable)) {
        return QVT!CorePattern.all.selectOne(p |p.variable.includes(self));
    }
    if (self.isTypeOf(QVT!RealizedVariable)) {
        return self.oppositeBottomPattern();
    }     
}

// How to find the domain of an OCL expression? It depends on the expression.. but it can get nasty
@cached
operation QVT!OCLExpression getArea() : QVT!Area {
    //var area : QVT!Area;
    if (self.isTypeOf(QVT!VariableExp)) {
        // TODO Hack to deal with undefined variable types? Why is this happening
        if (self.referredVariable.type() == null) {
            return null;
        }
        return self.referredVariable.oppositePattern().area;
    } else if (self.isKindOf(QVT!CallExp)) {
        return self.source.getArea();
    } else if (self.isTypeOf(QVT!IfExp)) {
        return self.condition.getArea();
    } else if (self.isKindOf(QVT!LiteralExp)) {
        return null;
    } else {
        self.println();
        throw "Error! Add getArea for " + self.type();
    }
    return null;
}