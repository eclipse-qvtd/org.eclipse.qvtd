/*******************************************************************************
 * Copyright (c) 2013 The University of York and Willink Transformations.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos - initial implementation
 ******************************************************************************/
import "OCLExpressionAnalysis.eol";

/****l* /org.eclipse.qvtd.build.etl/helpers/QVTHelpers
 * NAME
 *  QVTHelpers -- A set of operations to query, format, interpret, etc., 
 *  information from a QVT model. 
 * NOTES
 *  Some of this operations can/should be moved to the QVTcore model/code 
 */

/****o* QVTHelpers/isInputDomain
 * NAME
 *  isInputDomain - Returns true if the area is of type QVT!CoreDomain and it's 
 *  TypedModel is the input domain.
 *
 * CONTEXT
 *  QVT!Area  The are under test
 * ANNOTATIONS
 *  cached
 * SEE ALSO
 *  QVTHelpers/isMiddleDomain
 *  QVTHelpers/isOutputDomain
 */
@chached
operation QVT!Area isInputDomain() : Boolean {
    return self.isTypeOf(QVT!CoreDomain) and
        config!Configuration.all.first().inputDirection.name == self.typedModel.name;
}

/****o* QVTHelpers/isMiddleDomain
 * NAME
 *  isMiddleDomain - Returns true if the area belongs to the middle domain, i.e.
 *  it is a QVT!Mapping.
 *
 * CONTEXT
 *  QVT!Area  The are under test
 * ANNOTATIONS
 *  cached
 * SEE ALSO
 *  QVTHelpers/isInputDomain
 *  QVTHelpers/isOutputDomain
 */
@chached
operation QVT!Area isMiddleDomain() : Boolean {
    return self.isTypeOf(QVT!Mapping);
}

/****o* QVTHelpers/isOutputDomain
 * NAME
 *  isOutputDomain - Returns true if the area is of type QVT!CoreDomain and it's 
 *  TypedModel is the output domain.
 *
 * CONTEXT
 *  QVT!Area  The are under test
 * ANNOTATIONS
 *  cached
 * SEE ALSO
 *  QVTHelpers/isInputDomain
 *  QVTHelpers/isMiddleDomain
 */
@chached
operation QVT!Area isOutputDomain() : Boolean {
    return self.isTypeOf(QVT!CoreDomain) and
        config!Configuration.all.first().outputDirection.collect(od | od.name).includes(self.typedModel.name);
}


/****o* QVTHelpers/isCheckMode
 * NAME
 *  isCheckMode - Indicates if the transformation is invoked in check mode.
 * ANNOTATIONS
 *  cached
 * RESULT
 *  True if the condifuration mode is Mode#checking
 * SEE ALSO
 *  QVTHelpers/isEnforceMode
 */
@chached 
operation isCheckMode() : Boolean {
    return config!Configuration.all.first().mode == config!Mode#checking;
}


/****o* QVTHelpers/isEnforceMode
 * NAME
 *  isEnforceMode - Indicates if the transformation is invoked in enforce mode.
 * ANNOTATIONS
 *  cached
 * RESULT
 *  True if the condifuration mode is Mode#enforcement
 * SEE ALSO
 *  QVTHelpers/isCheckMode
 */
@chached
operation isEnforceMode() : Boolean {
    return config!Configuration.all.first().mode == config!Mode#enforcement;
}


/****o* QVTHelpers/getMiddleTypedModel
 * NAME
 *  getMiddleTypedModel - Returns the TypedModel reference for the middle domain
 * ANNOTATIONS
 *  cached
 * RESULT
 *  A reference to the TypeModel of the middle domain.
 */
@cachecd
operation QVT!Transformation getMiddleTypedModel() : QVT!TypedModel {

    return self.modelParameter.selectOne(tm | tm.name = config!Configuration.all.first().middle.name);
}

/****o* QVTHelpers/oppositePattern
 * NAME
 *  oppositePattern - Returns the pattern to which a variable belongs
 * ANNOTATIONS
 *  cached
 * RESULT
 *  The core pattern in which the variable is instanciated/referenced
 */
@cached
operation QVT!Variable oppositePattern() : QVT!CorePattern  {
    
    return self.owningModel().getAllOfKind("CorePattern").selectOne(p | p.variable.includes(self));
}

@cached
operation QVT!RealizedVariable oppositePattern() : QVT!CorePattern  {
    
    return self.owningModel().getAllOfType("BottomPattern").selectOne(p | p.realizedVariable.includes(self));
}


/****o* QVTHelpers/getArea
 * NAME
 *  getArea - Returns the area that defines the context of an OCL Expression.
 * FUNCTION
 *  The area of an OCL Expression depends on the area of the variables used
 *  in the expression, and thus all the parts of the expression are inspected
 *  to find variable references and then their area
 * ANNOTATIONS
 *  cached
 * RESULT
 *  The core pattern in which the variable is instanciated/referenced
 * TODO
 *  What if the OCL Ecpression contains references to multiple variables in 
 *  multiple areas? return a collection and let the caller decide?
 */
@cached
operation QVT!OCLExpression getArea() : QVT!Area {
    if (self.isTypeOf(QVT!VariableExp)) {
        if (self.referredVariable.type() == null) {
            return null;
        }
        return self.referredVariable.oppositePattern().area;
    } else if (self.isKindOf(QVT!CallExp)) {
        return self.source.getArea();
    } else if (self.isTypeOf(QVT!IfExp)) {
        return self.condition.getArea();
    } else if (self.isKindOf(QVT!LiteralExp)) {
        return null;
    } else {
        self.println();
        throw "Error! Add getArea for " + self.type();
    }
    return null;
}

/****o* QVTHelpers/findReferencedVariables
 * NAME
 *  findReferencedVariables - Returns the collection of all varaibles referenced
 *  in the assignment.
 * CONTEXT
 *  QVT!Assignment
 * ANNOTATIONS
 *  cached
 * RESULT
 *  A collection of all the varaibles found.
 */
@cached 
operation QVT!Assignment findReferencedVariables() : Collection {
    
    var varRefs : Set();
    varRefs = self.value.findReferencedVariables();
    if (self.isTypeOf(QVT!PropertyAssignment)) {
        varRefs.addAll(self.slotExpression.findReferencedVariables());
    } else if (self.isTypeOf(QVT!VariableAssignment)) {
        varRefs.add(self.targetVariable);
    }
    return varRefs;
}

/****o* QVTHelpers/findReferencedVariables
 * NAME
 *  findReferencedVariables - Returns the collection of all varaibles referenced
 *  in the assignment.
 * CONTEXT
 *  QVT!Predicate
 * ANNOTATIONS
 *  cached
 * RESULT
 *  A collection of all the varaibles found.
 */
@cached
operation QVT!Predicate findReferencedVariables() : Collection {
    return self.conditionExpression.findReferencedVariables();
}

/****o* QVTHelpers/retypeVar
 * NAME
 *  retypeVar - Retypes a variable to the less abstract type of all variables, in
 * the pattern, with the same name.
 * CONTEXT
 *  QVT!Variable
 * PARAMETERS
 *  pattern     The pattern to search for variables with the same name
 */
operation QVT!Variable retypeVar(pattern : QVT!Pattern) {
    var refinedVars = pattern.variable.select(
                    v | v.name == self.name
                    );
    if (refinedVars.size() > 0) {
        //var x = new Native("org.eclipse.qvtd.build.etl.PivotUtil");
        //var lrv = x.getLowestRankVariable(refinedVars.including(self));
        var lrv = getLowestRankVariable(refinedVars.including(self));
        self.type = lrv.type;
    }
}

/****o* QVTHelpers/retypeRealizedVar
 * NAME
 *  retypeRealizedVar - Retypes a RealizedVariable to the less abstract type of
 *  all realized variables, in the pattern, with the same name.
 * CONTEXT
 *  QVT!RealizedVariable
 * PARAMETERS
 *  pattern     The pattern to search for variables with the same name
 */
operation QVT!RealizedVariable retypeRealizedVar(pattern : QVT!Pattern) {
    var refinedVars = pattern.realizedVariable.select(
                    v | v.name == self.name
                    );
    if (refinedVars.size() > 0) {
        //var x = new Native("org.eclipse.qvtd.build.etl.PivotUtil");
        //var lrv = x.getLowestRankVariable(refinedVars.including(self));
        var lrv = getLowestRankVariable(refinedVars.including(self));
        self.type = lrv.type;
    }
}

/****o* QVTHelpers/getLowestRankVariable
 * NAME
 *  getLowestRankVariable - Finds the variable with the less abstract type from
 *  the collection of variables
 * PARAMETERS
 *  vars     The collection to perform the search
 */
operation getLowestRankVariable(vars : Collection) {
        
        var min = vars.first();
        for(v in vars.excluding(min)) {
            //minType = (ClassImpl) min.eGet(typeFeat);
            if (v.type.superClass.includes(min.type)) {
                min = v;    
            }
        }
        // Verify that the min is actually the min, i.e. all the other variables are superiors
        // in the hierarchy
        /*for (TypedElement var : vars) {
            if (!var.equals(min)) {
                if (!((ClassImpl)min.eGet(typeFeat)).getSuperClass().contains(var.eGet(typeFeat))) {
                    System.out.println("min is not min");
                    return null;
                }
            }
        }*/
        return min;
}

/****o* QVTHelpers/fixPredicateVarReferences
 * NAME
 *  fixPredicateVarReferences - Fixes predicate's varaible references that point
 *  to variables in some other model (same name, different model)
 * FUNCTION
 *  Loops trough all the predicates and fixes references to the variables. 
 * CONTEXT
 *  QVT!GuardPattern
 * TODO
 *  Only predicates with references to variables in other models should be checked,
 *  and then only references to varaibles in other models fixed. Add a select
 *  statement to filter these.
 */
operation QVT!GuardPattern fixPredicateVarReferences() {
    for (predicate in self.predicate.select(p | p.findReferencedVariables().exists(v | v.owningModel() <> p.owningModel()))) {
        //predicate.toString.println("Fixing Predicate ");
        var refVars =  predicate.findReferencedVariables().select(v | v.owningModel() <> predicate.owningModel());
        //refVars.println("refVars ");
        // Find variables and fix references
        for (v in refVars) {
            //v.println("Fixing ");
            var targetVar = v.findReferencesInPatterns(self.asSequence());
            if (targetVar == null) {
                var searchPatterns;
                if (self.area.isTypeOf(QVT!CoreDomain)) {
                    // Domain guard patterns depend on guard patterns of domains with depending typed models
                    searchPatterns = self.area.rule.domain.select(d | d.typedModel.dependsOn.includes(self.area.typedModel)).collect(d | d.guardPattern).flatten();
                } else if (self.area.isTypeOf(QVT!Mapping)) {
                    // 1. Mapping's domain guard patterns
                    searchPatterns = self.area.domain.collect(d | d.guardPattern).flatten();
                }
                targetVar = v.findReferencesInPatterns(searchPatterns);
                if (targetVar == null) {
                    // Search in the context
                    searchPatterns = self.area.getContextMappingPatterns();
                    targetVar = v.findReferencesInPatterns(searchPatterns);
                }
            }
            if (targetVar == null) {
                if (self.area.isTypeOf(QVT!Mapping)) {
                    throw "Error! not able to find a local reference for variable " + v + " in predicate " + predicate + " in GuardPattern of Mapping " + self.area;  
                } else if(self.area.isTypeOf(QVT!CoreDomain)) {
                    throw "Error! not able to find a local reference for variable " + v + " in predicate " + predicate + " in GuardPattern of Domain " + self.area;  
                }  
            }
            //targetVar.println("local ");
            predicate.conditionExpression.fixVarReferences(targetVar);
        }
    }
}

/****o* QVTHelpers/fixPredicateVarReferences
 * NAME
 *  fixPredicateVarReferences - Fixes predicate's varaible references that point
 *  to variables in some other model (same name, different model)
 * FUNCTION
 *  Loops trough all the predicates and fixes references to the variables. 
 * CONTEXT
 *  QVT!BottomPattern
 * TODO
 *  Only predicates with references to variables in other models should be checked,
 *  and then only references to varaibles in other models fixed. Add a select
 *  statement to filter these.
 */
operation QVT!BottomPattern fixPredicateVarReferences() {
    
    for (predicate in self.predicate.select(p | p.findReferencedVariables().exists(v | v.owningModel() <> p.owningModel()))) {
        //predicate.println("Predicate ");
        var refVars =  predicate.findReferencedVariables().select(v | v.owningModel() <> predicate.owningModel());
        //refVars.println("refVars ");
        // Find variables and fix references
        for (v in refVars) {
            //v.println("Fixing ");
            // MiddleGuard Pattern depends on domain guard patterns
            var targetVar = v.findReferencesInPatterns(self.asSequence());
            if (targetVar == null) {
                var searchPatterns : Sequence;
                if (self.area.isTypeOf(QVT!CoreDomain)) {
                    // 1. Guard Pattern of the Domain
                    searchPatterns = self.area.rule.domain.collect(d | d.guardPattern).flatten();
                    targetVar = v.findReferencesInPatterns(searchPatterns); 
                    // 2. Bottom Pattern of domains with depending typed models
                    if (targetVar == null) {
                        searchPatterns = self.area.rule.domain.select(d | d.typedModel.dependsOn.includes(self.area.typedModel)).collect(d | d.bottomPattern).flatten();
                        targetVar = v.findReferencesInPatterns(searchPatterns); 
                    }
                    
                } else if (self.area.isTypeOf(QVT!Mapping)) {
                    // 1. Guard Pattern of the Mapping
                    searchPatterns = self.area.guardPattern.asSequence();
                    targetVar = v.findReferencesInPatterns(searchPatterns); 
                    // 2. Mapping's domain bottom pattern
                    if (targetVar == null) {
                        searchPatterns = self.area.domain.collect(d | d.bottomPattern).flatten();
                        targetVar = v.findReferencesInPatterns(searchPatterns); 
                        if (targetVar == null) {
                            // 3. Mapping's domain guard patterns
                            searchPatterns = self.area.domain.collect(d | d.guardPattern).flatten();
                            targetVar = v.findReferencesInPatterns(searchPatterns); 
                        }
                    }
                }
                if (targetVar == null) {
                    // Search in the context
                    searchPatterns = self.area.getContextMappingPatterns();
                    targetVar = v.findReferencesInPatterns(searchPatterns);
                }
            }
            if (targetVar == null) {
                if (self.area.isTypeOf(QVT!Mapping)) {
                    throw "Error! not able to find a local reference for variable " + v + " in predicate " + predicate + "in BottomPattern of Mapping " + self.area;  
                } else if(self.area.isTypeOf(QVT!CoreDomain)) {
                    throw "Error! not able to find a local reference for variable " + v + " in predicate " + predicate + "in BottomPattern of Domain " + self.area;  
                }  
            }
            predicate.conditionExpression.fixVarReferences(targetVar);
        }
    }
}


/****o* QVTHelpers/fixAssignmentVarReferences
 * NAME
 *  fixAssignmentVarReferences - Fixes assignment's varaible references that point
 *  to variables in some other model (same name, different model)
 * FUNCTION
 *  Loops trough all the assignments and fixes references to the variables. 
 * CONTEXT
 *  QVT!BottomPattern
 * TODO
 *  Only predicates with references to variables in other models should be checked,
 *  and then only references to varaibles in other models fixed. Add a select
 *  statement to filter these.
 */
operation QVT!BottomPattern fixAssignmentVarReferences() {
    for (assignment in self.assignment.select(a | a.findReferencedVariables().exists(v | v.owningModel() <> a.owningModel()))) {
        //assignment.toString().println("Fixing Assignment ");
        var refVars =  assignment.findReferencedVariables().select(v | v.owningModel() <> assignment.owningModel());
        //refVars.println("refVars ");
        // Find variables and fix references
        for (v in refVars) {
            //v.println("Fixing ");
            // MiddleGuard Pattern depends on domain guard patterns
            var targetVar = v.findReferencesInPatterns(self.asSequence());
            //targetVar.println("targetVar ");
            if (targetVar == null) {
                var searchPatterns;
                if (self.area.isTypeOf(QVT!CoreDomain)) {
                    // 1. Guard Pattern of the Domain
                    searchPatterns = self.area.rule.domain.collect(d | d.guardPattern).flatten();
                    targetVar = v.findReferencesInPatterns(searchPatterns); 
                    // 2. Bottom Pattern of domains with depending typed models
                    if (targetVar == null) {
                        searchPatterns = self.area.rule.domain.select(d | d.typedModel.dependsOn.includes(self.area.typedModel)).collect(d | d.bottomPattern).flatten();
                        targetVar = v.findReferencesInPatterns(searchPatterns); 
                    }
                } else if (self.area.isTypeOf(QVT!Mapping)) {
                    // 1. Guard Pattern of the Mapping
                    searchPatterns = self.area.guardPattern.asSequence();
                    targetVar = v.findReferencesInPatterns(searchPatterns); 
                    // 2. Mapping's domain bottom pattern
                    if (targetVar == null) {
                        searchPatterns = self.area.domain.collect(d | d.bottomPattern).flatten();
                        targetVar = v.findReferencesInPatterns(searchPatterns); 
                        if (targetVar == null) {
                            // 3. Mapping's domain guard patterns
                            searchPatterns = self.area.domain.collect(d | d.guardPattern).flatten();
                            targetVar = v.findReferencesInPatterns(searchPatterns); 
                        }
                    }
                }
                if (targetVar == null) {
                    // Search in the context
                    searchPatterns = self.area.getContextMappingPatterns();
                    targetVar = v.findReferencesInPatterns(searchPatterns);
                }
            }
            if (targetVar == null) {
                if (self.area.isTypeOf(QVT!Mapping)) {
                    throw "Error! not able to find a local reference for variable " + v + " in assignemnt " + assignment + "in BottomPattern of Mapping " + self.area;  
                } else if(self.area.isTypeOf(QVT!CoreDomain)) {
                    throw "Error! not able to find a local reference for variable " + v + " in assignment " + assignment + "in BottomPattern of Domain " + self.area;  
                }  
            }
            assignment.value.fixVarReferences(targetVar);
            if (assignment.isTypeOf(QVT!PropertyAssignment)) {
                assignment.slotExpression.fixVarReferences(targetVar);
            } else if (assignment.isTypeOf(QVT!VariableAssignment)) {
                if (assignment.targetVariable.name = targetVar.name) {
                    assignment.targetVariable = targetVar;
                }
            }
        }
    }
}

/****o* QVTHelpers/fixOperationCallReferences
 * NAME
 *  fixOperationCallReferences - Fixes OperationCall's varaible references that point
 *  to variables in some other model (same name, different model)
 * FUNCTION
 *  Loops trough all the operation calls and fixes references to the variables. 
 * CONTEXT
 *  QVT!BottomPattern
 * TODO
 *  Only predicates with references to variables in other models should be checked,
 *  and then only references to varaibles in other models fixed. Add a select
 *  statement to filter these.
 */
operation QVT!BottomPattern fixOperationCallReferences() {
    for (o in self.enforcementOperation) {
        //predicate.println("Predicate ");
        var refVars =  o.operationCallExp.findReferencedVariables();
        //refVars.println("refVars ");
        // Find variables and fix references
        for (v in refVars) {
            //v.println("Fixing ");
            // MiddleGuard Pattern depends on domain guard patterns
            var targetVar = v.findReferencesInPatterns(self.asSequence());
            if (targetVar == null) {
                var searchPatterns;
                if (self.area.isTypeOf(QVT!CoreDomain)) {
                    // 1. Guard Pattern of the Domain
                    searchPatterns = self.area.rule.domain.collect(d | d.guardPattern).flatten();
                    searchPatterns.println();
                    targetVar = v.findReferencesInPatterns(searchPatterns); 
                    // 2. Bottom Pattern of domains with depending typed models
                    if (targetVar == null) {
                        searchPatterns = self.area.rule.domain.select(d | d.typedModel.dependsOn.includes(self.area.typedModel)).collect(d | d.bottomPattern).flatten();
                        targetVar = v.findReferencesInPatterns(searchPatterns); 
                    }
                } else if (self.area.isTypeOf(QVT!Mapping)) {
                    // 1. Guard Pattern of the Mapping
                    searchPatterns = self.area.guardPattern.asSequence();
                    targetVar = v.findReferencesInPatterns(searchPatterns); 
                    // 2. Mapping's domain bottom pattern
                    if (targetVar == null) {
                        searchPatterns = self.area.domain.collect(d | d.bottomPattern).flatten();
                        targetVar = v.findReferencesInPatterns(searchPatterns); 
                        if (targetVar == null) {
                            // 3. Mapping's domain guard patterns
                            searchPatterns = self.area.domain.collect(d | d.guardPattern).flatten();
                            targetVar = v.findReferencesInPatterns(searchPatterns); 
                        }
                    }
                }
                if (targetVar == null) {
                    // Search in the context
                    searchPatterns = self.area.getContextMappingPatterns();
                    targetVar = v.findReferencesInPatterns(searchPatterns);
                }
            }
            if (targetVar == null) {
                if (self.area.isTypeOf(QVT!Mapping)) {
                    throw "Error! not able to find a local reference for variable " + v + " in operation " + o + "in BottomPattern of Mapping " + self.area;  
                } else if(self.area.isTypeOf(QVT!CoreDomain)) {
                    throw "Error! not able to find a local reference for variable " + v + " in operation " + o + "in BottomPattern of Domain " + self.area;  
                }  
            }
            o.operationCallExp.fixVarReferences(targetVar);
        }
    }
}

/****o* QVTHelpers/findReferencesInPatterns
 * NAME
 *  findReferencesInPatterns - Searches in the patterns for a reference to a 
 *  variable with the same name as this.
 * CONTEXT
 *  QVT!Variable  The variable to search
 * PARAMETERS
 *  patterns The collection of patterns to seach in
 * RESULT
 *  A reference to the varaible if found. null otherwise.
 */
operation QVT!Variable findReferencesInPatterns(patterns : Sequence) : QVT!Variable {
    
    var targetVar = null;
    for (p in patterns) {
        targetVar = p.findVariableByName(self);
        if (targetVar <> null) {
           break;
        }
    }
    return targetVar;
}

/****o* QVTHelpers/findVariableByName
 * NAME
 *  findVariableByName - Find all variables in the pattern that match the input 
 *  variable by name 
 * CONTEXT
 *  QVT!GuardPattern  The pattern to search
 * ANNOTATIONS
 *  cached
 * TODO
 *  If the QVT model had a getAllVariables() method that returned variables and
 *  realized variables, these two methods could be combined. 
 */
@cached
operation QVT!GuardPattern findVariableByName(variable : QVT!TypedElement) {
    
    return self.variable.selectOne(lv | lv.name == variable.name);
}

/****o* QVTHelpers/findVariableByName
 * NAME
 *  findVariableByName - Find all variables in the pattern that match the input 
 *  variable by name 
 * CONTEXT
 *  QVT!GuardPattern  The pattern to search
 * ANNOTATIONS
 *  cached
 * TODO
 *  If the QVT model had a getAllVariables() method that returned variables and
 *  realized variables, these two methods could be combined. 
 */
@cached
operation QVT!BottomPattern findVariableByName(variable : QVT!TypedElement) {
    
    return self.variable.includingAll(self.realizedVariable).selectOne(lv | lv.name == variable.name);
}


/****o* QVTHelpers/isContainer
 * NAME
 *  isContainer - Indicates if the property is a containment relation
 *  by name 
 * CONTEXT
 *  QVT!Property  The property
 * ANNOTATIONS
 *  cached
 */
@cached
operation QVT!Property isContainer() : Boolean {
    if (self.getOpposite().isDefined()) {
        return self.getOpposite().isComposite();
    } else {
        return false;
    }
}

/****o* QVTHelpers/hasNavigableOpposite
 * NAME
 *  hasNavigableOpposite - Indicates if the property has a navigable opposite
 * FUNCTION
 *  The property has a navigable opposite if the opposite relation is defined
 *  and if that relation has a many multiplicity.   
 * CONTEXT
 *  QVT!Property  The property
 * ANNOTATIONS
 *  cached
 */
operation QVT!Property hasNavigableOpposite() : Boolean {
    return self.opposite.isDefined() and not self.opposite.isMany(); 
}

/****o* QVTHelpers/getDataTypeUses
 * NAME
 *  getDataTypeUses - Returns a sequence of {Type, Attribtye} pairs whos
 *  value is assigned from a DataType.
 * FUNCTION
 *  Identifies all the assignments in which the value part is a variable whos type
 *  is a DataType and for each, it creates a {Type, Attribtye} pair that saves the 
 *  information about what attribute of what Type was being assigned. 
 * CONTEXT
 *  QVT!Mapping  The mapping under test
 * ANNOTATIONS
 *  cached
 * SEE ALSO
 *
 */    
operation QVT!Mapping hasDataTypeUse(values : Sequence) : Boolean {
    var pivotUtil = new Native("org.eclipse.qvtd.build.etl.PivotUtil");
    //self.name.println();
    // Get all the assignments that hava a value that is a PropertyCallExp in which
    // the source is of the type and the referredProperty is the same
    if (self.getAllAssignments().exists(a | a.value.isTypeOf(QVT!PropertyCallExp)
            and a.value.source.isTypeOf(QVT!VariableExp) and pivotUtil.isKindOf(values.first(), a.value.source.type) 
            and a.value.referredProperty == values.last())) {
        return true;        
    }
    for (p in self.getAllPredicates()) {
        // Any of the arguments can be the use
        if (p.conditionExpression.isKindOf(QVT!OperationCallExp)) {
            //p.conditionExpression.toString().println();
            for (a in p.conditionExpression.argument.select(a | a.isTypeOf(QVT!PropertyCallExp))) {
                if (a.source.type == values.first() and a.referredProperty == values.last()) {
                    return true;
                }
            }
            if (pivotUtil.isKindOf(values.first(), p.conditionExpression.source.source.type ) and p.conditionExpression.source.referredProperty == values.last()) {
                return true;
            }
        }
    }
    return false;
}    

/****o* QVTHelpers/hasRelation
  *  NAME
  *   hasRelation -- Identify relations between variables
  *  SYNOPSIS
  *   relations =  var1.hasRelation(var2);
  *  FUNCTION
  *   Analysies the predicates and assignments of the mapping that contains the 
  *   variables and looks for relations of the form:  var1.att = var2. If found,
  *   the operation returns the attribute that relates the variables.    
  *  CONTEXT
  *     QVT!Variable
  *  PARAMETERS
  *    variable - variable to analyze relations against: variable.att = self
  *  RESULT
  *    Any  - The EReference that relates the variables, null if not existant
  *   TODO
  *   It may be usefull to divide this into hasPredicateRelation and hasAssignmentRelation
  *   so we have more controll over what relations we are looking for.
  *
  */
operation QVT!Variable hasRelation(other : QVT!Variable) : Bag {
    
    // Fin predicates and assignemnts that only refer the two variables and
    // return the properties that relate them
    return self.oppositePattern().area.rule.guardPattern.predicate
        .select(p | p.conditionExpression.isSimpleAttributeNavigation()
                and p.conditionExpression.isArgumentVariable(other)
                and p.conditionExpression.isSourceVariable(self))
        .collect(p | p.conditionExpression.getReferredProperty())
        .includingAll(
            self.oppositePattern().area.rule.bottomPattern.assignment
            .select(a | a.isSimpleAttributeNavigation()
                and a.slotExpression.referredVariable == self
                and a.value.referredVariable == other)
            .collect(a | a.targetProperty())
        );
}

/****o* QVTHelpers/getUnidirComment 
 * NAME
 *  getUnidirComment - Returns a string that contains a comment to state the
 *  direction and mode in which the transformation was invoked
 */ 
operation getUnidirComment() : String {
    var comment : String = "/* ";
    if (config!Configuration.all.first().mode == config!Mode#enforcement) {
        comment = comment + "Enforce ";
    } else {
        comment = comment + "Check ";
    }
    comment = comment + config!Configuration.all.first().inputDirection.name + " to ";
    comment = comment + config!Configuration.all.first().outputDirection.collect(d | d.name).concat(",") + " */";
    return comment; 
}

// ========================================================= move to qvtimperative model

/** 
 * Returns the tranformation of a mapping. Does a bottom up recursive search
 */
operation QVT!Mapping getTransforamtion() : QVT!Transformation {
    if (self.transformation.isDefined()) {
        return self.transformation;
    } else if (self.context.isDefined()) {
        return self.context.getTransforamtion();
    } else {
        self.err("Cotextless mapping ");
    }
}
 /* this can be getAllPatterns, see how is is called for all atributes with super classes */
@cached
operation QVT!Area getContextMappingPatterns() : Sequence {

    var mapping;
    if (self.isTypeOf(QVT!CoreDomain)) {
        mapping = self.rule;
    } else if (self.isTypeOf(QVT!Mapping)) {
        mapping = self;
    }
    var searchPatterns = new Sequence;
    if (mapping.context.isDefined()) {
        searchPatterns.addAll(mapping.context.domain.collect(d | d.guardPattern).flatten());
        searchPatterns.addAll(mapping.context.domain.collect(d | d.bottomPattern).flatten());
        searchPatterns.add(mapping.context.guardPattern);
        searchPatterns.add(mapping.context.bottomPattern);
        searchPatterns.addAll(mapping.context.getContextMappingPatterns());
    }
    return searchPatterns;

}

/****o* QVTHelpers/getInputVariables
 * NAME
 *  getInputVariables - Returns the input variables of the Mapping, excluding DataType
 *  variables
 *
 * CONTEXT
 *  QVT!Rule  The mapping
 * ANNOTATIONS
 *  cached
 * SEE ALSO
 *  /org.eclipse.qvtd.build.etl/helpers/QVTHelpers/getOutputVariables
 */
@cached
operation QVT!Rule getInputVariables() : Sequence {
    
    var vars: Sequence;
    vars = self.guardPattern.variable
        .includingAll(self.domain.collect(d | d.guardPattern).flatten().collect(gp | gp.variable).flatten()
                     ).asSequence();
    //for (l in self.local) {
    //    vars = vars.includingAll(l.getInputVars());
    //}
    // QVTc, QVTu, QVTm: Do the same for all refined rules
    //for (r in self.refinement) {
    //    vars = vars.includingAll(r.getInputVars());
    //}
    return vars;
}

/****o* QVTHelpers/getOutputVariables
 * NAME
 *  getOutputVariables - Returns the output variables of the Mapping, excluding 
 *  DataType variables
 * FUNCTION
 *  It only works for QVTm/QVTi as is does not check for nested mappings. Variables
 *  of  PrimitiveTypes are ignored.
 * CONTEXT
 *  QVT!Rule  The mapping
 * ANNOTATIONS
 *  cached
 * SEE ALSO
 *  QVTHelpers/getInputVariables
 */
@cached
operation QVT!Rule getOutputVariables() : Set {
    
    var vars: Set;
    vars = self.bottomPattern.realizedVariable
        .includingAll(self.domain.collect(d | d.bottomPattern).flatten().collect(gp | gp.realizedVariable).flatten());
    //for (l in self.local) {
    //    vars = vars.includingAll(l.getInputVars());
    //}
    // QVTc, QVTu, QVTm: Do the same for all refined rules
    //for (r in self.refinement) {
    //    vars = vars.includingAll(r.getInputVars());
    //}
    return vars;
}

operation QVT!Rule getAllVariables() {
    return self.getInputVariables().includingAll(self.getOutputVariables());
}

operation QVT!Transformation getAllVariables() {
}


/****o* QVTHelpers/getAllAssignments
 * NAME
 *  getAllAssignments - Returns all the assignments of the mapping
 *
 * CONTEXT
 *  QVT!Mapping  The mapping
 * ANNOTATIONS
 *  cached
 * SEE ALSO
 *  /org.eclipse.qvtd.build.etl/helpers/QVTHelpers/
 */
 /* TODO Added the commented code to add it to QVTc/u/m model */
@cached
operation QVT!Mapping getAllAssignments() : Sequence {
    var asgs : Sequence;
    asgs.addAll(self.bottomPattern.assignment);
    for (d in self.domain) {
        asgs.addAll(d.bottomPattern.assignment);
    }
    //for (l in self.local) {
    //    asgs.addAll(l.getAllAssignments());
    //}
    return asgs;
}


/****o* QVTHelpers/getAllPredicates
 * NAME
 *  getAllPredicates - Returns all the predicates of the mapping
 *
 * CONTEXT
 *  QVT!Mapping  The mapping
 * ANNOTATIONS
 *  cached
 * SEE ALSO
 *  /org.eclipse.qvtd.build.etl/helpers/QVTHelpers/
 */
/* TODO Added the commented code to add it to QVTc/u/m model */
@cached
operation QVT!Mapping getAllPredicates() : Sequence {
    var pdcts : Sequence;
    pdcts.addAll(self.bottomPattern.predicate);
    pdcts.addAll(self.guardPattern.predicate);
    for (d in self.domain) {
        pdcts.addAll(d.bottomPattern.predicate);
        pdcts.addAll(d.guardPattern.predicate);
    }
    //for (l in self.local) {
    //    pdcts.addAll(l.getAllPredicates());
    //}
    return pdcts;
}

/****o* QVTHelpers/getPrimitiveDataTypeAssignemnts
 * NAME
 *  getPrimitiveDataTypeAssignemnts - Returns all the property assignments of 
 *  the mapping were the value is a variable with a primitive data type, i.e.,
 *    varA.property = 'PrimitiveDataType'
 *
 * CONTEXT
 *  QVT!Mapping  The mapping
 * ANNOTATIONS
 *  cached
 * SEE ALSO
 *  /org.eclipse.qvtd.build.etl/helpers/QVTHelpers/isPrimitivePropertyAssignemnt
 */
@cached
operation QVT!Mapping getPrimitiveDataTypeAssignemnts() : Sequence {
	
	return self.getAllAssignments()
		.select(a | a.isPrimitivePropertyAssignemnt());
}


/****o* QVTHelpers/isSimpleAttributeNavigation
 * NAME
 *  getAllPredicates - Determine if the Assignemnts is of the form 
 *    varA.attribute := varB
 *  1. The Assignment must be an Attribute assignment
 *  2. The slot operation must be a VariableExp
 *  3. The value must be VariableExp
 * 
 * CONTEXT
 *  QVT!Assignment  The assignement to test
 * ANNOTATIONS
 *  cached
 * SEE ALSO
 *  /org.eclipse.qvtd.build.etl/helpers/QVTHelpers/
 */
operation QVT!Assignment isSimpleAttributeNavigation() : Boolean {

	return self.isTypeOf(QVT!PropertyAssignment)
		and self.slotExpression.isTypeOf(QVT!VariableExp)
		and self.value.isTypeOf(QVT!VariableExp);
}

/****o* /org.eclipse.qvtd.build.etl/helpers/QVTHelpers/isPrimitivePropertyAssignemnt 
 * NAME
 *  isPrimitivePropertyAssignemnt - Determine if the Assignemnts assigns a primitive
 *  data type
 *  
 * CONTEXT
 *  QVT!Assignment  The assignement to test
 * ANNOTATIONS
 *  cached
 * SEE ALSO
 *  QVTHelpers/isSimpleAttributeNavigation
 */
operation QVT!Assignment isPrimitivePropertyAssignemnt() : Boolean {
    
    return self.isSimpleAttributeNavigation()
    	and self.value.type.isTypeOf(QVT!PrimitiveType);
}


