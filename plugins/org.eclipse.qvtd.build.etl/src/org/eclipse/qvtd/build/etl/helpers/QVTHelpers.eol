/*******************************************************************************
 * Copyright (c) 2013 The University of York and Willink Transformations.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos - initial implementation
 ******************************************************************************/

/****l* /org.eclipse.qvtd.build.etl/helpers/QVTHelpers
 * NAME
 *  QVTiDependenceAnalysis -- A set of operations to query, format, interpret, 
 *  etc., information from a QVTc model. 
 * NOTES
 *  Some of this operations can/should be moved to the QVTcore model/code 
 * SEE ALSO
 *    
 */

/**
 * Returns true if the area is of type QVT!CoreDomain and it's TypedModel is the
 * input domain.
 * <p>
 * The operation is @chached to improve performance.
 * @param area the area to be tested
 */
@chached
operation isInputDomain(area : QVT!Area) : Boolean {
    return area.isTypeOf(QVT!CoreDomain) and
        config!Configuration.all.first().inputDirection.name == area.typedModel.name;
}

/**
 * Returns true if the area is of type QVT!Mapping.
 * <p>
 * The operation is @chached to improve performance.
 * @param area the area to be tested
 */
@chached
operation isMiddleDomain(area : QVT!Area) : Boolean {
    return area.isTypeOf(QVT!Mapping);
}

/**
 * Returns true if the area is of type QVT!CoreDomain and it's TypedModel is any
 * of the output domains.
 * <p>
 * The operation is @chached to improve performance.
 * @param area the area to be tested
 */
@chached
operation isOutputDomain(area : QVT!Area) : Boolean {
    return area.isTypeOf(QVT!CoreDomain) and
        config!Configuration.all.first().outputDirection.collect(od | od.name).includes(area.typedModel.name);
}

/**
 * Returns true if the transformation is invoked in check mode.
 */
operation isCheckMode() : Boolean {
    return config!Configuration.all.first().mode == config!Mode#checking;
}

/**
 * Returns true if the transformation is invoked in enforce mode.
 */
operation isEnforceMode() : Boolean {
    return config!Configuration.all.first().mode == config!Mode#enforcement;
}

/** 
 * Returns the tranformation of a mapping. Does a bottom up recursive search
 */
operation QVT!Mapping getTransforamtion() : QVT!Transformation {
    if (self.transformation.isDefined()) {
        return self.transformation;
    } else if (self.context.isDefined()) {
        return self.context.getTransforamtion();
    } else {
        self.err("Cotextless mapping ");
    }
}

/**
 * Returns the typed model of a tranformation that corresponds to the middle
 * model.
 */
operation QVT!Transformation getMiddleTypedModel() : QVT!TypedModel {

    return self.modelParameter.selectOne(tm | tm.name = config!Configuration.all.first().middle.name);
}

/**
 * Returns the pattern to which a variable belongs.
 * <p>
 * The operation is @chached to improve performance.
 */
@cached
operation QVT!Variable oppositePattern() : QVT!CorePattern  {
    
    if(self.isTypeOf(QVT!Variable)) {
        return QVT!CorePattern.all.selectOne(p |p.variable.includes(self));
    } else if (self.isTypeOf(QVT!RealizedVariable)) {
        return QVT!BottomPattern.all.selectOne(p |p.realizedVariable.includes(self));
    }
}

/**
 * Returns the area that defines the environment of an OCL expression. The results
 * depends on the type of the OCL expression. 
 * <p>
 * The operation is @chached to improve performance.
 */
@cached
operation QVT!OCLExpression getArea() : QVT!Area {
    if (self.isTypeOf(QVT!VariableExp)) {
        if (self.referredVariable.type() == null) {
            return null;
        }
        return self.referredVariable.oppositePattern().area;
    } else if (self.isKindOf(QVT!CallExp)) {
        return self.source.getArea();
    } else if (self.isTypeOf(QVT!IfExp)) {
        return self.condition.getArea();
    } else if (self.isKindOf(QVT!LiteralExp)) {
        return null;
    } else {
        self.println();
        throw "Error! Add getArea for " + self.type();
    }
    return null;
}

/**
 * Returns the set of variables used in the OCL expression. 
 */
operation QVT!OCLExpression findReferencedVariables() : Set {
    return self.findReferencedVariables(Set{});
}

/**
 * Returns the set of variables used in the OCL expression, ignoring the
 * variables in the ignore set. Usefull for analyzing IteratorExp
 */
operation QVT!OCLExpression findReferencedVariables(ignore : Set) : Set {
    var varRefs : Set();
    if (self.isTypeOf(QVT!VariableExp)) {
        varRefs.add(self.referredVariable);
    } else if (self.isTypeOf(QVT!OperationCallExp)) {
        varRefs.addAll(self.source.findReferencedVariables());
        for (arg in self.argument) {
            varRefs.addAll(arg.findReferencedVariables());
        }
    } else if (self.isTypeOf(QVT!PropertyCallExp)) {
        varRefs.addAll(self.source.findReferencedVariables());
    } else if (self.isTypeOf(QVT!IfExp)) {
        varRefs.addAll(self.condition.findReferencedVariables());
        varRefs.addAll(self.elseExpression.findReferencedVariables());
        varRefs.addAll(self.thenExpression.findReferencedVariables());
    } else if (self.isTypeOf(QVT!CollectionLiteralExp)) {
        // TODO Check that it is a collection of variables. 
        // TODO what if it is a collection of collections or other OCL types?
        for (p in self.part) {
            if (p.isTypeOf(QVT!CollectionItem)) {
                varRefs.addAll(p.item.findReferencedVariables());
            } else if (p.isTypeOf(QVT!CollectionRange)) {
                varRefs.addAll(p.first);
                varRefs.addAll(p.last);
            } else {
                self.println();
                throw "Error! Add findReferencedVariables() for " + p.type() + " in collections";
            }
        }
    } else if (self.isKindOf(QVT!IteratorExp)) {
        // Ignore iterator variables
        varRefs.addAll(self.body.findReferencedVariables(self.iterator));
        varRefs.addAll(self.source.findReferencedVariables());
    } else if (self.isKindOf(QVT!LiteralExp)) {
      // Noting to add
    } else {
        self.println();
        throw "Error! Add findReferencedVariables() for " + self.type();
    }
    return varRefs.excludingAll(ignore);
}

/**
 * Returns the set of variables used in the assignemnt 
 */
operation QVT!Assignment findReferencedVariables() : Set {
    
    var varRefs : Set();
    varRefs = self.value.findReferencedVariables();
    if (self.isTypeOf(QVT!PropertyAssignment)) {
        varRefs.addAll(self.slotExpression.findReferencedVariables());
    } else if (self.isTypeOf(QVT!VariableAssignment)) {
        varRefs.add(self.targetVariable);
    }
    return varRefs;
}

/**
 * Fixes all references to a variable within the OCL expression. The v argument
 * is the variable for which the references must be fixed.
 * 
 * @param v the variable for which the references must be fixed.
 */
operation QVT!OCLExpression fixVarReferences(v : QVT!Variable) {
    if (self.isTypeOf(QVT!VariableExp)) {
        if (self.referredVariable.name = v.name) {
            self.referredVariable = v;
        }
    } else if (self.isTypeOf(QVT!OperationCallExp)) {
        self.source.fixVarReferences(v);
        for (arg in self.argument) {
           arg.fixVarReferences(v);
        }
    } else if (self.isTypeOf(QVT!PropertyCallExp)) {
        self.source.fixVarReferences(v);
    } else if (self.isTypeOf(QVT!IfExp)) {
        self.condition.fixVarReferences(v);
        self.elseExpression.fixVarReferences(v);
        self.thenExpression.fixVarReferences(v);
    } else if (self.isTypeOf(QVT!CollectionLiteralExp)) {
        for (p in self.part) {
            if (p.isTypeOf(QVT!CollectionItem)) {
                p.item.fixVarReferences(v);
            } else if (p.isTypeOf(QVT!CollectionRange)) {
                p.first.fixVarReferences(v);
                p.last.fixVarReferences(v);
            } 
        } 
        
    } else if (self.isKindOf(QVT!LiteralExp)) {
      // Noting to fix
    } else if (self.isKindOf(QVT!IteratorExp)) {
        self.body.fixVarReferences(v);
        self.source.fixVarReferences(v);
    } else {
        self.println();
        throw "Error! Add fixVarReference() for " + self.type();
    }
 }
 
/**
 * Retypes a variable to the less abstract type of all variables in the patterns
 * with the same name.
 *
 * @param patterns the patterns to look for variables with the same name 
 */  
operation QVT!Variable retypeVar(pattern : QVT!Pattern) {
    var refinedVars = pattern.variable.select(
                    v | v.name == self.name
                    );
    if (refinedVars.size() > 0) {
        var x = new Native("org.eclipse.qvtd.build.etl.PivotUtil");
        var lrv = x.getLowestRankVariable(refinedVars.including(self));
        self.type = lrv.type;
    }
}

/**
 * Retypes a realized variable to the less abstract type of all variables in the
 * bottom patterns with the same name.
 *
 * @param patterns the patterns to look for variables with the same name 
 */  
operation QVT!Variable retypeRealizedVar(pattern : QVT!Pattern) {
    var refinedVars = pattern.realizedVariable.select(
                    v | v.name == self.name
                    );
    if (refinedVars.size() > 0) {
        var x = new Native("org.eclipse.qvtd.build.etl.PivotUtil");
        var lrv = x.getLowestRankVariable(refinedVars.including(self));
        self.type = lrv.type;
    }
}

operation QVT!GuardPattern fixPredicateVarReferences() {
    for (predicate in self.predicate) {
        //predicate.println("Predicate ");
        var refVars =  predicate.findReferencedVariables();
        //refVars.println("refVars ");
        // Find variables and fix references
        for (v in refVars) {
            //v.println("Fixing ");
            var targetVar = v.findReferencesInPatterns(self.asSequence());
            if (targetVar == null) {
                var searchPatterns;
                if (self.area.isTypeOf(QVT!CoreDomain)) {
                    // Domain guard patterns depend on guard patterns of domains with depending typed models
                    searchPatterns = self.area.rule.domain.select(d | d.typedModel.dependsOn.includes(self.area.typedModel)).collect(d | d.guardPattern).flatten();
                } else if (self.area.isTypeOf(QVT!Mapping)) {
                    // 1. Mapping's domain guard patterns
                    searchPatterns = self.area.domain.collect(d | d.guardPattern).flatten();
                }
                targetVar = v.findReferencesInPatterns(searchPatterns);
                if (targetVar == null) {
                    // Search in the context
                    searchPatterns = self.area.getContextMappingPatterns();
                    targetVar = v.findReferencesInPatterns(searchPatterns);
                }
            }
            if (targetVar == null) {
                if (self.area.isTypeOf(QVT!Mapping)) {
                    throw "Error! not able to find a local reference for variable " + v + " in predicate " + predicate + " in GuardPattern of Mapping " + self.area;  
                } else if(self.area.isTypeOf(QVT!CoreDomain)) {
                    throw "Error! not able to find a local reference for variable " + v + " in predicate " + predicate + " in GuardPattern of Domain " + self.area;  
                }  
            }
            //targetVar.println("local ");
            predicate.conditionExpression.fixVarReferences(targetVar);
        }
    }
}


operation QVT!BottomPattern fixPredicateVarReferences() {
    
    for (predicate in self.predicate) {
        //predicate.println("Predicate ");
        var refVars =  predicate.findReferencedVariables();
        //refVars.println("refVars ");
        // Find variables and fix references
        for (v in refVars) {
            //v.println("Fixing ");
            // MiddleGuard Pattern depends on domain guard patterns
            var targetVar = v.findReferencesInPatterns(self.asSequence());
            if (targetVar == null) {
                var searchPatterns : Sequence;
                if (self.area.isTypeOf(QVT!CoreDomain)) {
                    // 1. Guard Pattern of the Domain
                    searchPatterns = self.area.rule.domain.collect(d | d.guardPattern).flatten();
                    targetVar = v.findReferencesInPatterns(searchPatterns); 
                    // 2. Bottom Pattern of domains with depending typed models
                    if (targetVar == null) {
                        searchPatterns = self.area.rule.domain.select(d | d.typedModel.dependsOn.includes(self.area.typedModel)).collect(d | d.bottomPattern).flatten();
                        targetVar = v.findReferencesInPatterns(searchPatterns); 
                    }
                    
                } else if (self.area.isTypeOf(QVT!Mapping)) {
                    // 1. Guard Pattern of the Mapping
                    searchPatterns = self.area.guardPattern.asSequence();
                    targetVar = v.findReferencesInPatterns(searchPatterns); 
                    // 2. Mapping's domain bottom pattern
                    if (targetVar == null) {
                        searchPatterns = self.area.domain.collect(d | d.bottomPattern).flatten();
                        targetVar = v.findReferencesInPatterns(searchPatterns); 
                        if (targetVar == null) {
                            // 3. Mapping's domain guard patterns
                            searchPatterns = self.area.domain.collect(d | d.guardPattern).flatten();
                            targetVar = v.findReferencesInPatterns(searchPatterns); 
                        }
                    }
                }
                if (targetVar == null) {
                    // Search in the context
                    searchPatterns = self.area.getContextMappingPatterns();
                    targetVar = v.findReferencesInPatterns(searchPatterns);
                }
            }
            if (targetVar == null) {
                if (self.area.isTypeOf(QVT!Mapping)) {
                    throw "Error! not able to find a local reference for variable " + v + " in predicate " + predicate + "in BottomPattern of Mapping " + self.area;  
                } else if(self.area.isTypeOf(QVT!CoreDomain)) {
                    throw "Error! not able to find a local reference for variable " + v + " in predicate " + predicate + "in BottomPattern of Domain " + self.area;  
                }  
            }
            predicate.conditionExpression.fixVarReferences(targetVar);
        }
    }
}



operation QVT!BottomPattern fixAssignmentVarReferences() {
    for (assignment in self.assignment) {
        //assignment.println("Assignment ");
        var refVars =  assignment.findReferencedVariables();
        //refVars.println("refVars ");
        // Find variables and fix references
        for (v in refVars) {
            //v.println("Fixing ");
            // MiddleGuard Pattern depends on domain guard patterns
            var targetVar = v.findReferencesInPatterns(self.asSequence());
            if (targetVar == null) {
                var searchPatterns;
                if (self.area.isTypeOf(QVT!CoreDomain)) {
                    // 1. Guard Pattern of the Domain
                    searchPatterns = self.area.rule.domain.collect(d | d.guardPattern).flatten();
                    targetVar = v.findReferencesInPatterns(searchPatterns); 
                    // 2. Bottom Pattern of domains with depending typed models
                    if (targetVar == null) {
                        searchPatterns = self.area.rule.domain.select(d | d.typedModel.dependsOn.includes(self.area.typedModel)).collect(d | d.bottomPattern).flatten();
                        targetVar = v.findReferencesInPatterns(searchPatterns); 
                    }
                } else if (self.area.isTypeOf(QVT!Mapping)) {
                    // 1. Guard Pattern of the Mapping
                    searchPatterns = self.area.guardPattern.asSequence();
                    targetVar = v.findReferencesInPatterns(searchPatterns); 
                    // 2. Mapping's domain bottom pattern
                    if (targetVar == null) {
                        searchPatterns = self.area.domain.collect(d | d.bottomPattern).flatten();
                        targetVar = v.findReferencesInPatterns(searchPatterns); 
                        if (targetVar == null) {
                            // 3. Mapping's domain guard patterns
                            searchPatterns = self.area.domain.collect(d | d.guardPattern).flatten();
                            targetVar = v.findReferencesInPatterns(searchPatterns); 
                        }
                    }
                }
                if (targetVar == null) {
                    // Search in the context
                    searchPatterns = self.area.getContextMappingPatterns();
                    targetVar = v.findReferencesInPatterns(searchPatterns);
                }
            }
            if (targetVar == null) {
                if (self.area.isTypeOf(QVT!Mapping)) {
                    throw "Error! not able to find a local reference for variable " + v + " in assignemnt " + assignment + "in BottomPattern of Mapping " + self.area;  
                } else if(self.area.isTypeOf(QVT!CoreDomain)) {
                    throw "Error! not able to find a local reference for variable " + v + " in assignment " + assignment + "in BottomPattern of Domain " + self.area;  
                }  
            }
            assignment.value.fixVarReferences(targetVar);
            if (assignment.isTypeOf(QVT!PropertyAssignment)) {
                assignment.slotExpression.fixVarReferences(targetVar);
            } else if (assignment.isTypeOf(QVT!VariableAssignment)) {
                if (assignment.targetVariable.name = targetVar.name) {
                    assignment.targetVariable = targetVar;
                }
            }
        }
    }
}

operation QVT!BottomPattern fixOperationCallReferences() {
    for (o in self.enforcementOperation) {
        //predicate.println("Predicate ");
        var refVars =  o.operationCallExp.findReferencedVariables();
        //refVars.println("refVars ");
        // Find variables and fix references
        for (v in refVars) {
            //v.println("Fixing ");
            // MiddleGuard Pattern depends on domain guard patterns
            var targetVar = v.findReferencesInPatterns(self.asSequence());
            if (targetVar == null) {
                var searchPatterns;
                if (self.area.isTypeOf(QVT!CoreDomain)) {
                    // 1. Guard Pattern of the Domain
                    searchPatterns = self.area.rule.domain.collect(d | d.guardPattern).flatten();
                    searchPatterns.println();
                    targetVar = v.findReferencesInPatterns(searchPatterns); 
                    // 2. Bottom Pattern of domains with depending typed models
                    if (targetVar == null) {
                        searchPatterns = self.area.rule.domain.select(d | d.typedModel.dependsOn.includes(self.area.typedModel)).collect(d | d.bottomPattern).flatten();
                        targetVar = v.findReferencesInPatterns(searchPatterns); 
                    }
                } else if (self.area.isTypeOf(QVT!Mapping)) {
                    // 1. Guard Pattern of the Mapping
                    searchPatterns = self.area.guardPattern.asSequence();
                    targetVar = v.findReferencesInPatterns(searchPatterns); 
                    // 2. Mapping's domain bottom pattern
                    if (targetVar == null) {
                        searchPatterns = self.area.domain.collect(d | d.bottomPattern).flatten();
                        targetVar = v.findReferencesInPatterns(searchPatterns); 
                        if (targetVar == null) {
                            // 3. Mapping's domain guard patterns
                            searchPatterns = self.area.domain.collect(d | d.guardPattern).flatten();
                            targetVar = v.findReferencesInPatterns(searchPatterns); 
                        }
                    }
                }
                if (targetVar == null) {
                    // Search in the context
                    searchPatterns = self.area.getContextMappingPatterns();
                    targetVar = v.findReferencesInPatterns(searchPatterns);
                }
            }
            if (targetVar == null) {
                if (self.area.isTypeOf(QVT!Mapping)) {
                    throw "Error! not able to find a local reference for variable " + v + " in operation " + o + "in BottomPattern of Mapping " + self.area;  
                } else if(self.area.isTypeOf(QVT!CoreDomain)) {
                    throw "Error! not able to find a local reference for variable " + v + " in operation " + o + "in BottomPattern of Domain " + self.area;  
                }  
            }
            o.operationCallExp.fixVarReferences(targetVar);
        }
    }
}

/**
 * Finds all variables referenced in a set of Pattern by finding all references
 * each of the patterns.
 */
operation QVT!Variable findReferencesInPatterns(patterns : Sequence) {
    
    var targetVar = null;
    for (p in patterns) {
        targetVar = p.findVariable(self);
        if (targetVar <> null) {
           return targetVar;
        }
    }
}


/**
 * Finds all variables referenced in a Preicate.
 */
@cached
operation QVT!Predicate findReferencedVariables() : Collection {
    return self.conditionExpression.findReferencedVariables();
}

/**
 * Finds all variables referenced in a Pattern by finding all references in
 * the pattern's predicates.
 */
@cached
operation QVT!GuardPattern findVariable(variable : QVT!TypedElement) {
    
    return self.variable.selectOne(lv | lv.name == variable.name);
}

@cached
operation QVT!BottomPattern findVariable(variable : QVT!TypedElement) {
    
    return self.variable.includingAll(self.realizedVariable).selectOne(lv | lv.name == variable.name);
}

@cached
operation QVT!Area getContextMappingPatterns() : Sequence {

    var mapping;
    if (self.isTypeOf(QVT!CoreDomain)) {
        mapping = self.rule;
    } else if (self.isTypeOf(QVT!Mapping)) {
        mapping = self;
    }
    var searchPatterns = new Sequence;
    if (mapping.context.isDefined()) {
        searchPatterns.addAll(mapping.context.domain.collect(d | d.guardPattern).flatten());
        searchPatterns.addAll(mapping.context.domain.collect(d | d.bottomPattern).flatten());
        searchPatterns.add(mapping.context.guardPattern);
        searchPatterns.add(mapping.context.bottomPattern);
        searchPatterns.addAll(mapping.context.getContextMappingPatterns());
    }
    return searchPatterns;
}

@cached
operation QVT!Rule getInputVars() : Set {
    
    var vars;
    vars = self.guardPattern.variable
        .includingAll(self.domain.collect(d | d.guardPattern).flatten().collect(gp | gp.variable).flatten());
    for (l in self.local) {
        vars = vars.includingAll(l.getInputVars());
    }
    // QVTc, QVTu, QVTm: Do the same for all refined rules
    //for (r in self.refinement) {
    //    vars = vars.includingAll(r.getInputVars());
    //}
    return vars;
}

@cached
operation QVT!Rule getOutputVars() : Set {
    
    var vars;
    vars = self.bottomPattern.realizedVariable
        .includingAll(self.domain.collect(d | d.bottomPattern).flatten().collect(bp | bp.realizedVariable).flatten());
    for (l in self.local) {
        vars = vars.includingAll(l.getOutputVars());
    }
    //for (r in self.refinement) {
    //    vars = vars.includingAll(r.getOutputVars());
    //}
    return vars;
}


@cached
operation QVT!Property isContainer() : Boolean {
    if (self.getOpposite().isDefined()) {
        return self.getOpposite().isComposite();
    } else {
        return false;
    }
}

operation QVT!Property hasNavigableOpposite() : Boolean {
    self.println("hasNavigableOpposite ");
    if (self.getOpposite().isDefined()) {
        self.getOpposite().println("oposite ");
        self.getOpposite().getType().getUpperValue().println("uppervalue ");
        if (self.getOpposite().getType().getUpperValue().isDefined()) {
            // TODO Also check for numbers > 1
             
            return not (self.getOpposite().getType().getUpperValue().asString() == "*");
        }
        return true;
    } else {
        return false;
    }
}

@cached
operation QVT!Mapping getAllAssignments() : Set {
    var asgs : Set;
    asgs.addAll(self.bottomPattern.assignment);
    for (d in self.domain) {
        asgs.addAll(d.bottomPattern.assignment);
    }
    return asgs;
}
 
/**
 * Returns the comment added to state the direction in which the transformation
 * was invoked.
 *
 */  
operation getUnidirComment() : String {
    var comment : String = "/* ";
    if (config!Configuration.all.first().mode == config!Mode#enforcement) {
        comment = comment + "Enforce ";
    } else {
        comment = comment + "Check ";
    }
    comment = comment + config!Configuration.all.first().inputDirection.name + " to ";
    comment = comment + config!Configuration.all.first().outputDirection.collect(d | d.name).concat(",") + " */";
    return comment; 
}