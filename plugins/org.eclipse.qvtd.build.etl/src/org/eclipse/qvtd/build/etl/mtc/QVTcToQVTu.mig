// Input Domain
migrate CoreDomain
    when : original.name == "upperGraph" {
	    
	    migrated.isCheckable = false;
	    migrated.isEnforceable = false;
    }

// Core Domain
migrate CoreDomain
    when : original.name <> "upperGraph" {
	    
	    // TODO this should be global vars somehow
	    var isCreate = new Boolean;
	    isCreate = true;
	    
	    if (isCreate) {
	        migrated.isCheckable = false;
	    }
    }

// Make sure variables and predicates are contained in the pattern    
migrate BottomPattern 
    when : original.area.name == "upperGraph" {
    migrated.variable = original.realizedVariable.equivalent();
    for (a in  original.assignment) {
        migrated.predicate.add(a.equivalent());
    }
    //migrated.predicate = ;
    //migrated.predicate.conditionExpression = original.assignment.value;
}
    
retype RealizedVariable to Variable
    when : original.oppositeBottomPattern().area.name == "upperGraph"
    
retype PropertyAssignment to Predicate
    when : original.bottomPattern.area.name == "upperGraph"

migrate PropertyAssignment
    when : original.bottomPattern.area.name == "upperGraph" {
    
        var exp = new QVTc!OperationCallExp;
        // It's an '=' operation 
        exp.referredOperation = new QVTc!Operation;
        exp.referredOperation.name = "=";
        // The source is a PropertyCallExp
        exp.source = new QVTc!PropertyCallExp;
        // The property is the targetProperty
        exp.source.referredProperty = original.targetProperty.equivalent();
        // The source of the PropertyCallExp is the slotExpression
        exp.source.source = original.slotExpression.equivalent();
        // The argument is the value
        var args : Set;
        args.add(original.value.equivalent());
        exp.argument = args;
        migrated.conditionExpression = exp;    
    }

operation QVTc!RealizedVariable oppositeBottomPattern() : QVTc!BottomPattern  {
  return QVTc!BottomPattern.all.selectOne(p |p.realizedVariable.includes(self)); }
	 