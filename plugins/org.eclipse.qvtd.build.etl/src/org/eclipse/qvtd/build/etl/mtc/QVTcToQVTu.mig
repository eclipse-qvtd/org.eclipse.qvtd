/*******************************************************************************
 * Copyright (c) 2013 The University of York, Willink Transformations and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos - initial API and implementation
 ******************************************************************************/
import "Helpers.eol";
import "OclLibHelper.eol";

// TODO Check that if the slot expression area is Null, the test is correct
// Output domain to middle assignments are removed, iif the value expression
// is not a variable
@cascade
delete PropertyAssignment
    when : isOutputDomain(original.value.getArea())
        and not original.value.isTypeOf(QVTc!VariableExp)
        and isMiddleDomain(original.slotExpression.getArea())

// Middle domian to input assigments are removed
@cascade
delete PropertyAssignment
    when : isInputDomain(original.slotExpression.getArea())
        and isMiddleDomain(original.value.getArea())


// Realized variables in the input domain are retyped into variables
retype RealizedVariable to Variable
    when : isInputDomain(original.oppositeBottomPattern().area)

// Property assignments in the input domain are retyped to predicates   
retype PropertyAssignment to Predicate
    when : isInputDomain(original.bottomPattern.area)  

migrate Transformation {
    var comment : QVTc!Comment = new QVTc!Comment;
    comment.body = getUnidirComment();
    migrated.ownedComment.add(comment);
}

// Input Domain
migrate CoreDomain
    when : isInputDomain(original) {
	    
	    migrated.isCheckable = false;
	    migrated.isEnforceable = false;
    }

// Output Domain(s)
// THIS SHOULD BE HANDELED BY THE ENGINE!!??
migrate CoreDomain
    when : isOutputDomain(original) {
        if (isCheckMode()) {
            migrated.isEnforceable = false;
        }
	    if (isEnforceMode()) {
	        migrated.isCheckable = false;
	    }
    }

// Make sure variables and predicates are contained in the pattern    
migrate BottomPattern 
    when : isInputDomain(original.area) {
        
	    migrated.variable.addAll(original.realizedVariable.equivalent());
	    for (a in  original.assignment) {
	        migrated.predicate.add(a.equivalent());
	    }
}

migrate PropertyAssignment
    when : isInputDomain(original.bottomPattern.area) {
    
        var exp = new QVTc!OperationCallExp;
        // It's an '=' operation 
        exp.referredOperation = getOperationByName("=");
        exp.name = "=";
        // The type is boolean
        exp.type = exp.referredOperation.type;
        // The source is a PropertyCallExp
        exp.source = new QVTc!PropertyCallExp;
        // The property is the targetProperty
        exp.source.referredProperty = original.targetProperty.equivalent();
        // The source of the PropertyCallExp is the slotExpression
        exp.source.source = original.slotExpression.equivalent();
        exp.source.type = original.targetProperty.equivalent().type;
        // The argument is the value
        var args : Set;
        args.add(original.value.equivalent());
        exp.argument = args;
        migrated.conditionExpression = exp;    
    }
    
migrate PropertyAssignment
    when : isOutputDomain(original.bottomPattern.area) 
        and isCheckMode()
        and original.isDefault {
    
    migrated.isDefault = false;
}
