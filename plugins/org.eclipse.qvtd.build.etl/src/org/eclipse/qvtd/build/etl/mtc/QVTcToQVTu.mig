import "Helpers.eol";
import "OclLibHelper.eol";

// Realized variables in the input domain are retyed into variables
retype RealizedVariable to Variable
    when : isInputDomain(original.oppositeBottomPattern().area)

// Property assignments in the input domain are retyped to predicates   
retype PropertyAssignment to Predicate
    when : isInputDomain(original.bottomPattern.area)  

// Input Domain
migrate CoreDomain
    when : isInputDomain(original) {
	    
	    migrated.isCheckable = false;
	    migrated.isEnforceable = false;
	    // We need to know the bottom pattern of all RealizedVariables in 
	    // the input domain
	    for (rv in original.bottomPattern.realizedVariable) {
	       rv.~bottomPattern = original.bottomPattern;
	    }
    }

// Output Domain(s)
migrate CoreDomain
    when : not isInputDomain(original) {
        if (isCheckMode()) {
            migrated.isEnforceable = false;
        }
	    if (isEnforceMode()) {
	        migrated.isCheckable = false;
	    }
    }

// Make sure variables and predicates are contained in the pattern    
migrate BottomPattern 
    when : isInputDomain(original.area) {
    migrated.variable = original.realizedVariable.equivalent();
    for (a in  original.assignment) {
        migrated.predicate.add(a.equivalent());
    }
}
    
migrate PropertyAssignment
    when : isInputDomain(original.bottomPattern.area) {
    
        var exp = new QVTc!OperationCallExp;
        // It's an '=' operation 
        exp.referredOperation = getOperationByName("=");
        // The source is a PropertyCallExp
        exp.source = new QVTc!PropertyCallExp;
        // The property is the targetProperty
        exp.source.referredProperty = original.targetProperty.equivalent();
        // The source of the PropertyCallExp is the slotExpression
        exp.source.source = original.slotExpression.equivalent();
        // The argument is the value
        var args : Set;
        args.add(original.value.equivalent());
        exp.argument = args;
        migrated.conditionExpression = exp;    
    }
