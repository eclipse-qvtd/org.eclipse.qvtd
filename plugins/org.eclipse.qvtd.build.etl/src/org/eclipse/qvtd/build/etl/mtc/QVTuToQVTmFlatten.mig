import "Helpers.eol";
import "OclLibHelper.eol";
//import "QVTuToQVTmFlattenClean.eol";

/** The Flock migration performs a coarse migrationa, duplicate variable removal and predicate
 *  references fixing. 
 */
pre {
    var emfTool = new Native("org.eclipse.epsilon.emc.emf.tools.EmfTool");
}

// Refinned mappings
migrate Mapping
    when : original.refinement.size() > 0 {
        
        migrated.refinement = Set{};
        // Nested mappings with no domains
        // TODO nested mappings should be a recursive search
        var domainlessNestedMappings = original.refinement.collect(r | r.local.select(nm | nm.domain.size() == 0));
        migrated.local.addAll(domainlessNestedMappings.flatten());
        // Add domains that are not merged (i.e. with different typeModels than the refining mapping)
        migrated.domain.addAll(original.refinement.collect(r | r.domain).flatten().select(d | original.domain.collect(d | d.name).flatten().excludes(d.name)));         
    }
    
// Refinned mapping's Patterns
migrate GuardPattern
    when : original.area.isTypeOf(QVTu!Mapping)
            and original.area.refinement.size() > 0 {
            
        // Get the set of GuardPatterns of the refined mappings
        var gps = original.area.refinement.collect(r | r.guardPattern).flatten();
        // Add only non duplicate variables
        var nonDuplicate = emfTool.getECoreUtil().copyAll(mergeVariablesWithKindOfTypes(migrated.variable.includingAll(gps.collect(gp | gp.variable).flatten())));
        migrated.variable.clear();
        migrated.variable.addAll(nonDuplicate);
        migrated.predicate.addAll(emfTool.getECoreUtil().copyAll(gps.collect(gp | gp.predicate).flatten()));
    }
    

migrate BottomPattern
    when : original.area.isTypeOf(QVTu!Mapping)
            and original.area.refinement.size() > 0 {

        // Get the set of BottomPatterns of the refined mappings
        var bps = original.area.refinement.collect(r | r.bottomPattern).flatten();
        var nonDuplicate = emfTool.getECoreUtil().copyAll(mergeVariablesWithKindOfTypes(migrated.variable.includingAll(bps.collect(bp | bp.variable).flatten())));
        migrated.variable.clear();
        migrated.variable.addAll(nonDuplicate);
        nonDuplicate = emfTool.getECoreUtil().copyAll(mergeVariablesWithKindOfTypes(migrated.realizedVariable.includingAll(bps.collect(bp | bp.realizedVariable).flatten())));
        migrated.realizedVariable.clear();
        migrated.realizedVariable.addAll(nonDuplicate);
        migrated.predicate.addAll(bps.collect(bp | bp.predicate).flatten());     
        migrated.assignment.addAll(bps.collect(bp | bp.assignment).flatten());
        migrated.enforcementOperation.addAll(bps.collect(bp | bp.enforcementOperation).flatten());
        
    }
    
// Refinned mapping's Domain's Patterns
migrate GuardPattern
    when : original.area.isTypeOf(QVTu!CoreDomain)
            and original.area.rule.refinement.size() > 0 {
    
        // Get the GuardPatterns of the refined mappings for a domain with the same typeModel
        var gps = original.area.rule.refinement.collect(r | r.domain).flatten().select(d | d.typedModel == original.area.typedModel).collect(r | r.guardPattern).flatten();
        // Add only non duplicate variables
        var nonDuplicate = emfTool.getECoreUtil().copyAll(mergeVariablesWithKindOfTypes(migrated.variable.includingAll(gps.collect(gp | gp.variable).flatten())));
        migrated.variable.clear();
        migrated.variable.addAll(nonDuplicate);
        migrated.predicate.addAll(gps.collect(gp | gp.predicate).flatten());
        
    }

migrate BottomPattern
    when : original.area.isTypeOf(QVTu!CoreDomain)
            and original.area.rule.refinement.size() > 0 {
        
        // Get the BottomPatterns of the refined mappings for a domain with the same typeModel
        var bps = original.area.rule.refinement.collect(r | r.domain).flatten().select(d | d.typedModel == original.area.typedModel).collect(r | r.bottomPattern).flatten();
        var nonDuplicate = emfTool.getECoreUtil().copyAll(mergeVariablesWithKindOfTypes(migrated.variable.includingAll(bps.collect(bp | bp.variable).flatten())));
        migrated.variable.clear();
        migrated.variable.addAll(nonDuplicate);
        nonDuplicate = emfTool.getECoreUtil().copyAll(mergeVariablesWithKindOfTypes(migrated.realizedVariable.includingAll(bps.collect(bp | bp.realizedVariable).flatten())));
        migrated.realizedVariable.clear();
        migrated.realizedVariable.addAll(nonDuplicate);
        migrated.predicate.addAll(bps.collect(bp | bp.predicate).flatten());
        migrated.assignment.addAll(bps.collect(bp | bp.assignment).flatten());
        migrated.enforcementOperation.addAll(bps.collect(bp | bp.enforcementOperation).flatten());

    }  

// Move variable declarations and predicates in the input domain BottomPattern to the GuardPattern.
migrate CoreDomain
    when : isInputDomain(original) {

        // Move after migration to preserve references
        migrated.guardPattern.variable.addAll(migrated.bottomPattern.variable);
        migrated.guardPattern.predicate.addAll(migrated.bottomPattern.predicate);
    }
    
/** Check for variable declarations with types in the same hierarchy and leave the
 *  lowest (less abstract) one
 */
operation mergeVariablesWithKindOfTypes(vars) : Set  {
    
    //vars.println("Vars ");
    if (vars.size() > 1) {
        var duplicates : Bag();
        var result : Set;
        var x = new Native("org.eclipse.qvtd.build.etl.PivotUtil");
        for (v in vars) {
            // Variables should have the same name and diffferent type
            if (vars.excludingAll(duplicates.flatten()).exists(v2 | v2.name == v.name)) {
                duplicates.add(vars.select(v2 | v2.name == v.name).flatten());
            }
        }
        //duplicates.println("duplicates ");
        for (d in duplicates) {
            if (d.size() > 1) {
                result.add(x.getLowestRankVariable(d));
            } else {
                result.addAll(d);
            }
            
            
        }
        return result;
    } else {
        return vars.asSet();
    }    
}    