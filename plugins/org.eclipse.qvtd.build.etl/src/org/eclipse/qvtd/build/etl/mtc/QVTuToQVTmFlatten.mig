import "Helpers.eol";
import "OclLibHelper.eol";

/* The Flock migration performs a coarse migration, duplicate removal, type
   specialization.
*/

// Refinned mappings
migrate Mapping
    when : original.refinement.size() > 0 {
        
        migrated.refinement = Set{};
        // Nested mappings with no domains
        // TODO nested mappings should be a recursive search
        var domainlessNestedMappings = original.refinement.collect(r | r.local.select(nm | nm.domain.size() == 0));
        migrated.local.addAll(domainlessNestedMappings.flatten());
        // Add domains that are not merged (i.e. with different typeModels than the refining mapping)
        
    }
    
// Refinned mapping's Patterns
migrate GuardPattern
    when : original.area.isTypeOf(QVTu!Mapping)
            and original.area.refinement.size() > 0 {
            
        // Get the set of GuardPatterns of the refined mappings
        var gps = original.area.refinement.collect(r | r.guardPattern).flatten();
        migrated.variable.addAll(gps.collect(gp | gp.variable).flatten());
        migrated.predicate.addAll(gps.collect(gp | gp.predicate).flatten());
    }

migrate BottomPattern
    when : original.area.isTypeOf(QVTu!Mapping)
            and original.area.refinement.size() > 0 {

        // Get the set of BottomPatterns of the refined mappings
        var bps = original.area.refinement.collect(r | r.bottomPattern).flatten();
        migrated.variable.addAll(bps.collect(bp | bp.variable).flatten());
        migrated.predicate.addAll(bps.collect(bp | bp.predicate).flatten());            
        migrated.assignment.addAll(bps.collect(bp | bp.assignment).flatten());
        migrated.enforcementOperation.addAll(bps.collect(bp | bp.enforcementOperation).flatten());
        migrated.realizedVariable.addAll(bps.collect(bp | bp.realizedVariable).flatten());
    }
    
// Refinned mapping's Domain's Patterns
migrate GuardPattern
    when : original.area.isTypeOf(QVTu!CoreDomain)
            and original.area.rule.refinement.size() > 0 {
    
        // Get the GuardPatterns of the refined mappings for a domain with the same typeModel
        var gps = original.area.rule.refinement.collect(r | r.domain).flatten().select(d | d.typedModel == original.area.typedModel);
        migrated.variable.addAll(gps.collect(a | a.guardPattern.variable).flatten());
        migrated.predicate.addAll(gps.collect(a | a.guardPattern.predicate).flatten());
        
    }

migrate BottomPattern
    when : original.area.isTypeOf(QVTu!CoreDomain)
            and original.area.rule.refinement.size() > 0 {
        
        // Get the BottomPatterns of the refined mappings for a domain with the same typeModel
        var bps = original.area.rule.refinement.collect(r | r.domain).flatten().select(d | d.typedModel == original.area.typedModel);
        migrated.variable.addAll(bps.collect(a | a.bottomPattern.variable).flatten());
        migrated.predicate.addAll(bps.collect(a | a.bottomPattern.predicate).flatten());
        migrated.assignment.addAll(bps.collect(a | a.bottomPattern.assignment).flatten());
        migrated.enforcementOperation.addAll(bps.collect(a | a.bottomPattern.enforcementOperation).flatten());
        migrated.realizedVariable.addAll(bps.collect(a | a.bottomPattern.realizedVariable).flatten());
        
    }  

// Move variable declarations and predicates in the input domain BottomPattern to the GuardPattern.
migrate CoreDomain
    when : isInputDomain(original) {
    
        migrated.guardPattern.variable.addAll(original.bottomPattern.variable);
        migrated.guardPattern.predicate.addAll(original.bottomPattern.predicate);
        // Might need to move this to EOL
        delete original.bottomPattern.variable;
        delete original.guardPattern.predicate;
    }