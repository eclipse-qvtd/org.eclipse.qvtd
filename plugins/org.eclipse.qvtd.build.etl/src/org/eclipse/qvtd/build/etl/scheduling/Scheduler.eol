/*******************************************************************************
 * Copyright (c) 2013 The University of York and Willink Transformations.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Horacio Hoyos - initial implementation
 ******************************************************************************/
 
 /****l* /org.eclipse.qvtd.build.etl/dependence/scheduling/Scheduler
 * NAME
 *  Scheduler -- Invoke the data dependency analysis and map ordering functions
 *  and add the mapping calls to the QVTi AST model.
 *
 * MODELS
 *  Required models to run the script:
 *      - NAME      ALIASES METAMODEL               ROL SOD
 *      - qvti      QVT     QVTCore                  X   -        The QVTi (partitioned) AST
 *      - rTree     tree    ECoreContainmentTree     X   -        The right metamodel containment tree
 *      - qvts              QVTScheduling            -   X        The scheduling model
 * SEE ALSO
 *
 ******
 */
import "../helpers/OCLExpressionAnalysis.eol";
import "MapOrdering.eol";

var inputVarMap : Map;  // (mapping, Set{variable})
var outputVarMap : Map; // (mapping, Set{realizedVariable})
var dataTypeAssignments : Map;    // (mapping, Sequence{Type, Attribute})
var nodeMap : Map;      // (mapping, graph!Node)
var dataNodeMap : Map;      // (??, graph!Node)

//  
var s = new qvts!Schedule;

for (r in qvti!Transformation.all().first().rule) {
	//r.println("r ");
    var action = new qvts!MappingAction;
    action.schedule = s;
    action.mapping = r;
    var resultDatums = r.getOutputVariables().collect(v | v.getClassDatum()).flatten();
    s.datums.addAll(resultDatums);
    action.results.addAll(resultDatums.select(cd : qvts!ClassDatum | true));
   
	// Create distinc data sets for input variables
    for (vA in r.getInputVariables()) {
    	//vA.name.println("  va ");
    	var dd = new qvts!DistinctData;
    	dd.primaryArgument.add(vA.getClassDatum());
    	dd.primaryArgument.addAll(vA.getClassDatum().getSubtypeClassDatums());
    	for (dv in vA.derivedVariables(r.getInputVariables().excluding(vA))) {
        	//dv.println("    derived ");
        	dd.secondaryArgument.add(dv.getClassDatum());
        	dd.secondaryArgument.addAll(dv.getClassDatum().getSubtypeClassDatums());
        }
        dd.target = action;
    }
    // Create result PropertyDatums for PrimitiveData types assigned to properties
    resultDatums = r.getPrimitiveDataTypeAssignemnts().collect(a | a.getPropertyDatum());
    s.datums.addAll(resultDatums);
    action.results.addAll(resultDatums);
}

// Find uses of the PropertyDatum to create the arguments
for (d in s.datums.select(dt : qvts!PropertyDatum | true)) {
	for (r in qvti!Transformation.all().first().rule) {
	    for (p in r.getAllPredicates().select(p |
    	        p.conditionExpression.isSimpleAttributeNavigation()
    		    and (p.conditionExpression.source.source.type == d.type
    		         or d.type.superClass.includes(p.conditionExpression.source.source.type))
    		    and p.conditionExpression.source.referredProperty == d.property)) {
    		var dd = new qvts!DistinctData;
            dd.primaryArgument.add(d);
            qvts!MappingAction.all().selectOne(m | m.mapping == r).distinctArguments.add(dd);
        }
    }
}

// Ordering
s.defineMapOrdering();

// Nesting and bindings
// 1. Create the base mapping
var root = new qvti!Mapping;
root.name = "__root__";
root.guardPattern = new qvti!GuardPattern;
root.bottomPattern = new qvti!BottomPattern;
var nested : Boolean;
for (mq in s.actions.sortBy(ma | ma.index)) {
    nested = false;
    mq.println("mq ");
    var qin = mq.distinctArguments
            .collect(da | da.secondaryArgument.including(da.primaryArgument)).flatten().asSet();
    qin.collect(da | da.type.name).println("qin ");        
    for (mn in s.actions.select(ma | ma.index < mq.index).sortBy(ma | ma.index).invert) {
        mn.println("    mn ");
        var nav = mn.getAvailableDatums();
        nav.collect(da | da.type.name).println("        nav: ");
        nav.includesAll(qin).println("        ");
        if (nav.includesAll(qin)) {
            // If for each ClassDatum there is only 1 input variable of the same type
            // it is a perfect match, look no further
            if (qin.forAll(cd | mq.mapping.getInputVariables().one(v | v.type == cd.type))) {
                mq.parent = mn;
	            nested = true;
	            // Create the bindings?
	            // mq.createBindings(qin, mn, nav);
	            for (cd in qin) {
	               var mb = new qvts!MappingBinding;
	               mb.mappingAction = mq;
	               var binding = new qvti!VariableExp;
	               var candidates = mn.mapping.getInputVariables().includingAll(mn.mapping.getOutputVariables())
	                                   .select(v | v.type == cd.type);
	               if (not candidates.isEmpty()) {
	                   binding.referredVariable = candidates.first();
	               } else {
	                   // TODO Tell my parent to pass me a variable
	               }
	               mb.bindingExp = binding;
	               mb.boundVariable = mq.mapping.getInputVariables().selectOne(v | v.type == cd.type);
	               // TODO how to select and then discard when we have multiple CalssDatums
	               // with the same type?
	            }
	            break;
            }
        } else {
            var matched = nav.select(cd | qin.includes(cd));
            matched.collect(da | da.type.name).println("            matched: ");
            var missing = qin.excludingAll(nav);
            missing.collect(da | da.type.name).println("            missing: ");
            // Can some missing be derived from the matched?
            for (mcs in missing.clone()) {
                for (match in matched) {
	                var primaryMatch = mq.distinctArguments
	                    .select(da | da.primaryArgument.exists(pa | pa.type == match.type)
	                              or match.super.exists(sd | da.primaryArgument.exists(pa | pa.type == sd.type)));
	                    
	                var primary = primaryMatch.selectOne(da | da.secondaryArgument.exists(sa | sa.type = mcs.type));
	                // Find a predicate that relates the two types.
	                if (primary.isDefined()) {
	                    var p = mq.mapping.getAllPredicates()
	                        .selectOne(p | p.conditionExpression.isSimpleAttributeNavigation()
	                                   and p.conditionExpression.source.source.type = primary.type
	                                   and p.conditionExpression.argument.first().type = mcs.type);
	                    if (p.isDefined()) {
	                        // mq.createBindings(qin, mn, nav);
	                        primary.type.name.println(mcs.type.name + " derived from ");
		                    var mb = new qvts!MappingBinding;
		                    mb.mappingAction = mq;
		                    var bindingEx = new qvti!VariableExp;
		                    bindingEx.referredVariable = p.conditionExpression.source.source.referredVariable;
		                    mb.bindingExp = bindingEx;
		                    mb.boundVariable = p.conditionExpression.argument.first();
		                    missing.remove(mcs);
	                    }
	                }  
	            }
            }
            // Find if a missing variable can be used as a loop
            for (mcs in missing) {
                for (match in matched) {
                    var primaryMatch = mq.distinctArguments
                        .select(da | da.primaryArgument.exists(pa | pa.type == mcs.type)
                                  or mcs.super.exists(sd | da.primaryArgument.exists(pa | pa.type == sd.type)));
                        
                    var primary = primaryMatch.selectOne(da | da.secondaryArgument.exists(sa | sa.type = match.type));
                    // Find a predicate that relates the two types.
                    if (primary.isDefined()) {
                        var p = mq.mapping.getAllPredicates()
                            .selectOne(p | p.conditionExpression.isSimpleAttributeNavigation()
                                       and p.conditionExpression.source.source.type == mcs.type
                                       and primary.secondaryArgument.collect(sa | sa.type).includes(p.conditionExpression.argument.first().type));
                        
                        if (p.isDefined()) {   
                            if (p.conditionExpression.source.referredProperty.opposite.isDefined()
                                    and p.conditionExpression.source.referredProperty.opposite.isComposite) {
	                            // mq.createBindings(qin, mn, nav);
	                            primary.secondaryArgument.selectOne(sa | sa.type == match.type).type.name.println(mcs.type.name + " derived from ");
	                            var mb = new qvts!MappingBinding;
	                            mb.mappingAction = mq;
	                            var bindingEx = new qvti!PropertyCallExp;
	                            bindingEx.referredProperty = p.conditionExpression.source.referredProperty.opposite;
	                            var sourceEx = new qvti!VariableExp;
	                            sourceEx.referredVariable = p.conditionExpression.argument.first().referredVariable;
	                            bindingEx.source = sourceEx;
	                            mb.bindingExp = bindingEx;
	                            mb.boundVariable = p.conditionExpression.source.source.referredVariable;
	                            //missing.remove(mcs);
                                nested = true;
                            }
                        }    
                    }
                }
            }
            if (nested) {
                mq.parent = mn;
                break;
            }
        }
    }
    if (not nested) {
        // Nest in the root mapping
    }
}


"Done".println();

// Create the bindings. 
// 


/****o* getClassDatums
 * NAME
 *  getClassDatums - Returns the ClassDatum(s) for the type of the variable.
 *
 * FUNCTION
 *  If the variable's type is not abstract, this functions returns the ClassDatum
 *  that corresponds to the type.
 *  If the variable's type is abstract, this function returns the set of ClassDatum
 *  of all the subtypes of the type. This correctly connects the AbstractAction
 *  to all possible input datums.
 * CONTEXT
 *  qvti!Variable  The variable
 * ANNOTATIONS
 *  cached
 * RETURNS
 *  qvts!AbstractDatum	The ClassDatum for the variable's type
 *  SEE ALSO
 */
@cached 
operation qvti!Variable getClassDatum() : qvts!ClassDatum {
	
	var d = new qvts!ClassDatum;
    d.type = self.type;
	d.variable = self;
	//if (self.type.isAbstract) {
	//   return self.type.getSubtypeClassDatum();
	//}
	//return self.type.getClassDatum().asSequence();
	return d;
}

/****o* getPropertyDatum
 * NAME
 *  getPropertyDatum - Returns the PropertyDatum for an assignment.
 *  The PropertyDatum points to the type of the variable in the slot expression
 *  and the property to the targetProperty
 *
 * CONTEXT
 *  qvti!Assignment  The assignment
 * ANNOTATIONS
 *  
 * RETURNS
 *  Sequence	The ClassDatum for the variable type and its superTypes
 *  SEE ALSO
 */
operation qvti!Assignment getPropertyDatum() : qvts!PropertyDatum {
	
	var d = new qvts!PropertyDatum;
	d.type = self.slotExpression.referredVariable.type;
	d.property = self.targetProperty;
	return d;
}

/****o* getSubtypeClassDatum
 * NAME
 *  getSubtypeClassDatums - Returns the list of ClassDatums for all the subtypes
 *  of the type of the ClassDatum given type.  
 *
 * CONTEXT
 *  qvti!Type  The type
 * ANNOTATIONS
 *  cached
 * RETURNS
 *  qvts!ClassDatum The class datum
 *  SEE ALSO
 */
@cached
operation qvts!ClassDatum getSubtypeClassDatums() : Sequence {
    var subDatums = self.type.getPackage().getOwnedType().select(t | t.getSuperClass().includes(self)).collect(t | t.getClassDatum()).asSequence();
    for (cd in subDatums) {
        cd.super.add(ad);
    } 
    return subDatums;
}

/****o* derivedVariables
 * NAME
 *  derivedVariables - Analysis of variable relations to find derivable ones
 * FUNCTION
 *  Returns a list of variables that can be derived from the context variable. 
 *  The function performs a full depth search looking for variables that can be
 *  derived from the derived ones too.
 *
 * CONTEXT
 *  QVT!Variable  The variable being analyzed
 * PARAMETERS
 *  vars The variables to look for relations
 * RESULT
 *  A 
 * SEE ALSO
 *
 */
operation qvti!Variable derivedVariables(vars : Sequence) : Set {

	var derived : Set;
    for (vB in vars) {
        //vB.name.println("    vB ");
        if (not self.hasRelation(vB).isEmpty()) {
        	derived.add(vB);
	        derived.addAll(vB.derivedVariables(vars.excluding(vB)));
        }
    }
    return derived;
} 

/****o* hasRelation
  *  NAME
  *    hasRelation -- Identify relations between variables
  *  SYNOPSIS
  *    relation =  var1.hasRelation(var2);
  *  FUNCTION
  *    Analysies the predicates and assignments of the mapping that contains the 
  *   variables and returns the type of relation found. 
  *  CONTEXT
  *     QVT!Variable   
  *  PARAMETERS
  *    varB - variable to analyze relations against
  *  RESULT
  *    Any  - The EReference that relates the variables, null if not existant
  *   TODO
  *   It may be usefull to divide this into hasPredicateRelation and hasAssignmentRelation
  *   so we have more controll over what relations we are looking for.
  *  SEE ALSO
  *
  */
operation qvti!Variable hasRelation(variable : QVT!Variable) : Bag {
    
    // Fin predicates and assignemnts that only refer the two variables and
    // return the properties that relate them
    return self.oppositePattern().area.rule.guardPattern.predicate
    	.select(p | p.conditionExpression.isSimpleAttributeNavigation()
    		    and p.conditionExpression.isArgumentVariable(variable)
    		    and p.conditionExpression.isSourceVariable(self))
        .collect(p | p.conditionExpression.getReferredProperty())
    	.includingAll(
    		self.oppositePattern().area.rule.bottomPattern.assignment
    		.select(a | a.isSimpleAttributeNavigation()
    			and a.slotExpression.referredVariable == self
    			and a.value.referredVariable == variable)
    		.collect(a | a.targetProperty())
    	);
}


operation qvts!Schedule defineMapOrdering() {

    var visited : Set;
    var mapLinear : Map;
    
    var queue : Sequence;
    // Do a Depth first search of the containment tree of the output model
    queue.addAll(rTree!Node.all().select(n | n.parent.isEmpty()));
    while (not queue.isEmpty()) {
        var n = queue.first();
        queue.remove(n);
        //n.println("n ");
        //  Find all the mappings that have an output node if this type
        for (ma in self.actions.select(a : qvts!MappingAction | a.results.exists(r | r.type.name = n.EClassName))) {
            // Find the predecesors and linearize
            ma.getMappingOrderIndex(visited);
        }
        queue.addAll(n.children);
    }
    
    "Ordering".println();
    for (ma in self.actions.select(a : qvts!MappingAction | true).sortBy(ma | ma.index)) {
        ma.mapping.name.println(ma.index + ":");
    }
    " ".println();
    " ".println();

}

operation qvts!MappingAction getMappingOrderIndex(visited) {
    
    visited.add(self);
    var index : Integer;
    // Find all the mappings that are predecesor to this one
    var pre = self.getPredecesorMappings();
    //pre.collect(p | p.mapping.name).println(self.mapping.name + " pre: ");
    while (pre.size() > 0) {
        var pma = pre.first();
        if (not visited.includes(pma)) {        
            //"Recursive ".println();
            pma.getMappingOrderIndex(visited);
            //"Back".println();
        }    
        pre.remove(pma);
    }
    if (self.index == 0) {
        index = qvts!MappingAction.all().sortBy(ma | ma.index).last().index + 1;
        self.index = index;
    }
}

/****o* getPredecesorMappings
 *  NAME
 *    getPredecesorMappings -- get the list of predecesor mappings
 *  FUNCTION
 *  A maping, A, is a predecesor of another mapping, B, if any of the results
 *  the MappingAction of A, is an argument of the MappingAction of B.
 *  CONTEXT
 *     qvts!MappingAction The maping action to query (mapping B) 
 *  RESULT
 *    Sequence  - The list of predecessor MappingActions
 *  SEE ALSO
 *
 */
operation qvts!MappingAction getPredecesorMappings() : Sequence {

    return self.distinctArguments
        .collect(da | da.secondaryArgument.including(da.primaryArgument)).asSet()
        .collect(a | a.sources).flatten();
}

/****o* getAvailableDatums
 *  NAME
 *    getAvailableDatums -- get the list of available datums in the mapping
 *  FUNCTION
 *   The available datums of a MappingAction are the union of its arguments,
 *  results and the available datums of its parent.
 *  
 *  CONTEXT
 *     qvts!MappingAction The maping action to query (mapping B) 
 *  RESULT
 *    Sequence  - The list of available datums
 *  SEE ALSO
 *
 */
operation qvts!MappingAction getAvailableDatums() : Set {
     // TODO implement the derived arguments attribute!
     var result = self.distinctArguments
        .collect(da | da.secondaryArgument.including(da.primaryArgument))
        .includingAll(self.results);
    if (self.parent.isDefined()) {
        result.addAll(self.parent.getAvailableDatums());
    }
    return result.flatten().asSet();
    
}
