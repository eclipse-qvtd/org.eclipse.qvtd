/*******************************************************************************
 * Copyright (c) 2013 The University of York, Willink Transformations and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos - initial implementation
 ******************************************************************************/
import "../../mtc/OclLibHelper.eol";
import "../../mtc/Helpers.eol";

/**
 * Helper functions to analyze OCLExpressions in QVTc and understand the relations
 * between variables used in them.
 */
 
 
 // Determine if the OCLExpression is of the form 
 // varA.attribute = varB
 //
 operation QVT!OCLExpression isSimpleAttributeNavigation() : Boolean {
    // 1. The OCLExpression must be an operation call 
    if (self.isTypeOf(QVT!OperationCallExp)) {
        // 2. The Operation must be a OclAny "=", operation
        var eqOperation = getOperationByName("=", oclStdLib!AnyType.all().selectOne(t | t.name == "OclAny"));
        if (self.referredOperation == eqOperation) {
            // The arguments must be 1: VariableExp
            if ( (self.argument.size() == 1) and self.argument.first().isTypeOf(QVT!VariableExp)) {
                // The source must be a  PropertyCallExp
                if (self.source.isTypeOf(QVT!PropertyCallExp)) {
                    // the source's source must be a VariableExp
                    if (self.source.source.isTypeOf(QVT!VariableExp)) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
 
 }
 
// Determine if the Assignemnts is of the form 
// varA.attribute := varB 
 operation QVT!Assignment isSimpleAttributeNavigation() : Boolean {
    // 1. The Assignment must be an Attribute assignment 
    if (self.isTypeOf(QVT!PropertyAssignment)) {
        // 2. The slot operation must be a VariableExp
        if (self.slotExpression.isTypeOf(QVT!VariableExp)) {
            // The value must be VariableExp
            if (self.value.isTypeOf(QVT!VariableExp)) {
                return true;
            }
        }
    } 
    
    return false;
 }

// Determine if the Assignemnts is of the form 
// varA := 'PrimitiveLitExp'
operation QVT!Assignment isPrimitiveVarAssignemnt() : Boolean {
    if (self.isTypeOf(QVT!VariableAssignment)) {
        if(self.value.isKindOf(QVT!PrimitiveLiteralExp)) {
            return true;
        }
    }
    return false;
}  

 
// Only call if isSimpleAttributeNavigation returns true
// We are only interested in domains
operation QVT!OCLExpression isSingleDomained() : Boolean {
    return self.argument.first().referredVariable.oppositePattern().area.isTypeOf(QVT!CoreDomain)
        and self.argument.first().referredVariable.oppositePattern().area == self.source.source.referredVariable.oppositePattern().area;
}

// Only call if isSimpleAttributeNavigation returns true
// We are only interested in domains
operation QVT!PropertyAssignment isSingleDomained() : Boolean {
    return self.slotExpression.referredVariable.oppositePattern().area == self.value.referredVariable.oppositePattern().area;
}
 
 
// Only call if isSimpleAttributeNavigation returns true
operation QVT!OCLExpression getNavigatedProperty() : QVT!Property {
    if (self.source.isTypeOf(QVT!PropertyCallExp)) {
        return self.source.referredProperty;
    }
} 
 
 
operation OCLExpression containmentPredicate() : Boolean {

} 
