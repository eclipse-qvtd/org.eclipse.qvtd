/*******************************************************************************
 * Copyright (c) 2014 The University of York and Willink Transformations.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Horacio Hoyos - initial implementation
 ******************************************************************************/
import "../helpers/QVTHelpers.eol";
import "Scheduler.eol";
 
/****t* /org.eclipse.qvtd.build.etl/scheduling/QVTpToSchedule
 * NAME
 *  QVTmToQVTiPartition -- Transform a QVTm transformation into its
 *  partioned equivalent.
 * FUNCTION
 *  Each transformation rule is broken into n rules, depending on the number
 *  of input domains.
 *    
 */

/****u* QVTpToSchedule/TransformationToSchedule
 * NAME
 *  TransformationToSchedule - Transform the trnsformation
 * FUNCTION
 *  Just creates the place holder for datums and actions
 * FROM
 *  QVTp!Transformation
 * TO
 *  QVTs!Schedule
 */
rule TransformationToSchedule
    transform t : QVTp!Transformation
    to s : QVTs!Schedule {
        
    }

/****u* QVTpToSchedule/MappingToMappingAction
 * NAME
 *  MappingToMappingAction - A mapping genereates a mapping action and its datums
 * FUNCTION
 *  Visit the mapping input/ouput variables and assignments/predicates to create
 *  the appropriate class and property datums.
 * FROM
 *  QVTp!Mapping
 * TO
 *  QVTs!MappingAction
 */
rule MappingToMappingAction
    transform m : QVTp!Mapping
    to ma : QVTs!MappingAction {
        
        ma.schedule ::= m.transformation;
        ma.mapping = m;
        ma.results.addAll(m.getOutputVariables().equivalent());
        for (vA in m.getInputVariables()) {
            var dd = new QVTs!DistinctData;
            dd.primaryArgument ::= vA;
            dd.secondaryArguments.addAll(vA.derivedVariables(m.getInputVariables().excluding(vA)).equivalent());
            ma.distinctArguments.add(dd);
        }
        var pTypeAsgmts = m.getPrimitiveDataTypeAssignemnts();
        ma.results.addAll(m.getAllAssignments().equivalent());
        var pTypeAsgmtsTypes = pTypeAsgmts.collect(a | a.slotExpression.referredVariable.type);
        var pTypeAsgmtsProps = pTypeAsgmts.collect(a | a.targetProperty);       
        // Primitive type arguments
        ma.distinctArguments.addAll(m.getAllPredicates().select(p |
		        p.conditionExpression.isSimpleAttributeNavigation()
		        and (pTypeAsgmtsTypes.includes(p.conditionExpression.source.source.type)
		             or pTypeAsgmtsTypes.exists(t | t.superClass.includes(p.conditionExpression.source.source.type)))
		        and pTypeAsgmtsProps.includes(p.conditionExpression.source.referredProperty)).equivalent());
    }

// Lazy so we dont transformn variables from iterators
// Greedy so we also transform RealizedVariables
@lazy
@greedy
rule VariableToClassDatum
    transform v : QVTp!Variable
    to d : QVTs!ClassDatum {
        
        d.type = v.type;
        d.domain = v.oppositePattern().area;    // QVTi, all variables should be in domains!
        d.schedule ::= v.oppositePattern().area.`rule`.transformation;
        d.super.addAll(QVTp!Variable.all.select(v1 | v1.oppositePattern().isDefined() and v.type.superClass.includes(v1.type)).equivalent());
        d.variable = v;
    }

@greedy
rule AssignmentToPropertyDatum
    transform a : QVTp!Assignment
    to d : QVTs!PropertyDatum {
        
        guard : a.isPrimitivePropertyAssignemnt()
        
        d.type = a.slotExpression.referredVariable.type;    
        d.schedule ::= a.bottomPattern.area.transformation;
	    d.variable = a.slotExpression.referredVariable;
	    d.domain = a.slotExpression.referredVariable.oppositePattern().area; 
	    d.property = a.targetProperty;
    }

@lazy    
rule PredicateToDistinctData
    transform p : QVTp!Predicate
    to dd : QVTs!DistinctData {
        
        dd.primaryArgument ::= p.conditionExpression.source.source;
    }    
    
post{
    "QVTpToSchedule Done".println();
}    