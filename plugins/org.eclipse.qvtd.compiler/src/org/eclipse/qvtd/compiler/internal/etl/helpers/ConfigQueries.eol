/*******************************************************************************
 * Copyright (c) 2013 The University of York, Willink Transformations and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos - initial implementation
 ******************************************************************************/

/****l* /org.eclipse.qvtd.build.etl/dependence/helpers/ConfigQueries
 * NAME
 *  ConfigQueries -- Get information about the QVTc execution configuration
 *
 * MODELS
 *  Required models to run the script:
 *      - NAME     ALIASES METAMODEL               ROL SOD
 *      - config           QVTcConfig.ecore         X          The candidate model Ecore
 *
 ******
 */ 

/****o* ConfigQueries/getAllMetamodelFiles
 * NAME
 *  getAllMetamodelFiles - Returns a map of the metamodel files for the different
 *  directions of the transformation.
 * FUNCTION 
 *  The map returned is of the form: <dir, List<String>> where dir can be one of:
 *   "L", "M", "R".
 * CONTEXT
 *  QVT!Area  The are under test
 * ANNOTATIONS
 *  cached
 * SEE ALSO
 *  QVTHelpers/isMiddleDomain
 *  QVTHelpers/isOutputDomain
 */
operation getAllMetamodelFiles() : Map  {
    
    var files = new Map;
    files.put("L",
        config!Configuration.all().first().inputDirection.imports.collect(i | i.metamodelFile));
    files.put("M",
        config!Configuration.all().first().middle.imports.collect(i | i.metamodelFile));
    files.put("R",
        config!Configuration.all().first().outputDirection.collect(id | id.imports).collect(i | i.metamodelFile).flatten());
    return files;
}

operation getLeftModelMetamodelFile() : String {
    
    return config!Configuration.all().first().inputDirection.imports.collect(i | i.metamodelFile).flatten();
}

operation getMiddleModelMetamodelFile() : String {

    return config!Configuration.all().first().middle.imports.collect(i | i.metamodelFile).flatten();
}

// TODO We can only handle 1 R model. This must be adjusted when we have many.
operation getRightModelsMetamodelFiles() : String {

    return config!Configuration.all().first().outputDirection.collect(id | id.imports).collect(i | i.metamodelFile).flatten().first();
}



operation getLeftModelPackage() : String {
    
    return config!Configuration.all().first().inputDirection.`import`.package;
}

operation getMiddleModelPackage() : String {
    
    return config!Configuration.all().first().middle.`import`.package;
}

operation getRightModelPackage() : String {
    
    return config!Configuration.all().first().outputDirection.first().`import`.package;
}
