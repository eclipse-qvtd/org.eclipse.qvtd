/*******************************************************************************
 * Copyright (c) 2014 The University of York and Willink Transformations Ltd.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Adolfo Sanchez-Barbudo Herrera (University of York) - initial implementation
 ******************************************************************************/

-- 
-- EOL Utils with helper functions for QVTs models
--    Model Names/Aliases:
--       QVTs : A QVTs model

operation QVTs!MappingAction getDistinctDataClassDatums() : Sequence {
	
	return self.distinctArguments.primaryArguments
			.includingAll(self.distinctArguments.secondaryArguments).flatten()
			.collect(da | da.datum);
}
-- Helper function to obtaion the distinct data of a mapping
-- with greater amount secondary argument 
operation QVTs!MappingAction getMainDistinctData() : QVTs!DistinctData {
	return self.getDistinctDataOrderedBySecondaryArgs().last();
}

-- Helper function to obtaion the distinct data of mapping
-- with greater amount secondary arguments
operation QVTs!MappingAction getDistinctDataOrderedBySecondaryArgs() : Sequence(QVTs!DistinctData) {
	return self.distinctArguments.sortBy(dd | dd.secondaryArguments.size());
}

operation QVTs!DistinctData getNextDistinctData() : QVTs!DistinctData {
	var orderedArgs = self.target.getDistinctDataOrderedBySecondaryArgs();
	var pos = orderedArgs.indexOf(self);
	if (pos == 0) {
		return null;
	} else {
		return orderedArgs.at(pos-1);
	}
}

operation QVTs!Schedule treeDepth() : Integer {
    
    if (self.~rootNode.isDefined()) {        
        //self.~rootNode.closure(n | n.children).collect(c | c.depth()).sortBy(d | true).last().println("treeDepth ");
        return self.~rootNode.closure(n | n.children).collect(c | c.depth()).sortBy(d | true).last();
    }
    return 0;
}

operation QVTs!MappingAction depth() : Integer {
    //self.closure(a | a.parent).size().println(self + " depth: ");
    return self.closure(a | a.parent).size();
}


/****o* QVTsHelpers/getPredecessors
 * NAME
 *  getPredecessors - Get the predecessors of a mapping action
 * FUNCTION
 *  The predecessors of a mapping action are calculating by following the 
 *  mapping arguments' sources. This method could be invoked recursively
 *  to do a graph search iif a mechanism is added to prevent loops. 
 * CONTEXT
 *  QVTs!MappingAction  The MappingAction
 * RETURNS
 *  Sequence	The sequence of mapping predecesors. 
 *  SEE ALSO
 */
@cached
operation QVTs!MappingAction getPredecessors() : OrderedSet {

	//self.mapping.name.println("getPredecessors ");
	var reqs = self.requisites;
	var subReqs = reqs.closure(x | x.sub);
	//reqs.includingAll(subReqs)
    //        .collect(req| req.producedBy).flatten()
    //        .sortBy(a | a.mapping.name) // To ensure determinism
    //        .asOrderedSet().mapping.name.println(); // Remove duplicates
	return reqs.includingAll(subReqs)
			.collect(req| req.producedBy).flatten()
			.sortBy(a | a.mapping.name) // To ensure determinism
			.asOrderedSet(); // Remove duplicates
}

@cached
operation QVTs!AbstractDatum isDatumOrSubdatum(datum : QVTs!ClassDatum) : Boolean {
	if (self = datum) {
		return true;
	} else if (datum.isKindOf(QVTs!ClassDatum)) {
		// FIXME Rethink this
		// With respect to PropertyDatums we will never be interested in this
		return self.getAllSuperDatums().includes(datum);
	} else {
		return false;
	}
}

@cached 
operation QVTs!AbstractDatum getAllSuperDatums() : OrderedSet(QVTs!AbstractDatum) {
	return self.asSequence().closure(x | x.super).asOrderedSet();
}

@cached
operation QVTs!Schedule getAllDatums() : OrderedSet(QVTs!AbstractDatum) {
	var classDatums = self.datums;
	return classDatums.includingAll(classDatums.propertyDatums.flatten());
}

/****o* QVTsHelpers/getContextDataParameters
 * NAME
 *  getContextDataParameters - Get the data parameters available in the context
 *  of the mapping.
 * FUNCTION
 *  The parameters available are all the DataParameters available in the mapping and
 *  the mapping's predecessors, excluding those that are guarded. A DataParameter
 *  is guarded if there exists a predicate that guards the DataParameter's Variable
 *  or any of its properties
 * CONTEXT
 *  QVTs!MappingAction  The MappingAction
 * RETURNS
 *  OrderedSet	The set of usable parameters. 
 *  SEE ALSO
 */
@cached
operation QVTs!MappingAction getContextDataParameters() : OrderedSet {
	
	// Filter guarded DataParameters
	//self.mapping.println("getContextDataParameters ");
	//self.getAvailableDataParameters().variable.name.println("getContextDataParameters ");
	var contextdp = self.getAvailableDataParameters().select(dp | not self.mapping.guardPattern.predicate
			.exists(p | p.conditionExpression.ownedSource.getAllContentsIncludingSelf()
				.exists(ex : QVTp!VariableExp | ex.referredVariable = dp.variable)));
	//contextdp.variable.name.println("getContextDataParameters ");				
	if (self.parent.isDefined()) {
		contextdp.addAll(self.parent.closure(p | p.parent).collect(p | p.getAvailableDataParameters()).flatten());
	}
	return contextdp;
}

@cached
operation QVTs!MappingAction getAvailableDataParameters() : OrderedSet {
	
	return self.parameters.includingAll(self.results);
}
