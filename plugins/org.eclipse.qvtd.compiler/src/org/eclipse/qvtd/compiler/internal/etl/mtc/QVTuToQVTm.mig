/*******************************************************************************
 * Copyright (c) 2013 The University of York and Willink Transformations.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos - initial implementation
 ******************************************************************************/
import "../helpers/QVTHelpers.eol";
import "../helpers/OclLibHelper.eol";

pre {
    var emfTool = new Native("org.eclipse.epsilon.emc.emf.tools.EmfTool");
}

/****f* /org.eclipse.qvtd.build.etl/mtc/QVTuToQVTm
 * NAME
 *  QVTuToQVTm -- Flock migration script from QVTu to QVTm
 *
 * SEE ALSO
 *  /org.eclipse.qvtd.build.etl/mtc/QVTcToQVTu  
 ******
 */

migrate CoreModel
	{
		migrated.externalURI = original.externalURI.replace(".qvtu.qvtc", ".qvtm.qvtc");
	}
	

// **** Flatten mappings by removing nested mappings ****

/****d* QVTuToQVTm/delete/NestedMappings
 * CONTEXT
 *  Mapping
 * WHEN
 *  The mapping is nested
 * FUNCTION
 *  Delete all nested mappings, i.e., flatten the mappings
 ******
 */
delete Mapping
    when : original.context.isDefined()

/****d* QVTuToQVTm/delete/NestedMappingCoreDomains
 * CONTEXT
 *  CoreDomain
 * WHEN
 *  The CoreDomain's mapping is nested
 * FUNCTION
 *  Delete all CoreDomains in nested mappings.
 ******
 */
delete CoreDomain
    when : original.rule.context.isDefined()        // Nested

/****d* QVTuToQVTm/delete/NestedMappingCorePattern
 * CONTEXT
 *  CorePattern
 * WHEN
 *  The Pattern's area is a nested mapping or a domain in a nested mapping
 * FUNCTION
 *  Delete patterns in nested mappings regardles
 ******
 */
delete CorePattern
    when : original.area.isNested()

/****m* QVTuToQVTm/migrate/NestedMappingDomainCorePatternVariable
 * CONTEXT
 *  Variable
 * WHEN
 *  The variables's pattern belongs to a domain, the domain's mapping is nested
 *  the top mapping has a domain with the same TypeModel.
 * FUNCTION
 *  Move the variable to the domain in the top containment mapping with the same
 *  typed model. 
 ******
 */
migrate Variable
    when : original.oppositePattern().isDefined()
            and original.oppositePattern().area.isDefined()
            and original.oppositePattern().area.isNested()
    {
        var migArea;
        if (original.oppositePattern().area.isTypeOf(QVTu!Mapping)) {
            migArea = original.oppositePattern().area
                .closure(m | m.context)
                .selectOne(m | not m.context.isDefined()).equivalent(); 
        } else {
            migArea = original.oppositePattern().area.rule
                .closure(m | m.context)
                .selectOne(m | not m.context.isDefined()).domain
                .selectOne(d| d.typedModel == original.oppositePattern().area.typedModel).equivalent();
        }
        if (original.oppositePattern().isTypeOf(QVTu!GuardPattern)) {
            migArea.guardPattern.variable.add(migrated);
        } else {
        	if (original.isTypeOf(QVTu!Variable)) {
        		migArea.bottomPattern.variable.add(migrated);
        	} else {
        		migArea.bottomPattern.realizedVariable.add(migrated);
        	}
        }
    }


/****d* QVTuToQVTm/migrate/NestedMappingCorePatternAssignments
 * CONTEXT
 *  Assignment
 * WHEN
 *  The assignment's bottom pattern is in a nested mapping
 * FUNCTION
 *  Move the assignment to the top containment mapping.
 ******
 */
migrate Assignment
    when {
        if (original.isTypeOf(QVTu!VariableAssignment)) {
            var refined;
	        if (original.bottomPattern.area.isTypeOf(QVTu!Mapping)) {
	            refined = original.bottomPattern.area.closure(m | m.refinement).asSet().bottomPattern;
	        } else {
	            refined = original.bottomPattern.area.rule.closure(m | m.refinement).asSet().domain.flatten()
	                    .select(d | d.typedModel == original.bottomPattern.area.typedModel).bottomPattern;
	        }
	        return original.bottomPattern.area.isNested() and not original.isVariableInit(refined);
        } else {
            return original.bottomPattern.area.isNested();
        }
    } 
    {   
        var migArea;
        //original.toString().println("NestedMappingCorePatternAssignments ");
        if (original.bottomPattern.area.isTypeOf(QVTu!Mapping)) {
            migArea = original.bottomPattern.area
                .closure(m | m.context)
                .selectOne(m | not m.context.isDefined()).equivalent(); 
        } else {
            migArea = original.bottomPattern.area.rule
                .closure(m | m.context)
                .selectOne(m | not m.context.isDefined()).domain
                .selectOne(d| d.typedModel == original.bottomPattern.area.typedModel).equivalent();
        }
        migrated.bottomPattern = migArea.bottomPattern;
    }

/****m* QVTuToQVTm/migrate/NestedMappingCorePatternPredicate
 * CONTEXT
 *  Predicate
 * WHEN
 *  The predicate's pattern is in a nested mapping
 * FUNCTION
 *  Move predicates in nested mappings to the top containment mapping
 ******
 */
migrate Predicate
    when : original.pattern.area.isNested()
    {
        var migArea;
        if (original.pattern.area.isTypeOf(QVTu!Mapping)) {
            migArea = original.pattern.area
                .closure(m | m.context)
                .selectOne(m | not m.context.isDefined()).equivalent(); 
        } else {
            migArea = original.pattern.area.rule
                .closure(m | m.context)
                .selectOne(m | not m.context.isDefined()).domain
                .selectOne(d| d.typedModel == original.pattern.area.typedModel).equivalent();
        }
        if (original.pattern.isTypeOf(QVTu!GuardPattern)) {
            migArea.guardPattern.predicate.add(migrated);
        } else {
            migArea.bottomPattern.predicate.add(migrated);
        }
    }

migrate Mapping
    when : not original.context.isDefined() and original.refinement.isEmpty()
    {
        //original.println("Normal ");
        var nested = original.closure(m | m.local).asSet();//.println("refined ");
        // Init Variables
        for (d in original.domain.includingAll(nested.domain)) {
            for (a in d.bottomPattern.assignment.select(a | a.equivalent().isUndefined()).flatten()) {
                var migBottomPat = migrated.domain
                        .selectOne(d | d.typedModel.name == a.bottomPattern.area.typedModel.name).bottomPattern; 
                var targetVar = migBottomPat.variable
                        .selectOne(v | v.name == a.targetVariable.name);//.println();
                targetVar.ownedInit = emfTool.getECoreUtil().copy(a.value);
            }
        }
        for (a in original.bottomPattern.assignment
                .includingAll(nested.bottomPattern.assignment).flatten()
                .select(a | a.equivalent().isUndefined()).flatten()) {
            //a.toString().println("using ");
            //migrated.bottomPattern.variable.toString().println();
            var orgVar = original.bottomPattern.variable
                    .includingAll(nested.bottomPattern.variable).flatten()
                    .selectOne(v | v.name == a.targetVariable.name);
            var targetVar = orgVar.equivalent();
            targetVar.ownedInit = emfTool.getECoreUtil().copy(a.value);
        }
    }
    
// **** Flat mappings by removing refinement ****

/****m* QVTuToQVTm/migrate/RefinedMappings
 * CONTEXT
 *  mapping
 * WHEN
 *  The mapping refines other mapping(s)
 * FUNCTION
 *  Copy the refined mappings features to the refining mapping.
 ******
 */
migrate Mapping
    when : not original.refinement.isEmpty()
    {
    	//original.println("Refining ");
    	// Get the set of refined mappings
    	var refined = original.closure(m | m.refinement).asSet();
    	migrated.migrateFromMappings(refined);
    	// Promote local mappings from refined mappings
    	var refinedLocal = original.closure(m | m.refinement).asSet()
    			.closure(m | m.local).asSet();
    	migrated.migrateFromMappings(refinedLocal);
    	// Init Variables
    	for (d in original.domain.includingAll(refined.domain)) {
			for (a in d.bottomPattern.assignment.select(a | a.equivalent().isUndefined()).flatten()) {
				var migBottomPat = migrated.domain
						.selectOne(d | d.typedModel.name == a.bottomPattern.area.typedModel.name).bottomPattern; 
				var targetVar = migBottomPat.variable
						.selectOne(v | v.name == a.targetVariable.name);
				targetVar.ownedInit = emfTool.getECoreUtil().copy(a.value);
			}    			
    	}
    	for (a in original.bottomPattern.assignment
    			.includingAll(refined.bottomPattern.assignment).flatten()
    			.select(a | a.equivalent().isUndefined()).flatten()) {
			//a.toString().println("using ");
			var targetVar = migrated.bottomPattern.variable
					.selecOnet(v | v.name == a.targetVariable.name);
			targetVar.ownedInit = emfTool.getECoreUtil().copy(a.value);
		}
    }

@cascade
delete VariableAssignment
	when {
		var refined; 
		if (original.bottomPattern.area.isTypeOf(QVTu!Mapping)) {
			refined = original.bottomPattern.area.closure(m | m.refinement).asSet().bottomPattern;
		} else {
			refined = original.bottomPattern.area.rule.closure(m | m.refinement).asSet().domain.flatten()
					.select(d | d.typedModel == original.bottomPattern.area.typedModel).bottomPattern;
		}
		return original.isVariableInit(refined);
	}

//============================= END ===========================================

operation QVTm!Mapping migrateFromMappings(mappings : Collection) {
	//self.name.println();
	for (tm in QVTu!TypedModel.all().select(tm | tm.name.isDefined())) {
		//tm.println("tm ");
		var tmDomains = mappings.domain.flatten().select(d | d.typedModel == tm);
		if (not tmDomains.isEmpty()) {
			var migDomain = self.domain.selectOne(ed | ed.typedModel == tm.equivalent());
	    	if (migDomain.isUndefined()) {
	  		    //tm.println("Create ");
	            migDomain = new QVTm!CoreDomain;
	            migDomain.guardPattern = new QVTm!GuardPattern;
	            migDomain.bottomPattern = new QVTm!BottomPattern;
	            migDomain.isCheckable = tmDomains.exists(d | d.isCheckable);
	            migDomain.isEnforceable = tmDomains.exists(d | d.isEnforceable);
	            migDomain.typedModel = tm.equivalent();
	            migDomain.name = tm.name;
	            self.domain.add(migDomain);
	    	}
	    	migDomain.migrateFromAreas(tmDomains);
		}
	}
	self.migrateFromAreas(mappings);
}

operation QVTm!Area migrateFromAreas(areas : Collection) {
	//self.toString().println("migrateFromAreas ");
	self.guardPattern.addRefinedVariables(areas.guardPattern);
   	self.bottomPattern.addRefinedVariables(areas.bottomPattern);
    self.bottomPattern.addRefinedRealizedVariables(areas.bottomPattern);
    for (a in areas.bottomPattern.assignment.flatten()) {
		//a.toString().println();
		if (a.isTypeOf(QVTu!VariableAssignment) and a.isVariableInit(areas.bottomPattern))
			break;
		var aCopy = emfTool.getECoreUtil().copy(a);
		self.bottomPattern.assignment.add(aCopy);
		// Fix the var references
		//aCopy.fixCopiedVarReferences();
	}
	for (p in areas.bottomPattern.predicate.flatten()) {
		//p.toString().println();
		var pCopy = emfTool.getECoreUtil().copy(p);
		self.bottomPattern.predicate.add(pCopy);
		// Fix the var references
		//pCopy.fixCopiedVarReferences();
	}
	for (p in areas.guardPattern.predicate.flatten()) {
		//p.toString().println();
		var pCopy = emfTool.getECoreUtil().copy(p);
		self.guardPattern.predicate.add(pCopy);
		// Fix the var references
		//pCopy.fixCopiedVarReferences();
	}
	
}

operation QVTu!VariableAssignment isVariableInit(refinedPatterns : Collection) {
	
	var initVarCandidate = self.targetVariable;
	//self.toString().println("isVariableInit ");
	// Test if the variable is in a bottom pattern (i.e. local)
	if (self.bottomPattern.variable.includingAll(refinedPatterns.variable.flatten())
	 		.includes(initVarCandidate)) {
	 	return true;
	} else {
		return false;
	}
}


// FIXME we assume the refining mapping uses the least abstract type
operation QVTm!Pattern addRefinedVariables(sourcePatterns : Collection) {
	
	var varNames = sourcePatterns.variable.flatten().name.asSet();			// Unique variable names 
	var lowRankVars = varNames.collect(n | getLowestRankVariable(sourcePatterns.variable.flatten()	// For variables with same name, get the less abstract one
			.includingAll(self.variable).select(v | v.name == n)))
			.excludingAll(self.variable.select(v | v.name == varNames.first()));		// Only copy theones that don't esist already
	//lowRankVars.println("lr vars ");
	self.variable.addAll(emfTool.getECoreUtil().copyAll(lowRankVars));
}

// FIXME we assume the refining mapping uses the least abstract type
operation QVTm!BottomPattern addRefinedRealizedVariables(sourcePatterns : Collection ) {

	var varNames = sourcePatterns.realizedVariable.flatten().name.asSet();			// Unique variable names 
	//varNames.println("gp rvarNames ");
	var lowRankVars = varNames.collect(n | getLowestRankVariable(sourcePatterns.realizedVariable.flatten()	// For variables with same name, get the less abstract one
			.includingAll(self.realizedVariable).select(v | v.name == n)))
			.excludingAll(self.realizedVariable.select(v | v.name == varNames.first()));
	//lowRankVars.println("lr rvars ");
	self.realizedVariable.addAll(emfTool.getECoreUtil().copyAll(lowRankVars));
}

post {
    
    fixReferences(QVTm!VariableExp.all());
    "QVTuToQVTm Done!".println();
}



