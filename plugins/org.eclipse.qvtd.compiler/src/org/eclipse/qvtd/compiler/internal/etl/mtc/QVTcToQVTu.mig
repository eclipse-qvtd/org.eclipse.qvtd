/*******************************************************************************
 * Copyright (c) 2013 The University of York and Willink Transformations.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos - initial API and implementation
 ******************************************************************************/
import "../helpers/QVTHelpers.eol";
import "../helpers/OclLibHelper.eol";

/****f* /org.eclipse.qvtd.build.etl/mtc/QVTcToQVTu
 * NAME
 *  QVTcToQVTu -- Flock migration script from QVTc to QVTu
 *
 * SEE ALSO
 *  /org.eclipse.qvtd.build.etl/mtc/QVTuToQVTm
 ******
 */

/****d* QVTcToQVTu/delete/PropertyAssignment
 * ORIGINAL
 *  PropertyAssignment
 * FUNCTION
 *  * R to M assignments are removed, iif the value expression is not a
 *    VariableExp (trace assignment)
 *  * M to L are removed
 *  * M to M are removed, iif the value references a local variable (i.e. pattern == bottomPattern)
 *  The slotExpression type determines the affected domain. For the value, we
 *  have to check all the variables used in the expression.
 *    
 ******
 */
@cascade
delete PropertyAssignment
	when : (original.slotExpression.isFromInputDomain()        // M to L
            and original.value.findReferencedVariables().exists(v | v.oppositePattern().area.isMiddleDomain())
            )
        or  (original.slotExpression.isFromMiddleDomain()       // R to M, except trace values
            and not original.value.isTypeOf(QVTc!VariableExp)
            and not original.value.isTypeOf(QVTc!NullLiteralExp)
            and original.value.findReferencedVariables().forAll(v | v.oppositePattern().area.isOutputDomain())
            )
        or (original.slotExpression.isFromMiddleDomain()      // M (local variable) to M
            and original.value.isTypeOf(QVTc!VariableExp)
            and original.value.referredVariable.oppositePattern().area.isMiddleDomain()
            and original.value.referredVariable.oppositePattern().isTypeOf(QVTc!BottomPattern)
            )

@cascade
delete VariableAssignment
    when : (original.targetVariable.oppositePattern().area.isInputDomain()      // M to L
            and original.value.findReferencedVariables().exists(v | v.oppositePattern().area.isMiddleDomain())
            )
        or (original.targetVariable.oppositePattern().area.isMiddleDomain()      // R to M
            and not original.value.isTypeOf(QVTc!VariableExp)
            and original.value.findReferencedVariables().forAll(v | v.oppositePattern().area.isOutputDomain())
            )
        or (original.targetVariable.oppositePattern().area.isMiddleDomain()      // R to M
            and original.value.findReferencedVariables().exists(v | v.oppositePattern().area.isMiddleDomain()
                    and v.oppositePattern().isTypeOf(QVTc!BottomPattern))
            )    
    
/****r* QVTcToQVTu/retype/PropertyAssignment
 * ORIGINAL
 *  PropertyAssignment
 * EVOLVED
 *  Predicate 
 * FUNCTION
 *  Property assignments from L to L are retyped to predicates
 *    
 ******
 */
retype PropertyAssignment to Predicate
    when : original.slotExpression.isFromInputDomain()
            and original.value.findReferencedVariables().forAll(v | v.oppositePattern().area.isInputDomain())
   

/****m* QVTcToQVTu/migrate/PropertyAssignment
 * ORIGINAL
 *  PropertyAssignment
 * MIGRATE_TO
 *  Predicate 
 * FUNCTION
 *  For PropertyAssignment that have been retyped to Predicates, we need to 
 *  define the OCL Expression that replaces the assignment. CST wise, this is
 *  changing a ":=" for a "=", but AST wise it is more complex.
 *    
 ******
 */  

migrate PropertyAssignment
   when : original.slotExpression.isFromInputDomain()
        and original.value.findReferencedVariables().forAll(v | v.oppositePattern().area.isInputDomain())
    {
        //original.toString().println("migrate PropertyAssignment ");
        var exp = new QVTc!OperationCallExp;
        // It's an '=' operation. TODO, how to get the correct type?
        //exp.referredOperation = getOperationByName("=", oclStdLib!PrimitiveType.all().selectOne(t | t.name == "Boolean"));
        // TODO hack till we figure out the correct way to use the OCLStdLib
        exp.referredOperation = getEqualsOperation();
        exp.name = exp.referredOperation.name;
        // The type is boolean
        exp.type = exp.referredOperation.type;
        // The source is a PropertyCallExp
        exp.ownedSource = new QVTc!PropertyCallExp;
        // The property is the targetProperty
        exp.ownedSource.referredProperty = original.targetProperty.equivalent();
        // The source of the PropertyCallExp is the slotExpression
        exp.ownedSource.ownedSource = original.slotExpression.equivalent();
        exp.ownedSource.type = original.targetProperty.equivalent().type;
        // The argument is the value
        exp.ownedArguments.add(original.value.equivalent());
        migrated.conditionExpression = exp;
        migrated.pattern = original.bottomPattern.equivalent();
    }


/****m* QVTcToQVTu/migrate/PropertyAssignment_NoDefaults
 * ORIGINAL
 *  PropertyAssignment
 * MIGRATE_TO
 *  PropertyAssignment
 * FUNCTION
 *  Output domain PropertyAssignments should not be default if the operation
 *  mode is Check.
 *    
 ******
 */      
migrate PropertyAssignment
    when : original.bottomPattern.area.isOutputDomain() 
        and isCheckMode()
        and original.isDefault {
    
    migrated.isDefault = false;
}


/****d* QVTcToQVTu/delete/Predicate
 * ORIGINAL
 *  Predicate
 * FUNCTION 
 *  Delete output domain predicates of realized variables
 * SEE ALSO
 *    
 ******
 */
@cascade
delete Predicate
    when : original.pattern.isTypeOf(QVTc!BottomPattern)
    and original.conditionExpression.findReferencedVariables().forAll(v | v.oppositePattern().area.isOutputDomain())

/****r* QVTcToQVTu/retype/RealizedVariable
 * ORIGINAL
 *  RealizedVariable
 * EVOLVED
 *  Variable
 * FUNCTION
 *  Realized variables in the input domain are retyped to variables
 *    
 ******
 */
retype RealizedVariable to Variable
    when : original.oppositePattern().area.isInputDomain()     

/****m* QVTcToQVTu/migrate/CoreModel
 * ORIGINAL
 *  CoreModel
 * FUNCTION
 *  Fix the name and the external URI of the migrated model
 *    
 ******
 */  
migrate CoreModel
    {
        migrated.externalURI = original.externalURI.replace(".qvtc", ".qvtu.qvtc");
    }
    

/****m* QVTcToQVTu/migrate/Transformation
 * ORIGINAL
 *  Transformation
 * FUNCTION
 *  Add additional information to the comments to indicate that the QVTu AST is
 *  generated based on an especific configuration.
 *    
 ******
 */
migrate Transformation {
    var comment : QVTc!Comment = new QVTc!Comment;
    comment.body = getUnidirComment();
    migrated.ownedComments.add(comment);
}

/****m* QVTcToQVTu/migrate/CoreDomain
 * ORIGINAL
 *  CoreDomain
 * WHEN
 *  The domain's typeModel is the input domain.
 * FUNCTION
 *  Since QVTu is uni-directional, make sure that all input domains' check and
 *  enforce flags are false.
 *    
 ******
 */
migrate CoreDomain
    when : original.isInputDomain() {
	    
	    migrated.isEnforceable = false;
	    migrated.isCheckable = true;
    }

/****m* QVTcToQVTu/migrate/CoreDomain
 * ORIGINAL
 *  CoreDomain
 * WHEN
 *  The domain's typeModel is the output domain.
 * FUNCTION
 *  Since QVTu is uni-directional, output domaisn can either be check or enforce
 *    
 ******
 */
migrate CoreDomain
    when : original.isOutputDomain() {
        if (isCheckMode()) {
            migrated.isEnforceable = false;
        }
	    if (isEnforceMode()) {
	        migrated.isCheckable = false;
	    }
    }

/****m* QVTcToQVTu/migrate/BottomPattern
 * ORIGINAL
 *  BottomPattern
 * WHEN
 *  The pattern is in the input domain, or the pattern is in the middle domain
 *  (i.e. a mapping) and the mapping only has output domains.  
 * FUNCTION
 *  Add the migrated realized varaibles and assignments to the pattern.
 * TODO
 * THIS SHOULD BE HANDELED BY THE ENGINE!!??
 *    
 ******
 */   
migrate BottomPattern
    {
    	if (original.area.isInputDomain()) {
    		migrated.variable.addAll(original.realizedVariable.equivalent());
    	}
    }

@cached
operation getEqualsOperation() : Any {
    return  getOclAnyEqualsOp();
}

post {
    "QVTcToQVTu Done!".println();
}
