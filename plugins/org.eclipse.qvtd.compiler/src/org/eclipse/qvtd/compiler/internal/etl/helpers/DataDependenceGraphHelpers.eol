/*******************************************************************************
 * Copyright (c) 2013 The University of York and Willink Transformations.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos - initial implementation
 ******************************************************************************/
import "QVTHelpers.eol";

/****l* /org.eclipse.qvtd.build.etl/helpers/DataDependenceGraphHelpers
 * NAME
 *  DataDependenceGraphHelpers -- A set of EOL helpers to perform mapping data
 * dependence analysis for a QVT transformation.
 *
 * SEE ALSO
 *    
 ******
 */



/****o* org.eclipse.qvtd.build.etl/helpers/DataDependenceGraphHelpers/getNodeForQvtAstNode 
 * NAME
 *  getNodeForQvtAstNode - Get the correspoiding graph node for the AST node.
 * FUNCTION
 *  If a graph node for the AST node does not exist, it creates a new one. If it
 *  exists, it returns the previously created one.
 *
 * CONTEXT
 *  ddg!Graph   The data dependence graph   
 * PARAMETERS
 *  astNode The QVT AST node for whihc the corresponding graph node is wanted
 *  nodeMap The map to keep a cache of AST - Node relations
 * RESULT
 *  ddg!Node The node that corresponds to the AST node
 * SEE ALSO
 *
 */ 
operation ddg!Graph getNodeForQvtAstNode(astNode : QVT!NamedElement, nodeMap : Map) : Set {
    var res :Set;
    if (nodeMap.containsKey(astNode)) {
        return nodeMap.get(astNode);
    } else {
        // TODO Different node types for different AST node types. If the type of the AST node is  DataType, things change!
        if (astNode.isTypeOf(QVT!Mapping)) {
            var n = self.owningModel().createInstance("MappingNode");
            n.label = astNode.name;
            n.qvtAstNode = astNode;
            res.add(n);
        } else if (astNode.isKindOf(QVT!Variable)) {
            if (astNode.type.isTypeOf(QVT!PrimitiveType)) {
                errln("getNodeForQvtAstNode -> PrimitiveType, should not get here.");
            } else {
                if (astNode.type.isAbstract) {
                    for (vSub in astNode.type.package.ownedType.select(t | t.superClass.includes(astNode.type))) {
                        var n = self.owningModel().createInstance("ClassNode");
	                    if (astNode.oppositePattern().area.isMiddleDomain()) {
	                        n.`model` = ddg!Model#middle;
	                    } else if(astNode.oppositePattern().area.isInputDomain()) {
	                        n.`model` = ddg!Model#input;
	                    } else if(astNode.oppositePattern().area.isOutputDomain()) {
	                        n.`model` = ddg!Model#output;
	                    }
	                    n.label = vSub.name;
	                    n.qvtAstNode = astNode;
	                    res.add(n);
                    }
                } else {
                    var n = self.owningModel().createInstance("ClassNode");
	                if (astNode.oppositePattern().area.isMiddleDomain()) {
	                    n.`model` = ddg!Model#middle;
	                } else if(astNode.oppositePattern().area.isInputDomain()) {
	                    n.`model` = ddg!Model#input;
	                } else if(astNode.oppositePattern().area.isOutputDomain()) {
	                    n.`model` = ddg!Model#output;
	                }
	                n.label = astNode.type.name;
	                n.qvtAstNode = astNode;
	                res.add(n);
                }
            }
        } else {
            astNode.println("why? ");
        }
	    nodeMap.put(astNode, res);
    }
    self.elements.addAll(res);
    return res;
}


/****o* org.eclipse.qvtd.build.etl/helpers/DataDependenceGraphHelpers/getNodeForDataType 
 * NAME
 *  getNodeForDataType - Get the correspoiding graph node for the AST node.
 * FUNCTION
 *  If a graph node for the AST node does not exist, it creates a new one. If it
 *  exists, it returns the previously created one.
 *
 * CONTEXT
 *  ddg!Graph   The data dependence graph   
 * PARAMETERS
 *  astNode The QVT AST node for whihc the corresponding graph node is wanted
 *  nodeMap The map to keep a cache of AST - Node relations
 * RESULT
 *  ddg!Node The node that corresponds to the AST node
 * SEE ALSO
 *
 */ 
operation ddg!Graph getNodeForDataType(use : Sequence, nodeMap : Map) : ddg!Node {
    var n;
    if (nodeMap.containsKey(use)) {
        n = nodeMap.get(use);
    } else {
        // TODO Different node types for different AST node types. If the type of the AST node is  DataType, things change!
        n = self.owningModel().createInstance("DataTypeNode");
        n.label = use.collect(u | u.name).concat(".");
        n.type = use.first();
        n.attribute = use.last();
        nodeMap.put(use, n);
        self.elements.add(n);
    }
    return n;
}

/****o* org.eclipse.qvtd.build.etl/helpers/DataDependenceGraphHelpers/getNodeForTreeNode
 * NAME
 *  getNodeForTreeNode - Get the correspoiding graph node for the tree node.
 * FUNCTION
 *  If a graph node for the tree node does not exist, it creates a new one. If it
 *  exists, it returns the previously created one.
 *
 * CONTEXT
 *  ddg!Graph   The data dependence graph   
 * PARAMETERS
 *  treeNode The tree node for which the corresponding graph node is wanted
 *  nodeMap The map to keep a cache of Tree - Node relations
 * RESULT
 *  ddg!Node The node that corresponds to the AST node
 * SEE ALSO
 *
 */ 
operation ddg!Graph getNodeForTreeNode(treeNode : tree!Node, nodeMap : Map) : ddg!Node {
    var n;
    if (nodeMap.containsKey(treeNode)) {
        n = nodeMap.get(treeNode);
    } else {
        n = self.owningModel().createInstance("ClassNode");
        n.label = treeNode.name;
        nodeMap.put(treeNode, n);
        self.elements.add(n);
    }
    return n;
}

/****o* org.eclipse.qvtd.build.etl/helpers/DataDependenceGraphHelpers/getNodeCopy
 * NAME
 *  getNodeCopy - Get a copy of the Node
 * FUNCTION
 *  Creates a new Node and copies all the attributes from the original one
 * CONTEXT
 *  ddg!Graph   The graph that owns the node
 * PARAMETERS
 *  ddNode The node to copy
 *  mergeMap  The cache of copyed nodes
 * SEE ALSO
 *
 */
operation ddg!Graph getNodeCopy(ddNode : ddg!Node, mergeMap : Map) : ddg!Node {
    var n;
    if (mergeMap.containsKey(ddNode)) {
        n = mergeMap.get(ddNode);
    } else {
        if (ddNode.isTypeOf(ddg!ClassNode)) {
            n = self.owningModel().createInstance("ClassNode");
            n.`model` = ddNode.`model`;
        } else if (ddNode.isTypeOf(ddg!DataTypeNode)) {
            n = self.owningModel().createInstance("DataTypeNode");
            n.attribute = ddNode.attribute;
        } else if (ddNode.isTypeOf(ddg!MappingNode)) {
            n = self.owningModel().createInstance("MappingNode");
        }
        n.label = ddNode.label;
        n.qvtAstNode = ddNode.qvtAstNode;
        mergeMap.put(ddNode, n);
        self.elements.add(n);
    }
    return n;
}



/****o* org.eclipse.qvtd.build.etl/helpers/DataDependenceGraphHelpers/importContainmentTree
 * NAME
 *  importContainmentTree - Import metamodel containment trees into data dependence graph.
 * FUNCTION
 *  Copies all the nodes in the metamodel containment tree into the data
 *  dependence graph and creates containment edges between them.
 * CONTEXT
 *  ddg!Graph   The graph to where the tree is imported
 * PARAMETERS
 *  treeNodes A set of the tree nodes to be copied into the graph
 *  treeType  The type of tree being imported: l=left,m=middle,r=right
 * SEE ALSO
 *
 */ 
operation ddg!Graph importContainmentTree(treeNodes : Collection, treeType : String, mergeMap : Map) {
    var m;
    switch (treeType) {
        case("l") :
            m = ddg!Model#input;
        case("m") :
            m = ddg!Model#middle;
        case("r") :
            m = ddg!Model#output;
    }
    for (tn in treeNodes.excluding(treeNodes.selectOne(n | n.parent.isEmpty()))) {
        var n = self.getNodeForTreeNode(tn, mergeMap);
        n.`model` = m;
        for (c in tn.children) {
            var e = self.owningModel().createInstance("ContainmentEdge");
            e.`model` = m;
            e.source = n;
            e.target = self.getNodeForTreeNode(c, mergeMap);
            self.elements.add(e);
        }
    }  
}



/****o* org.eclipse.qvtd.build.etl/helpers/DataDependenceGraphHelpers/dfsDerivedVariables
 * NAME
 *  dfsDerivedVariables - Do a depth first search for derived variables. 
 * SYNOPSIS
 *   
 * FUNCTION
 *  Traverses the outgoing edges which has a type different from
 *  ddg!EdgeType#primaryInput. There is no need to query opposite relations as
 *  the outgoing relations are the only valid ones. 
 * CONTEXT
 *  ddg!Node   
 * PARAMETERS
 *  varPool The set of variables we are looking for
 * RESULT
 *  A set of all the derived variables 
 * SEE ALSO
 *
 */
operation ddg!Node dfsDerivedVariables(varPool : Collection) : Set {
    self.println("DFS ");
    self.~visited = true;       // mark to avoid loops
    var derived = new Set;
    
    // Find all the edges that connect to variables in the pool, in the 
    // data dependence graph, all outgoing edges are navigable
    derived.addAll(self.outgoing.select(e | varPool.includes(e.target)).collect(e | e.target));
    self.~visited = false;      // So it can be visited by other searches
    return derived;
}
