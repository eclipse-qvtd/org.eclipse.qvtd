/*******************************************************************************
 * Copyright (c) 2013 The University of York and Willink Transformations.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos - initial implementation
 ******************************************************************************/

/****l* org.eclipse.qvtd.build.etl/helpers/Math
 * Math helpers. Implementation of grapg, set, etc., algorithms
 *
 */

/****o* org.eclipse.qvtd.build.etl/helpers/Math/greedySetCover
 * NAME
 *  greedySetCover - Calculate the greedy solution for the set cover problem 
 * FUNCTION
 *  Input:  Given a set U of n elements, a collection S1, S2, . . . Sm of
 *  subsets of U, with weights wi
 *  Goal:   Find a collection C of these sets Si whose union is equal to U and
 *  such that
 *      |latex \begin{eqnarray}
 *      |latex \sum_{i\in C}w_i
 *      |latex \end{eqnarray}
 * is minimized.
 * PARAMETERS
 *  U   Set to match
 *  S   Map of {i, Si} 
 * RESULT
 *  A Collection of the subsests that cover U
 *
 */
operation greedySetCover(U : Sequence, S : Map) : Sequence {
    var C : Sequence;
    var R = U;
    while (not R.isEmpty()) {
        //R.println("R ");
        var min : Real = 1;    // Since we have unit cost, 1 is the max possible value
        var cS;
        var sVal : Real;
        for (k in S.keySet().excludingAll(C)) {
            var s = S.get(k).including(k);
            //if (not s.isEmpty()) {
                //k.println("k ");
                //s.println("s ");
                //s.select(v | R.includes(v)).size().println("s \\U R ");
                sVal = 1 / s.select(v | R.includes(v)).size().asReal();
                //sVal.println("sVal ");
	            if (sVal <= min) {
	                min = sVal;
	                cS = k;    
	            }
            //}
        }
        C.add(cS);
        R.removeAll(S.get(cS).including(cS));
    }
    return C;
}
