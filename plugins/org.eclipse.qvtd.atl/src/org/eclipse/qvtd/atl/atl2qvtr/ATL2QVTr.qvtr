/*******************************************************************************
 * Copyright (c) 2017 Willink Transformations and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial implementation
 *******************************************************************************/
--import atlMM : 'platform:/plugin/org.eclipse.m2m.atl.common/org/eclipse/m2m/atl/common/resources/ATL.ecore#/0'; 
--import atloclMM : 'platform:/plugin/org.eclipse.m2m.atl.common/org/eclipse/m2m/atl/common/resources/ATL.ecore#/1'; 
--import atlprimsMM : 'platform:/plugin/org.eclipse.m2m.atl.common/org/eclipse/m2m/atl/common/resources/ATL.ecore#/2'; 
import atlMM : 'platform:/resource/org.eclipse.m2m.atl.common/org/eclipse/m2m/atl/common/resources/ATL.ecore#/0'; 
import atloclMM : 'platform:/resource/org.eclipse.m2m.atl.common/org/eclipse/m2m/atl/common/resources/ATL.ecore#/1'; 
import atlprimsMM : 'platform:/resource/org.eclipse.m2m.atl.common/org/eclipse/m2m/atl/common/resources/ATL.ecore#/2'; 
--import atlMM : 'http://www.eclipse.org/gmt/2005/ATL'; 
--import atloclMM : 'http://www.eclipse.org/gmt/2005/OCL'; 
--import atlprimsMM : 'http://www.eclipse.org/gmt/2005/ATL-PrimitiveTypes'; 

import pivotocl     :   'platform:/resource/org.eclipse.ocl.pivot/model/Pivot.ecore'::pivot;                            -- HHR Use Pivot metamodels
import qvtbase      :   'platform:/resource/org.eclipse.qvtd.pivot.qvtbase/model/QVTbase.ecore'::qvtbase;               -- HHR Use Pivot metamodels
import qvttemplate  :   'platform:/resource/org.eclipse.qvtd.pivot.qvttemplate/model/QVTtemplate.ecore'::qvttemplate;   -- HHR Use Pivot metamodels
import qvtrelation  :   'platform:/resource/org.eclipse.qvtd.pivot.qvtrelation/model/QVTrelation.ecore'::qvtrelation;   -- HHR Use Pivot metamodels

package org::eclipse::qvtd::atl::atl2qvtr {
/**
 * Transform an ATL transformation to a QVTr transformation
 */
	transformation ATL2QVTr(atl:{atlMM,atloclMM,atlprimsMM}, qvtr:{qvtrelation,qvttemplate,qvtbase,pivotocl})
	{		
		/**
		 *  atl::Helper/OclFeatureDefinition/Operation <=> qvtr::Function
		 */
		top relation Helper2Function {
			opName : String;
			aModule : atlMM::Module;
			relTx : qvtrelation::RelationalTransformation;
			/*enforce*/ domain atl helper : Helper {
				module = aModule,
				definition = aDef : OclFeatureDefinition {
					feature = aFeat : Operation {
						name = opName
					}
				}
			};	   
			enforce domain qvtr function : Function {
				name = opName,
				owningClass = relTx
			};
			when {
				Model2RelationalTransformation(aModule, relTx);
			}
		}
		
		/**
		 *  atl::InPattern <=> qvtr::RelationDomain (checkonly)
		 */
		top relation InPattern2RelationDomain {
			aRule : atlMM::MatchedRule;
			tmName : String;
			rRule : qvtrelation::Relation;
			/*enforce*/ domain atl aPattern : InPattern {
				rule = aRule	   
			};	   
			enforce domain qvtr rDomain : RelationDomain {
				rule = rRule,
				isCheckable = true,
				isEnforceable = false
			};
			when {
				MatchedRule2Relation(aRule, rRule);
			}
			where {
				InPattern2RelationDomain_guard(aPattern, rRule);
			}
		}
		
		/**
		 *  atl::InPattern <=> qvtr::RelationDomain (checkonly)
		 */
		relation InPattern2RelationDomain_guard {
			aExpression : atloclMM::OperationCallExp;
			rExpression : pivotocl::OperationCallExp;
			/*enforce*/ domain atl aPattern : InPattern {
				filter = aExpression	   
			};	   
			enforce domain qvtr rRule : Relation {
				when = w : Pattern{
					predicate = p : Predicate{
						conditionExpression = rExpression
					}
				}
			};
			when {
				OclExpression2OCLExpression(aExpression, rExpression);
			}
		}
		
		/**
		 *  atl::MatchedRule <=> qvtr::Relation
		 */
		top relation MatchedRule2Relation {
			ruleName : String;
			aModule : atlMM::Module;
			relTx : qvtrelation::RelationalTransformation;
			/*enforce*/ domain atl matchedRule : MatchedRule {
				module = aModule,
				name = ruleName
			};	   
			enforce domain qvtr rRule : Relation {
				name = ruleName,
				transformation = relTx
			};
			when {
				Model2RelationalTransformation(aModule, relTx);
			}
		}
		
		/**
		 *  atl::Module <=> qvtr::RelationModel/Package/RelationalTransformation
		 */
		top relation Model2RelationalTransformation {
			txName : String;
			/*enforce*/ domain atl module : Module {
				name = txName
			};	   
			enforce domain qvtr relTx : RelationalTransformation {
				name = txName,
				owningPackage = : Package {
					name = null,
					Model = : RelationModel {
						name = null
					}
				}
			};
		}
		
		/**
		 *  atl::Module/atl::OclModel <=> qvtr::TypedModel (create)
		 */
		top relation OclModel2ModelParameter_create {
			tmName : String;
			relTx : qvtrelation::RelationalTransformation;
			/*enforce*/ domain atl oclModel : OclModel {
				name = tmName,
				opposite(Module::inModels) = aModule : Module {}	   
			};	   
			enforce domain qvtr relTM : TypedModel {
				name = tmName,
				transformation = relTx
			};
			when {
				Model2RelationalTransformation(aModule, relTx);
			}
		}
		
		/**
		 *  atl::Module/atl::OclModel <=> qvtr::TypedModel (from)
		 */
		top relation OclModel2ModelParameter_from {
			tmName : String;
			relTx : qvtrelation::RelationalTransformation;
			/*enforce*/ domain atl oclModel : OclModel {
				name = tmName,
				opposite(Module::outModels) = aModule : Module {}	   
			};	   
			enforce domain qvtr relTM : TypedModel {
				name = tmName,
				transformation = relTx
			};
			when {
				Model2RelationalTransformation(aModule, relTx);
			}
		}
		
		
-----------------------------------------------------------------------------------------------------
-- Non-top OCL copy
-----------------------------------------------------------------------------------------------------
		/**
		 *  atl::OclExpression <=> ocl::OCLExpression
		 */
		relation OclExpression2OCLExpression {
			/*enforce*/ domain atl aExpression : OclExpression {
			};	   
			enforce domain qvtr rExpression : OCLExpression {
			};
		}
		
		/**
		 *  atl::OperationCallExp <=> ocl::OperationCallExp
		 */
		relation OperationCallExp2OperationCallExp overrides OclExpression2OCLExpression {
			/*enforce*/ domain atl aExpression : OperationCallExp {
			};	   
			enforce domain qvtr rExpression : OperationCallExp {
			};
		}
	}
		
}
