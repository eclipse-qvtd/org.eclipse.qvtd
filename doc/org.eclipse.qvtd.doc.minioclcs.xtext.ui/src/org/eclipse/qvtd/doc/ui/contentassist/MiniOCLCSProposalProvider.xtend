/*
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package org.eclipse.qvtd.doc.ui.contentassist

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.qvtd.doc.miniocl.util.Visitable
import org.eclipse.qvtd.doc.miniocl.lookup.LookupEnvironment
import org.eclipse.qvtd.doc.miniocl.NamedElement
import org.eclipse.qvtd.doc.miniocl.util.MiniOCLUnqualifiedClassLookupVisitor
import org.eclipse.qvtd.doc.minioclcs.CSTrace

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class MiniOCLCSProposalProvider extends AbstractMiniOCLCSProposalProvider {
	
	
	override complete_PathElementCS(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		var asElement = getVisitableElement(model);
		if (asElement != null ) {
			var ContentAssitLookupEnvironment lookupEnv = new ContentAssitLookupEnvironment(asElement as EObject);
			var MiniOCLUnqualifiedClassLookupVisitor visitor = new MiniOCLUnqualifiedClassLookupVisitor(lookupEnv);
			createProposals(asElement.accept(visitor), context, acceptor);
		}
		super.complete_PathElementCS(model, ruleCall, context, acceptor)
	}
	
	
	
	def Visitable getVisitableElement(EObject model) {
		
		var sElement = model;
		while (sElement != null) {
			if (sElement instanceof CSTrace) {
				var EObject asElement = sElement.ast;
				if (asElement instanceof Visitable) {
					return asElement;		
				}
			}
			sElement = sElement.eContainer;
		}
		return null;
	}
	
	def void createProposals(LookupEnvironment lookupEnv, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		
		for (NamedElement namedElement : lookupEnv.namedElements) {
			acceptor.accept(createCompletionProposal(namedElement.name, context))
		}
	}
	
}
